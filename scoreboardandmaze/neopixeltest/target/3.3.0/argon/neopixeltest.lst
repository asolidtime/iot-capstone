
/home/maxwell/CTD-IoT/capstone/scoreboardandmaze/neopixeltest/target/3.3.0/argon/neopixeltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a650  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be670  000be670  0000e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be694  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  2003e420  000be698  0001e420  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000304  2003e4f0  2003e4f0  0002e4f0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000be764  000be764  0001e764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be78c  000be78c  0001e78c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016bd6c  00000000  00000000  0001e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000190da  00000000  00000000  0018a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000039a0  00000000  00000000  001a35d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000420d5  00000000  00000000  001a6f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0005249e  00000000  00000000  001e904b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0014a3a6  00000000  00000000  0023b4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0004b608  00000000  00000000  0038588f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000c900  00000000  00000000  003d0e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a8a4  00000000  00000000  003dd798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 fa8f 	bl	bc554 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 fab1 	bl	bc5a4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e420 	.word	0x2003e420
   b404c:	000be698 	.word	0x000be698
   b4050:	2003e4ec 	.word	0x2003e4ec
   b4054:	2003e4f0 	.word	0x2003e4f0
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fef7 	bl	b7e54 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be63c 	.word	0x000be63c
   b4080:	000be664 	.word	0x000be664

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bea6 	b.w	b4dd4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fedd 	bl	b4e48 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 be97 	b.w	b7dc4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 be0b 	b.w	b6cb0 <malloc>

000b409a <_Znaj>:
   b409a:	f002 be09 	b.w	b6cb0 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 be0f 	b.w	b6cc0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 be0d 	b.w	b6cc0 <free>
	...

000b40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f002 fd42 	bl	b6b38 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000b6a99 	.word	0x000b6a99
   b40bc:	000bc900 	.word	0x000bc900

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d2:	6a00      	ldr	r0, [r0, #32]
   b40d4:	6803      	ldr	r3, [r0, #0]
   b40d6:	68db      	ldr	r3, [r3, #12]
   b40d8:	4718      	bx	r3
	...

000b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      matrix.show();
      delay(100);
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b40dc:	b530      	push	{r4, r5, lr}
   b40de:	b097      	sub	sp, #92	; 0x5c
   b40e0:	460a      	mov	r2, r1
  char stuff[21];
    for (size_t ii = 0; ii < len; ii++) {
        stuff[ii] = data[ii];
    }
    String stuffconv = stuff;
    xsample = stuffconv.substring(0, stuffconv.indexOf(" ")).toInt();
   b40e2:	4c33      	ldr	r4, [pc, #204]	; (b41b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd4>)
        stuff[ii] = data[ii];
   b40e4:	4601      	mov	r1, r0
   b40e6:	a810      	add	r0, sp, #64	; 0x40
   b40e8:	f008 fa34 	bl	bc554 <memcpy>
    String stuffconv = stuff;
   b40ec:	a910      	add	r1, sp, #64	; 0x40
   b40ee:	4668      	mov	r0, sp
   b40f0:	f007 f975 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
    xsample = stuffconv.substring(0, stuffconv.indexOf(" ")).toInt();
   b40f4:	4621      	mov	r1, r4
   b40f6:	a808      	add	r0, sp, #32
   b40f8:	f007 f971 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
   b40fc:	a908      	add	r1, sp, #32
   b40fe:	4668      	mov	r0, sp
   b4100:	f007 fa50 	bl	bb5a4 <_ZNK6String7indexOfERKS_>
   b4104:	2200      	movs	r2, #0
   b4106:	4669      	mov	r1, sp
   b4108:	4603      	mov	r3, r0
   b410a:	a80c      	add	r0, sp, #48	; 0x30
   b410c:	f007 fa78 	bl	bb600 <_ZNK6String9substringEjj>
   b4110:	a80c      	add	r0, sp, #48	; 0x30
   b4112:	f007 fa9c 	bl	bb64e <_ZNK6String5toIntEv>
   b4116:	4b27      	ldr	r3, [pc, #156]	; (b41b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd8>)
   b4118:	6018      	str	r0, [r3, #0]
   b411a:	a80c      	add	r0, sp, #48	; 0x30
   b411c:	f007 f914 	bl	bb348 <_ZN6StringD1Ev>
   b4120:	a808      	add	r0, sp, #32
   b4122:	f007 f911 	bl	bb348 <_ZN6StringD1Ev>
    ysample = stuffconv.substring(stuffconv.indexOf(" ") + 1, stuffconv.lastIndexOf(" ")).toInt();
   b4126:	4621      	mov	r1, r4
   b4128:	a804      	add	r0, sp, #16
   b412a:	f007 f958 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
   b412e:	a904      	add	r1, sp, #16
   b4130:	4668      	mov	r0, sp
   b4132:	f007 fa37 	bl	bb5a4 <_ZNK6String7indexOfERKS_>
   b4136:	4621      	mov	r1, r4
   b4138:	4605      	mov	r5, r0
   b413a:	a808      	add	r0, sp, #32
   b413c:	f007 f94f 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
   b4140:	a908      	add	r1, sp, #32
   b4142:	4668      	mov	r0, sp
   b4144:	f007 fa56 	bl	bb5f4 <_ZNK6String11lastIndexOfERKS_>
   b4148:	1c6a      	adds	r2, r5, #1
   b414a:	4603      	mov	r3, r0
   b414c:	4669      	mov	r1, sp
   b414e:	a80c      	add	r0, sp, #48	; 0x30
   b4150:	f007 fa56 	bl	bb600 <_ZNK6String9substringEjj>
   b4154:	a80c      	add	r0, sp, #48	; 0x30
   b4156:	f007 fa7a 	bl	bb64e <_ZNK6String5toIntEv>
   b415a:	4d17      	ldr	r5, [pc, #92]	; (b41b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xdc>)
   b415c:	6028      	str	r0, [r5, #0]
   b415e:	a80c      	add	r0, sp, #48	; 0x30
   b4160:	f007 f8f2 	bl	bb348 <_ZN6StringD1Ev>
   b4164:	a808      	add	r0, sp, #32
   b4166:	f007 f8ef 	bl	bb348 <_ZN6StringD1Ev>
   b416a:	a804      	add	r0, sp, #16
   b416c:	f007 f8ec 	bl	bb348 <_ZN6StringD1Ev>
    ysample = -ysample; // reverse y axis
   b4170:	682b      	ldr	r3, [r5, #0]
    zsample = stuffconv.substring(stuffconv.lastIndexOf(" ") + 1).toInt();
   b4172:	4621      	mov	r1, r4
    ysample = -ysample; // reverse y axis
   b4174:	425b      	negs	r3, r3
    zsample = stuffconv.substring(stuffconv.lastIndexOf(" ") + 1).toInt();
   b4176:	a808      	add	r0, sp, #32
    ysample = -ysample; // reverse y axis
   b4178:	602b      	str	r3, [r5, #0]
    zsample = stuffconv.substring(stuffconv.lastIndexOf(" ") + 1).toInt();
   b417a:	f007 f930 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
   b417e:	a908      	add	r1, sp, #32
   b4180:	4668      	mov	r0, sp
   b4182:	f007 fa37 	bl	bb5f4 <_ZNK6String11lastIndexOfERKS_>
   b4186:	4669      	mov	r1, sp
   b4188:	1c42      	adds	r2, r0, #1
   b418a:	a80c      	add	r0, sp, #48	; 0x30
   b418c:	f007 fa58 	bl	bb640 <_ZNK6String9substringEj>
   b4190:	a80c      	add	r0, sp, #48	; 0x30
   b4192:	f007 fa5c 	bl	bb64e <_ZNK6String5toIntEv>
   b4196:	4b09      	ldr	r3, [pc, #36]	; (b41bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe0>)
   b4198:	6018      	str	r0, [r3, #0]
   b419a:	a80c      	add	r0, sp, #48	; 0x30
   b419c:	f007 f8d4 	bl	bb348 <_ZN6StringD1Ev>
   b41a0:	a808      	add	r0, sp, #32
   b41a2:	f007 f8d1 	bl	bb348 <_ZN6StringD1Ev>
    String stuffconv = stuff;
   b41a6:	4668      	mov	r0, sp
   b41a8:	f007 f8ce 	bl	bb348 <_ZN6StringD1Ev>
    //Serial.println(xsample);
}
   b41ac:	b017      	add	sp, #92	; 0x5c
   b41ae:	bd30      	pop	{r4, r5, pc}
   b41b0:	000bc916 	.word	0x000bc916
   b41b4:	2003e670 	.word	0x2003e670
   b41b8:	2003e674 	.word	0x2003e674
   b41bc:	2003e678 	.word	0x2003e678

000b41c0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b41c0:	4b0a      	ldr	r3, [pc, #40]	; (b41ec <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b41c2:	b510      	push	{r4, lr}
   b41c4:	4604      	mov	r4, r0
   b41c6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b41c8:	f003 ffe2 	bl	b8190 <_ZN5spark10LogManager8instanceEv>
   b41cc:	4621      	mov	r1, r4
   b41ce:	f004 fa2c 	bl	b862a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b41d2:	f003 fcbf 	bl	b7b54 <_Z16_fetch_usbserialv>
   b41d6:	f003 fcb1 	bl	b7b3c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b41da:	4620      	mov	r0, r4
   b41dc:	4b04      	ldr	r3, [pc, #16]	; (b41f0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b41de:	f840 3b04 	str.w	r3, [r0], #4
   b41e2:	f004 f8bd 	bl	b8360 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b41e6:	4620      	mov	r0, r4
   b41e8:	bd10      	pop	{r4, pc}
   b41ea:	bf00      	nop
   b41ec:	000bca44 	.word	0x000bca44
   b41f0:	000bca2c 	.word	0x000bca2c

000b41f4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b41f4:	b510      	push	{r4, lr}
   b41f6:	4604      	mov	r4, r0
    }
   b41f8:	f7ff ffe2 	bl	b41c0 <_ZN5spark16SerialLogHandlerD1Ev>
   b41fc:	4620      	mov	r0, r4
   b41fe:	2124      	movs	r1, #36	; 0x24
   b4200:	f7ff ff4f 	bl	b40a2 <_ZdlPvj>
   b4204:	4620      	mov	r0, r4
   b4206:	bd10      	pop	{r4, pc}

000b4208 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4208:	b40e      	push	{r1, r2, r3}
   b420a:	b503      	push	{r0, r1, lr}
   b420c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b420e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4210:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4214:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4216:	f004 fe48 	bl	b8eaa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b421a:	b002      	add	sp, #8
   b421c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4220:	b003      	add	sp, #12
   b4222:	4770      	bx	lr

000b4224 <_Z8callbackPcPhj>:
{
   b4224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char p[length + 1];
   b4226:	f102 0308 	add.w	r3, r2, #8
   b422a:	f023 0307 	bic.w	r3, r3, #7
{
   b422e:	af00      	add	r7, sp, #0
   b4230:	4615      	mov	r5, r2
  char p[length + 1];
   b4232:	ebad 0d03 	sub.w	sp, sp, r3
  p[length] = NULL;
   b4236:	2400      	movs	r4, #0
  memcpy(p, payload, length);
   b4238:	4668      	mov	r0, sp
   b423a:	f008 f98b 	bl	bc554 <memcpy>
  p[length] = NULL;
   b423e:	f80d 4005 	strb.w	r4, [sp, r5]
  helperDisplay.writeDigitAscii(0, p[0]);
   b4242:	4d35      	ldr	r5, [pc, #212]	; (b4318 <_Z8callbackPcPhj+0xf4>)
   b4244:	f89d 2000 	ldrb.w	r2, [sp]
  midScoreDisplay.writeDigitAscii(0, p[4]);
   b4248:	4e34      	ldr	r6, [pc, #208]	; (b431c <_Z8callbackPcPhj+0xf8>)
  helperDisplay.writeDigitAscii(0, p[0]);
   b424a:	4623      	mov	r3, r4
   b424c:	4621      	mov	r1, r4
   b424e:	4628      	mov	r0, r5
   b4250:	f001 fdf2 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  helperDisplay.writeDigitAscii(1, p[1]);
   b4254:	f89d 2001 	ldrb.w	r2, [sp, #1]
   b4258:	4623      	mov	r3, r4
   b425a:	4628      	mov	r0, r5
   b425c:	2101      	movs	r1, #1
   b425e:	f001 fdeb 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  helperDisplay.writeDigitAscii(2, p[2]);
   b4262:	f89d 2002 	ldrb.w	r2, [sp, #2]
   b4266:	4623      	mov	r3, r4
   b4268:	4628      	mov	r0, r5
   b426a:	2102      	movs	r1, #2
   b426c:	f001 fde4 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  helperDisplay.writeDigitAscii(3, p[3]);
   b4270:	f89d 2003 	ldrb.w	r2, [sp, #3]
   b4274:	4623      	mov	r3, r4
   b4276:	4628      	mov	r0, r5
   b4278:	2103      	movs	r1, #3
   b427a:	f001 fddd 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(0, p[4]);
   b427e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   b4282:	4623      	mov	r3, r4
   b4284:	4621      	mov	r1, r4
   b4286:	4630      	mov	r0, r6
   b4288:	f001 fdd6 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(1, p[5]);
   b428c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   b4290:	4623      	mov	r3, r4
   b4292:	4630      	mov	r0, r6
   b4294:	2101      	movs	r1, #1
   b4296:	f001 fdcf 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(2, p[6]);
   b429a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   b429e:	4623      	mov	r3, r4
   b42a0:	4630      	mov	r0, r6
   b42a2:	2102      	movs	r1, #2
   b42a4:	f001 fdc8 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(3, p[7]);
   b42a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b42ac:	4623      	mov	r3, r4
   b42ae:	4630      	mov	r0, r6
   b42b0:	2103      	movs	r1, #3
   b42b2:	f001 fdc1 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(0, p[8]);
   b42b6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   b42ba:	4819      	ldr	r0, [pc, #100]	; (b4320 <_Z8callbackPcPhj+0xfc>)
   b42bc:	4623      	mov	r3, r4
   b42be:	4621      	mov	r1, r4
   b42c0:	f001 fdba 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(1, p[9]);
   b42c4:	f89d 2009 	ldrb.w	r2, [sp, #9]
   b42c8:	4815      	ldr	r0, [pc, #84]	; (b4320 <_Z8callbackPcPhj+0xfc>)
   b42ca:	4623      	mov	r3, r4
   b42cc:	2101      	movs	r1, #1
   b42ce:	f001 fdb3 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(2, p[10]);
   b42d2:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b42d6:	4812      	ldr	r0, [pc, #72]	; (b4320 <_Z8callbackPcPhj+0xfc>)
   b42d8:	4623      	mov	r3, r4
   b42da:	2102      	movs	r1, #2
   b42dc:	f001 fdac 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(3, p[11]);
   b42e0:	4623      	mov	r3, r4
   b42e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b42e6:	480e      	ldr	r0, [pc, #56]	; (b4320 <_Z8callbackPcPhj+0xfc>)
   b42e8:	2103      	movs	r1, #3
   b42ea:	f001 fda5 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDisplay();
   b42ee:	480c      	ldr	r0, [pc, #48]	; (b4320 <_Z8callbackPcPhj+0xfc>)
   b42f0:	f001 fd7d 	bl	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  midScoreDisplay.writeDisplay();
   b42f4:	4630      	mov	r0, r6
   b42f6:	f001 fd7a 	bl	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  helperDisplay.writeDisplay();
   b42fa:	4628      	mov	r0, r5
   b42fc:	f001 fd77 	bl	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  Serial.printf("%s",p);
   b4300:	f003 fc28 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4304:	4907      	ldr	r1, [pc, #28]	; (b4324 <_Z8callbackPcPhj+0x100>)
   b4306:	466a      	mov	r2, sp
   b4308:	f7ff ff7e 	bl	b4208 <_ZN5Print6printfEPKcz>
  Serial.println();
   b430c:	f003 fc22 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4310:	f004 fd97 	bl	b8e42 <_ZN5Print7printlnEv>
}
   b4314:	46bd      	mov	sp, r7
   b4316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4318:	2003e5c0 	.word	0x2003e5c0
   b431c:	2003e63c 	.word	0x2003e63c
   b4320:	2003e5a8 	.word	0x2003e5a8
   b4324:	000bc99d 	.word	0x000bc99d

000b4328 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4328:	b40e      	push	{r1, r2, r3}
   b432a:	b500      	push	{lr}
   b432c:	b08c      	sub	sp, #48	; 0x30
   b432e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4330:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4334:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4338:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b433a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b433e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4340:	6801      	ldr	r1, [r0, #0]
   b4342:	aa04      	add	r2, sp, #16
   b4344:	201e      	movs	r0, #30
    attr.flags = 0;
   b4346:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b434a:	f002 fc05 	bl	b6b58 <log_message_v>
}
   b434e:	b00c      	add	sp, #48	; 0x30
   b4350:	f85d eb04 	ldr.w	lr, [sp], #4
   b4354:	b003      	add	sp, #12
   b4356:	4770      	bx	lr

000b4358 <_Z11getNthDigitmi>:
  for (int place = 0; place < digit; place++) number = number / 10;
   b4358:	2200      	movs	r2, #0
   b435a:	230a      	movs	r3, #10
   b435c:	428a      	cmp	r2, r1
   b435e:	da03      	bge.n	b4368 <_Z11getNthDigitmi+0x10>
   b4360:	fbb0 f0f3 	udiv	r0, r0, r3
   b4364:	3201      	adds	r2, #1
   b4366:	e7f9      	b.n	b435c <_Z11getNthDigitmi+0x4>
  return number % 10;
   b4368:	fbb0 f2f3 	udiv	r2, r0, r3
}
   b436c:	fb03 0012 	mls	r0, r3, r2, r0
   b4370:	4770      	bx	lr
	...

000b4374 <_Z8writeNumm>:
void writeNum(unsigned long num) {
   b4374:	b570      	push	{r4, r5, r6, lr}
  firstScoreDisplay.writeDigitAscii(3, getNthDigit(num, 0) + '0');
   b4376:	2100      	movs	r1, #0
void writeNum(unsigned long num) {
   b4378:	4604      	mov	r4, r0
  firstScoreDisplay.writeDigitAscii(3, getNthDigit(num, 0) + '0');
   b437a:	f7ff ffed 	bl	b4358 <_Z11getNthDigitmi>
   b437e:	4e2f      	ldr	r6, [pc, #188]	; (b443c <_Z8writeNumm+0xc8>)
  midScoreDisplay.writeDigitAscii(3, getNthDigit(num, 4) + '0');
   b4380:	4d2f      	ldr	r5, [pc, #188]	; (b4440 <_Z8writeNumm+0xcc>)
  firstScoreDisplay.writeDigitAscii(3, getNthDigit(num, 0) + '0');
   b4382:	3030      	adds	r0, #48	; 0x30
   b4384:	460b      	mov	r3, r1
   b4386:	b2c2      	uxtb	r2, r0
   b4388:	2103      	movs	r1, #3
   b438a:	4630      	mov	r0, r6
   b438c:	f001 fd54 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(2, getNthDigit(num, 1) + '0');
   b4390:	2101      	movs	r1, #1
   b4392:	4620      	mov	r0, r4
   b4394:	f7ff ffe0 	bl	b4358 <_Z11getNthDigitmi>
   b4398:	3030      	adds	r0, #48	; 0x30
   b439a:	b2c2      	uxtb	r2, r0
   b439c:	2300      	movs	r3, #0
   b439e:	4630      	mov	r0, r6
   b43a0:	2102      	movs	r1, #2
   b43a2:	f001 fd49 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(1, getNthDigit(num, 2) + '0');
   b43a6:	2102      	movs	r1, #2
   b43a8:	4620      	mov	r0, r4
   b43aa:	f7ff ffd5 	bl	b4358 <_Z11getNthDigitmi>
   b43ae:	3030      	adds	r0, #48	; 0x30
   b43b0:	b2c2      	uxtb	r2, r0
   b43b2:	2300      	movs	r3, #0
   b43b4:	4630      	mov	r0, r6
   b43b6:	2101      	movs	r1, #1
   b43b8:	f001 fd3e 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDigitAscii(0, getNthDigit(num, 3) + '0');
   b43bc:	2103      	movs	r1, #3
   b43be:	4620      	mov	r0, r4
   b43c0:	f7ff ffca 	bl	b4358 <_Z11getNthDigitmi>
   b43c4:	2300      	movs	r3, #0
   b43c6:	3030      	adds	r0, #48	; 0x30
   b43c8:	b2c2      	uxtb	r2, r0
   b43ca:	4619      	mov	r1, r3
   b43cc:	4630      	mov	r0, r6
   b43ce:	f001 fd33 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(3, getNthDigit(num, 4) + '0');
   b43d2:	2104      	movs	r1, #4
   b43d4:	4620      	mov	r0, r4
   b43d6:	f7ff ffbf 	bl	b4358 <_Z11getNthDigitmi>
   b43da:	3030      	adds	r0, #48	; 0x30
   b43dc:	b2c2      	uxtb	r2, r0
   b43de:	2300      	movs	r3, #0
   b43e0:	4628      	mov	r0, r5
   b43e2:	2103      	movs	r1, #3
   b43e4:	f001 fd28 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(2, getNthDigit(num, 5) + '0');
   b43e8:	2105      	movs	r1, #5
   b43ea:	4620      	mov	r0, r4
   b43ec:	f7ff ffb4 	bl	b4358 <_Z11getNthDigitmi>
   b43f0:	3030      	adds	r0, #48	; 0x30
   b43f2:	b2c2      	uxtb	r2, r0
   b43f4:	2300      	movs	r3, #0
   b43f6:	4628      	mov	r0, r5
   b43f8:	2102      	movs	r1, #2
   b43fa:	f001 fd1d 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(1, getNthDigit(num, 6) + '0');
   b43fe:	2106      	movs	r1, #6
   b4400:	4620      	mov	r0, r4
   b4402:	f7ff ffa9 	bl	b4358 <_Z11getNthDigitmi>
   b4406:	3030      	adds	r0, #48	; 0x30
   b4408:	b2c2      	uxtb	r2, r0
   b440a:	2300      	movs	r3, #0
   b440c:	4628      	mov	r0, r5
   b440e:	2101      	movs	r1, #1
   b4410:	f001 fd12 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  midScoreDisplay.writeDigitAscii(0, getNthDigit(num, 7) + '0');
   b4414:	2107      	movs	r1, #7
   b4416:	4620      	mov	r0, r4
   b4418:	f7ff ff9e 	bl	b4358 <_Z11getNthDigitmi>
   b441c:	2300      	movs	r3, #0
   b441e:	3030      	adds	r0, #48	; 0x30
   b4420:	b2c2      	uxtb	r2, r0
   b4422:	4619      	mov	r1, r3
   b4424:	4628      	mov	r0, r5
   b4426:	f001 fd07 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  firstScoreDisplay.writeDisplay();
   b442a:	4630      	mov	r0, r6
   b442c:	f001 fcdf 	bl	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  midScoreDisplay.writeDisplay();
   b4430:	4628      	mov	r0, r5
}
   b4432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  midScoreDisplay.writeDisplay();
   b4436:	f001 bcda 	b.w	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
   b443a:	bf00      	nop
   b443c:	2003e5a8 	.word	0x2003e5a8
   b4440:	2003e63c 	.word	0x2003e63c

000b4444 <_Z9setupLCDsv>:
void setupLCDs() {
   b4444:	b508      	push	{r3, lr}
  Wire.setSpeed(CLOCK_SPEED_400KHZ);
   b4446:	f007 f9af 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b444a:	490a      	ldr	r1, [pc, #40]	; (b4474 <_Z9setupLCDsv+0x30>)
   b444c:	f003 fade 	bl	b7a0c <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   b4450:	f007 f9aa 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b4454:	f003 fade 	bl	b7a14 <_ZN7TwoWire5beginEv>
  firstScoreDisplay.begin(0x71);  // pass in the address
   b4458:	4807      	ldr	r0, [pc, #28]	; (b4478 <_Z9setupLCDsv+0x34>)
   b445a:	2171      	movs	r1, #113	; 0x71
   b445c:	f001 fca8 	bl	b5db0 <_ZN20Adafruit_LEDBackpack5beginEh>
  midScoreDisplay.begin(0x73);
   b4460:	4806      	ldr	r0, [pc, #24]	; (b447c <_Z9setupLCDsv+0x38>)
   b4462:	2173      	movs	r1, #115	; 0x73
   b4464:	f001 fca4 	bl	b5db0 <_ZN20Adafruit_LEDBackpack5beginEh>
}
   b4468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  helperDisplay.begin(0x74);
   b446c:	4804      	ldr	r0, [pc, #16]	; (b4480 <_Z9setupLCDsv+0x3c>)
   b446e:	2174      	movs	r1, #116	; 0x74
   b4470:	f001 bc9e 	b.w	b5db0 <_ZN20Adafruit_LEDBackpack5beginEh>
   b4474:	00061a80 	.word	0x00061a80
   b4478:	2003e5a8 	.word	0x2003e5a8
   b447c:	2003e63c 	.word	0x2003e63c
   b4480:	2003e5c0 	.word	0x2003e5c0

000b4484 <_Z12getMazePixelii>:
  switch(mazenum) {
   b4484:	4b19      	ldr	r3, [pc, #100]	; (b44ec <_Z12getMazePixelii+0x68>)
   b4486:	681b      	ldr	r3, [r3, #0]
   b4488:	2b0a      	cmp	r3, #10
   b448a:	dc0c      	bgt.n	b44a6 <_Z12getMazePixelii+0x22>
   b448c:	1c5a      	adds	r2, r3, #1
   b448e:	db0c      	blt.n	b44aa <_Z12getMazePixelii+0x26>
   b4490:	0100      	lsls	r0, r0, #4
   b4492:	2b0a      	cmp	r3, #10
   b4494:	d80b      	bhi.n	b44ae <_Z12getMazePixelii+0x2a>
   b4496:	e8df f003 	tbb	[pc, r3]
   b449a:	100e      	.short	0x100e
   b449c:	18161412 	.word	0x18161412
   b44a0:	201e1c1a 	.word	0x201e1c1a
   b44a4:	22          	.byte	0x22
   b44a5:	00          	.byte	0x00
   b44a6:	2b45      	cmp	r3, #69	; 0x45
   b44a8:	d01b      	beq.n	b44e2 <_Z12getMazePixelii+0x5e>
   b44aa:	2000      	movs	r0, #0
}
   b44ac:	4770      	bx	lr
      return lindLine[x][y];
   b44ae:	4b10      	ldr	r3, [pc, #64]	; (b44f0 <_Z12getMazePixelii+0x6c>)
      return youWin[x][y];
   b44b0:	4418      	add	r0, r3
      return secretMaze[x][y];
   b44b2:	5c40      	ldrb	r0, [r0, r1]
   b44b4:	4770      	bx	lr
      return mazeOne[x][y];
   b44b6:	4b0f      	ldr	r3, [pc, #60]	; (b44f4 <_Z12getMazePixelii+0x70>)
   b44b8:	e7fa      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return mazeTwo[x][y];
   b44ba:	4b0f      	ldr	r3, [pc, #60]	; (b44f8 <_Z12getMazePixelii+0x74>)
   b44bc:	e7f8      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return thirdMaze[x][y];
   b44be:	4b0f      	ldr	r3, [pc, #60]	; (b44fc <_Z12getMazePixelii+0x78>)
   b44c0:	e7f6      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return fourthMaze[x][y];
   b44c2:	4b0f      	ldr	r3, [pc, #60]	; (b4500 <_Z12getMazePixelii+0x7c>)
   b44c4:	e7f4      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return fifthMaze[x][y];
   b44c6:	4b0f      	ldr	r3, [pc, #60]	; (b4504 <_Z12getMazePixelii+0x80>)
   b44c8:	e7f2      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return sixthMaze[x][y];
   b44ca:	4b0f      	ldr	r3, [pc, #60]	; (b4508 <_Z12getMazePixelii+0x84>)
   b44cc:	e7f0      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return seventhMaze[x][y];
   b44ce:	4b0f      	ldr	r3, [pc, #60]	; (b450c <_Z12getMazePixelii+0x88>)
   b44d0:	e7ee      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return eighthMaze[x][y];
   b44d2:	4b0f      	ldr	r3, [pc, #60]	; (b4510 <_Z12getMazePixelii+0x8c>)
   b44d4:	e7ec      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return ninthMaze[x][y];
   b44d6:	4b0f      	ldr	r3, [pc, #60]	; (b4514 <_Z12getMazePixelii+0x90>)
   b44d8:	e7ea      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return finalMaze[x][y];
   b44da:	4b0f      	ldr	r3, [pc, #60]	; (b4518 <_Z12getMazePixelii+0x94>)
   b44dc:	e7e8      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return youWin[x][y];
   b44de:	4b0f      	ldr	r3, [pc, #60]	; (b451c <_Z12getMazePixelii+0x98>)
   b44e0:	e7e6      	b.n	b44b0 <_Z12getMazePixelii+0x2c>
      return secretMaze[x][y];
   b44e2:	4b0f      	ldr	r3, [pc, #60]	; (b4520 <_Z12getMazePixelii+0x9c>)
   b44e4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b44e8:	e7e3      	b.n	b44b2 <_Z12getMazePixelii+0x2e>
   b44ea:	bf00      	nop
   b44ec:	2003e434 	.word	0x2003e434
   b44f0:	000bd154 	.word	0x000bd154
   b44f4:	000bcf54 	.word	0x000bcf54
   b44f8:	000bd054 	.word	0x000bd054
   b44fc:	000bd654 	.word	0x000bd654
   b4500:	000bcb54 	.word	0x000bcb54
   b4504:	000bd254 	.word	0x000bd254
   b4508:	000bd554 	.word	0x000bd554
   b450c:	000bcd54 	.word	0x000bcd54
   b4510:	000bca54 	.word	0x000bca54
   b4514:	000bd454 	.word	0x000bd454
   b4518:	000bd354 	.word	0x000bd354
   b451c:	000bce54 	.word	0x000bce54
   b4520:	000bcc54 	.word	0x000bcc54

000b4524 <_Z22populateReachedTargetsv>:
void populateReachedTargets() {
   b4524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (mazenum != 9) {
   b4528:	4b1b      	ldr	r3, [pc, #108]	; (b4598 <_Z22populateReachedTargetsv+0x74>)
   b452a:	681b      	ldr	r3, [r3, #0]
   b452c:	2b09      	cmp	r3, #9
   b452e:	d030      	beq.n	b4592 <_Z22populateReachedTargetsv+0x6e>
    int targetCount = 0;
   b4530:	2600      	movs	r6, #0
          reachedTargets[targetCount][0] = i;
   b4532:	4f1a      	ldr	r7, [pc, #104]	; (b459c <_Z22populateReachedTargetsv+0x78>)
          Serial.print(", ");
   b4534:	f8df 8068 	ldr.w	r8, [pc, #104]	; b45a0 <_Z22populateReachedTargetsv+0x7c>
    for (int i = 0; i < 16; i++) {
   b4538:	4634      	mov	r4, r6
      for (int j = 0; j < 16; j++) {
   b453a:	2500      	movs	r5, #0
          reachedTargets[targetCount][0] = i;
   b453c:	f04f 090c 	mov.w	r9, #12
        if (getMazePixel(i, j) == t) {
   b4540:	4629      	mov	r1, r5
   b4542:	4620      	mov	r0, r4
   b4544:	f7ff ff9e 	bl	b4484 <_Z12getMazePixelii>
   b4548:	2803      	cmp	r0, #3
   b454a:	d11c      	bne.n	b4586 <_Z22populateReachedTargetsv+0x62>
          reachedTargets[targetCount][0] = i;
   b454c:	fb09 f206 	mul.w	r2, r9, r6
   b4550:	18bb      	adds	r3, r7, r2
   b4552:	50bc      	str	r4, [r7, r2]
          reachedTargets[targetCount][2] = 0;
   b4554:	2200      	movs	r2, #0
   b4556:	609a      	str	r2, [r3, #8]
          reachedTargets[targetCount][1] = j;
   b4558:	605d      	str	r5, [r3, #4]
          Serial.print(i);
   b455a:	f003 fafb 	bl	b7b54 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b455e:	220a      	movs	r2, #10
   b4560:	4621      	mov	r1, r4
   b4562:	f004 fc84 	bl	b8e6e <_ZN5Print11printNumberEmh>
          Serial.print(", ");
   b4566:	f003 faf5 	bl	b7b54 <_Z16_fetch_usbserialv>
   b456a:	4641      	mov	r1, r8
   b456c:	f004 fc62 	bl	b8e34 <_ZN5Print5printEPKc>
          Serial.print(j);
   b4570:	f003 faf0 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4574:	220a      	movs	r2, #10
   b4576:	4629      	mov	r1, r5
   b4578:	f004 fc79 	bl	b8e6e <_ZN5Print11printNumberEmh>
          Serial.println();
   b457c:	f003 faea 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4580:	f004 fc5f 	bl	b8e42 <_ZN5Print7printlnEv>
          targetCount++;
   b4584:	3601      	adds	r6, #1
      for (int j = 0; j < 16; j++) {
   b4586:	3501      	adds	r5, #1
   b4588:	2d10      	cmp	r5, #16
   b458a:	d1d9      	bne.n	b4540 <_Z22populateReachedTargetsv+0x1c>
    for (int i = 0; i < 16; i++) {
   b458c:	3401      	adds	r4, #1
   b458e:	2c10      	cmp	r4, #16
   b4590:	d1d3      	bne.n	b453a <_Z22populateReachedTargetsv+0x16>
}
   b4592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4596:	bf00      	nop
   b4598:	2003e434 	.word	0x2003e434
   b459c:	2003e43c 	.word	0x2003e43c
   b45a0:	000bc915 	.word	0x000bc915

000b45a4 <_Z21checkIfTargetsReachedv>:
  for (int i = 0; i < 5; i++) {
   b45a4:	4a08      	ldr	r2, [pc, #32]	; (b45c8 <_Z21checkIfTargetsReachedv+0x24>)
bool checkIfTargetsReached() {
   b45a6:	2305      	movs	r3, #5
  bool targetsReached = true;
   b45a8:	2001      	movs	r0, #1
    if (reachedTargets[i][2] != 1) {
   b45aa:	6891      	ldr	r1, [r2, #8]
      targetsReached = false;
   b45ac:	2901      	cmp	r1, #1
   b45ae:	bf18      	it	ne
   b45b0:	2000      	movne	r0, #0
  for (int i = 0; i < 5; i++) {
   b45b2:	3b01      	subs	r3, #1
   b45b4:	f102 020c 	add.w	r2, r2, #12
   b45b8:	d1f7      	bne.n	b45aa <_Z21checkIfTargetsReachedv+0x6>
  if (mazenum == 9) {
   b45ba:	4b04      	ldr	r3, [pc, #16]	; (b45cc <_Z21checkIfTargetsReachedv+0x28>)
   b45bc:	681b      	ldr	r3, [r3, #0]
    targetsReached = true;
   b45be:	2b09      	cmp	r3, #9
}
   b45c0:	bf08      	it	eq
   b45c2:	2001      	moveq	r0, #1
   b45c4:	4770      	bx	lr
   b45c6:	bf00      	nop
   b45c8:	2003e43c 	.word	0x2003e43c
   b45cc:	2003e434 	.word	0x2003e434

000b45d0 <_Z8HSBtoRGBfff>:
long HSBtoRGB(float _hue, float _sat, float _brightness) {
   b45d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_sat == 0.0) {
   b45d4:	eef5 0a40 	vcmp.f32	s1, #0.0
   b45d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
long HSBtoRGB(float _hue, float _sat, float _brightness) {
   b45dc:	ed2d 8b02 	vpush	{d8}
   b45e0:	ee11 5a10 	vmov	r5, s2
   b45e4:	eeb0 8a60 	vmov.f32	s16, s1
    if (_sat == 0.0) {
   b45e8:	f000 80af 	beq.w	b474a <_Z8HSBtoRGBfff+0x17a>
            _hue = 0;
   b45ec:	eddf 7a5c 	vldr	s15, [pc, #368]	; b4760 <_Z8HSBtoRGBfff+0x190>
   b45f0:	eeb4 0a67 	vcmp.f32	s0, s15
        int slice = _hue / 60.0;
   b45f4:	eddf 7a5b 	vldr	s15, [pc, #364]	; b4764 <_Z8HSBtoRGBfff+0x194>
            _hue = 0;
   b45f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        int slice = _hue / 60.0;
   b45fc:	bf0c      	ite	eq
   b45fe:	ee17 0a90 	vmoveq	r0, s15
   b4602:	ee10 0a10 	vmovne	r0, s0
   b4606:	f007 fc19 	bl	bbe3c <__aeabi_f2d>
   b460a:	4b57      	ldr	r3, [pc, #348]	; (b4768 <_Z8HSBtoRGBfff+0x198>)
   b460c:	2200      	movs	r2, #0
   b460e:	f007 fd97 	bl	bc140 <__aeabi_ddiv>
   b4612:	460f      	mov	r7, r1
   b4614:	4606      	mov	r6, r0
   b4616:	f007 ff03 	bl	bc420 <__aeabi_d2iz>
   b461a:	4682      	mov	sl, r0
        float hue_frac = (_hue / 60.0) - slice;
   b461c:	f007 fbfc 	bl	bbe18 <__aeabi_i2d>
   b4620:	4602      	mov	r2, r0
   b4622:	460b      	mov	r3, r1
   b4624:	4630      	mov	r0, r6
   b4626:	4639      	mov	r1, r7
   b4628:	f007 faa8 	bl	bbb7c <__aeabi_dsub>
   b462c:	f007 ff20 	bl	bc470 <__aeabi_d2f>
   b4630:	ee08 0a90 	vmov	s17, r0
        float aa = _brightness * (1.0 - _sat);
   b4634:	4628      	mov	r0, r5
   b4636:	f007 fc01 	bl	bbe3c <__aeabi_f2d>
   b463a:	4606      	mov	r6, r0
   b463c:	ee18 0a10 	vmov	r0, s16
   b4640:	460f      	mov	r7, r1
   b4642:	f007 fbfb 	bl	bbe3c <__aeabi_f2d>
   b4646:	4602      	mov	r2, r0
   b4648:	460b      	mov	r3, r1
   b464a:	4680      	mov	r8, r0
   b464c:	4689      	mov	r9, r1
   b464e:	2000      	movs	r0, #0
   b4650:	4946      	ldr	r1, [pc, #280]	; (b476c <_Z8HSBtoRGBfff+0x19c>)
   b4652:	f007 fa93 	bl	bbb7c <__aeabi_dsub>
   b4656:	4632      	mov	r2, r6
   b4658:	463b      	mov	r3, r7
   b465a:	f007 fc47 	bl	bbeec <__aeabi_dmul>
   b465e:	f007 ff07 	bl	bc470 <__aeabi_d2f>
        float bb = _brightness * (1.0 - _sat * hue_frac);
   b4662:	ee68 7a28 	vmul.f32	s15, s16, s17
        float aa = _brightness * (1.0 - _sat);
   b4666:	4604      	mov	r4, r0
        float bb = _brightness * (1.0 - _sat * hue_frac);
   b4668:	ee17 0a90 	vmov	r0, s15
   b466c:	f007 fbe6 	bl	bbe3c <__aeabi_f2d>
   b4670:	4602      	mov	r2, r0
   b4672:	460b      	mov	r3, r1
   b4674:	2000      	movs	r0, #0
   b4676:	493d      	ldr	r1, [pc, #244]	; (b476c <_Z8HSBtoRGBfff+0x19c>)
   b4678:	f007 fa80 	bl	bbb7c <__aeabi_dsub>
   b467c:	4632      	mov	r2, r6
   b467e:	463b      	mov	r3, r7
   b4680:	f007 fc34 	bl	bbeec <__aeabi_dmul>
   b4684:	f007 fef4 	bl	bc470 <__aeabi_d2f>
   b4688:	4683      	mov	fp, r0
        float cc = _brightness * (1.0 - _sat * (1.0 - hue_frac));
   b468a:	ee18 0a90 	vmov	r0, s17
   b468e:	f007 fbd5 	bl	bbe3c <__aeabi_f2d>
   b4692:	4602      	mov	r2, r0
   b4694:	460b      	mov	r3, r1
   b4696:	2000      	movs	r0, #0
   b4698:	4934      	ldr	r1, [pc, #208]	; (b476c <_Z8HSBtoRGBfff+0x19c>)
   b469a:	f007 fa6f 	bl	bbb7c <__aeabi_dsub>
   b469e:	4642      	mov	r2, r8
   b46a0:	464b      	mov	r3, r9
   b46a2:	f007 fc23 	bl	bbeec <__aeabi_dmul>
   b46a6:	4602      	mov	r2, r0
   b46a8:	460b      	mov	r3, r1
   b46aa:	2000      	movs	r0, #0
   b46ac:	492f      	ldr	r1, [pc, #188]	; (b476c <_Z8HSBtoRGBfff+0x19c>)
   b46ae:	f007 fa65 	bl	bbb7c <__aeabi_dsub>
   b46b2:	4632      	mov	r2, r6
   b46b4:	463b      	mov	r3, r7
   b46b6:	f007 fc19 	bl	bbeec <__aeabi_dmul>
   b46ba:	f007 fed9 	bl	bc470 <__aeabi_d2f>
   b46be:	4606      	mov	r6, r0
        switch(slice) {
   b46c0:	f1ba 0f05 	cmp.w	sl, #5
   b46c4:	d83d      	bhi.n	b4742 <_Z8HSBtoRGBfff+0x172>
   b46c6:	e8df f00a 	tbb	[pc, sl]
   b46ca:	0305      	.short	0x0305
   b46cc:	3935302b 	.word	0x3935302b
        float cc = _brightness * (1.0 - _sat * (1.0 - hue_frac));
   b46d0:	462e      	mov	r6, r5
   b46d2:	465d      	mov	r5, fp
    long ired = red * 255.0;
   b46d4:	4628      	mov	r0, r5
   b46d6:	f007 fbb1 	bl	bbe3c <__aeabi_f2d>
   b46da:	a31f      	add	r3, pc, #124	; (adr r3, b4758 <_Z8HSBtoRGBfff+0x188>)
   b46dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b46e0:	f007 fc04 	bl	bbeec <__aeabi_dmul>
   b46e4:	f007 fe9c 	bl	bc420 <__aeabi_d2iz>
    return long((ired << 16) | (igreen << 8) | (iblue));
   b46e8:	0407      	lsls	r7, r0, #16
    long igreen = green * 255.0;
   b46ea:	4630      	mov	r0, r6
   b46ec:	f007 fba6 	bl	bbe3c <__aeabi_f2d>
   b46f0:	a319      	add	r3, pc, #100	; (adr r3, b4758 <_Z8HSBtoRGBfff+0x188>)
   b46f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b46f6:	f007 fbf9 	bl	bbeec <__aeabi_dmul>
   b46fa:	f007 fe91 	bl	bc420 <__aeabi_d2iz>
    return long((ired << 16) | (igreen << 8) | (iblue));
   b46fe:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
    long iblue = blue * 255.0;
   b4702:	4620      	mov	r0, r4
   b4704:	f007 fb9a 	bl	bbe3c <__aeabi_f2d>
   b4708:	a313      	add	r3, pc, #76	; (adr r3, b4758 <_Z8HSBtoRGBfff+0x188>)
   b470a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b470e:	f007 fbed 	bl	bbeec <__aeabi_dmul>
   b4712:	f007 fe85 	bl	bc420 <__aeabi_d2iz>
}
   b4716:	ecbd 8b02 	vpop	{d8}
   b471a:	4338      	orrs	r0, r7
   b471c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
   b4720:	462b      	mov	r3, r5
                green = _brightness;
   b4722:	461e      	mov	r6, r3
                red = aa;
   b4724:	4625      	mov	r5, r4
                blue = cc;
   b4726:	4604      	mov	r4, r0
                break;
   b4728:	e7d4      	b.n	b46d4 <_Z8HSBtoRGBfff+0x104>
                break;
   b472a:	462b      	mov	r3, r5
                green = bb;
   b472c:	465e      	mov	r6, fp
                red = aa;
   b472e:	4625      	mov	r5, r4
                blue = _brightness;
   b4730:	461c      	mov	r4, r3
                break;
   b4732:	e7cf      	b.n	b46d4 <_Z8HSBtoRGBfff+0x104>
   b4734:	462b      	mov	r3, r5
                green = aa;
   b4736:	4626      	mov	r6, r4
                red = cc;
   b4738:	4605      	mov	r5, r0
   b473a:	e7f9      	b.n	b4730 <_Z8HSBtoRGBfff+0x160>
                green = aa;
   b473c:	4626      	mov	r6, r4
                blue = bb;
   b473e:	465c      	mov	r4, fp
                break;
   b4740:	e7c8      	b.n	b46d4 <_Z8HSBtoRGBfff+0x104>
                blue = 0.0;
   b4742:	2400      	movs	r4, #0
                green = 0.0;
   b4744:	4626      	mov	r6, r4
                red = 0.0;
   b4746:	4625      	mov	r5, r4
                break;
   b4748:	e7c4      	b.n	b46d4 <_Z8HSBtoRGBfff+0x104>
        blue = _brightness;
   b474a:	ee11 4a10 	vmov	r4, s2
        green = _brightness;
   b474e:	ee11 6a10 	vmov	r6, s2
   b4752:	e7bf      	b.n	b46d4 <_Z8HSBtoRGBfff+0x104>
   b4754:	f3af 8000 	nop.w
   b4758:	00000000 	.word	0x00000000
   b475c:	406fe000 	.word	0x406fe000
   b4760:	43b40000 	.word	0x43b40000
   b4764:	00000000 	.word	0x00000000
   b4768:	404e0000 	.word	0x404e0000
   b476c:	3ff00000 	.word	0x3ff00000

000b4770 <_Z10tickRGBEndv>:
void tickRGBEnd() {
   b4770:	b538      	push	{r3, r4, r5, lr}
  if (checkIfTargetsReached()) {
   b4772:	f7ff ff17 	bl	b45a4 <_Z21checkIfTargetsReachedv>
   b4776:	2800      	cmp	r0, #0
   b4778:	d03b      	beq.n	b47f2 <_Z10tickRGBEndv+0x82>
      float colorNumber = counter > numColors ? counter - numColors: counter;
   b477a:	4c21      	ldr	r4, [pc, #132]	; (b4800 <_Z10tickRGBEndv+0x90>)
   b477c:	4d21      	ldr	r5, [pc, #132]	; (b4804 <_Z10tickRGBEndv+0x94>)
   b477e:	6823      	ldr	r3, [r4, #0]
   b4780:	682a      	ldr	r2, [r5, #0]
   b4782:	4293      	cmp	r3, r2
   b4784:	bfc8      	it	gt
   b4786:	1a9b      	subgt	r3, r3, r2
   b4788:	ee07 3a90 	vmov	s15, r3
    float hue = (colorNumber / float(numColors)) * 360; // Number between 0 and 360
   b478c:	ee07 2a10 	vmov	s14, r2
      float colorNumber = counter > numColors ? counter - numColors: counter;
   b4790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float hue = (colorNumber / float(numColors)) * 360; // Number between 0 and 360
   b4794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    long color = HSBtoRGB(hue, saturation, brightness); 
   b4798:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float hue = (colorNumber / float(numColors)) * 360; // Number between 0 and 360
   b479c:	ee87 0a87 	vdiv.f32	s0, s15, s14
    long color = HSBtoRGB(hue, saturation, brightness); 
   b47a0:	eddf 7a19 	vldr	s15, [pc, #100]	; b4808 <_Z10tickRGBEndv+0x98>
   b47a4:	eef0 0a41 	vmov.f32	s1, s2
   b47a8:	ee20 0a27 	vmul.f32	s0, s0, s15
   b47ac:	f7ff ff10 	bl	b45d0 <_Z8HSBtoRGBfff>
    red = color >> 16 & 255;
   b47b0:	4b16      	ldr	r3, [pc, #88]	; (b480c <_Z10tickRGBEndv+0x9c>)
    long color = HSBtoRGB(hue, saturation, brightness); 
   b47b2:	4602      	mov	r2, r0
    red = color >> 16 & 255;
   b47b4:	f3c0 4007 	ubfx	r0, r0, #16, #8
   b47b8:	6018      	str	r0, [r3, #0]
    green = color >> 8 & 255;
   b47ba:	4b15      	ldr	r3, [pc, #84]	; (b4810 <_Z10tickRGBEndv+0xa0>)
   b47bc:	f3c2 2107 	ubfx	r1, r2, #8, #8
   b47c0:	6019      	str	r1, [r3, #0]
    blue = color & 255;
   b47c2:	4b14      	ldr	r3, [pc, #80]	; (b4814 <_Z10tickRGBEndv+0xa4>)
   b47c4:	b2d2      	uxtb	r2, r2
   b47c6:	601a      	str	r2, [r3, #0]
    if (mazenum != 9) {
   b47c8:	4b13      	ldr	r3, [pc, #76]	; (b4818 <_Z10tickRGBEndv+0xa8>)
   b47ca:	681b      	ldr	r3, [r3, #0]
   b47cc:	2b09      	cmp	r3, #9
   b47ce:	d011      	beq.n	b47f4 <_Z10tickRGBEndv+0x84>
      matrix.drawPixel(1, 1, matrix.Color(red, green, blue));
   b47d0:	f000 fe78 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b47d4:	2201      	movs	r2, #1
   b47d6:	4603      	mov	r3, r0
      matrix.drawPixel(1, 14, matrix.Color(red, green, blue));
   b47d8:	2101      	movs	r1, #1
   b47da:	4810      	ldr	r0, [pc, #64]	; (b481c <_Z10tickRGBEndv+0xac>)
   b47dc:	f000 fd6c 	bl	b52b8 <_ZN18Adafruit_NeoMatrix9drawPixelEsst>
    counter = (counter + 1) % (numColors * 2);
   b47e0:	6823      	ldr	r3, [r4, #0]
   b47e2:	682a      	ldr	r2, [r5, #0]
   b47e4:	3301      	adds	r3, #1
   b47e6:	0052      	lsls	r2, r2, #1
   b47e8:	fb93 f1f2 	sdiv	r1, r3, r2
   b47ec:	fb02 3311 	mls	r3, r2, r1, r3
   b47f0:	6023      	str	r3, [r4, #0]
}
   b47f2:	bd38      	pop	{r3, r4, r5, pc}
      matrix.drawPixel(1, 14, matrix.Color(red, green, blue));
   b47f4:	f000 fe66 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b47f8:	220e      	movs	r2, #14
   b47fa:	4603      	mov	r3, r0
   b47fc:	e7ec      	b.n	b47d8 <_Z10tickRGBEndv+0x68>
   b47fe:	bf00      	nop
   b4800:	2003e5a4 	.word	0x2003e5a4
   b4804:	2003e438 	.word	0x2003e438
   b4808:	43b40000 	.word	0x43b40000
   b480c:	2003e668 	.word	0x2003e668
   b4810:	2003e5bc 	.word	0x2003e5bc
   b4814:	2003e540 	.word	0x2003e540
   b4818:	2003e434 	.word	0x2003e434
   b481c:	2003e5f8 	.word	0x2003e5f8

000b4820 <_Z13doBallPhysicsv>:
void doBallPhysics() {  
   b4820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ballx += ballxspeed;
   b4824:	4b51      	ldr	r3, [pc, #324]	; (b496c <_Z13doBallPhysicsv+0x14c>)
   b4826:	f8df a158 	ldr.w	sl, [pc, #344]	; b4980 <_Z13doBallPhysicsv+0x160>
  if (getMazePixel((int)ballx, (int) bally) == w || getMazePixel((int)ballx, (int) bally) == d || (getMazePixel((int)ballx, (int) bally) == t && mazenum == 69)) {
   b482a:	f8df b158 	ldr.w	fp, [pc, #344]	; b4984 <_Z13doBallPhysicsv+0x164>
  ballx += ballxspeed;
   b482e:	e9d3 8900 	ldrd	r8, r9, [r3]
   b4832:	e9da 2300 	ldrd	r2, r3, [sl]
   b4836:	4640      	mov	r0, r8
   b4838:	4649      	mov	r1, r9
   b483a:	f007 f9a1 	bl	bbb80 <__adddf3>
  if (getMazePixel((int)ballx, (int) bally) == w || getMazePixel((int)ballx, (int) bally) == d || (getMazePixel((int)ballx, (int) bally) == t && mazenum == 69)) {
   b483e:	e9db 6700 	ldrd	r6, r7, [fp]
  ballx += ballxspeed;
   b4842:	4604      	mov	r4, r0
   b4844:	460d      	mov	r5, r1
  if (getMazePixel((int)ballx, (int) bally) == w || getMazePixel((int)ballx, (int) bally) == d || (getMazePixel((int)ballx, (int) bally) == t && mazenum == 69)) {
   b4846:	4630      	mov	r0, r6
   b4848:	4639      	mov	r1, r7
  ballx += ballxspeed;
   b484a:	e9ca 4500 	strd	r4, r5, [sl]
  if (getMazePixel((int)ballx, (int) bally) == w || getMazePixel((int)ballx, (int) bally) == d || (getMazePixel((int)ballx, (int) bally) == t && mazenum == 69)) {
   b484e:	f007 fde7 	bl	bc420 <__aeabi_d2iz>
   b4852:	4629      	mov	r1, r5
   b4854:	9001      	str	r0, [sp, #4]
   b4856:	4620      	mov	r0, r4
   b4858:	f007 fde2 	bl	bc420 <__aeabi_d2iz>
   b485c:	9b01      	ldr	r3, [sp, #4]
   b485e:	4619      	mov	r1, r3
   b4860:	f7ff fe10 	bl	b4484 <_Z12getMazePixelii>
   b4864:	2801      	cmp	r0, #1
   b4866:	d905      	bls.n	b4874 <_Z13doBallPhysicsv+0x54>
   b4868:	2803      	cmp	r0, #3
   b486a:	d10b      	bne.n	b4884 <_Z13doBallPhysicsv+0x64>
   b486c:	4b40      	ldr	r3, [pc, #256]	; (b4970 <_Z13doBallPhysicsv+0x150>)
   b486e:	681b      	ldr	r3, [r3, #0]
   b4870:	2b45      	cmp	r3, #69	; 0x45
   b4872:	d107      	bne.n	b4884 <_Z13doBallPhysicsv+0x64>
    ballx -= ballxspeed;
   b4874:	4642      	mov	r2, r8
   b4876:	464b      	mov	r3, r9
   b4878:	4620      	mov	r0, r4
   b487a:	4629      	mov	r1, r5
   b487c:	f007 f97e 	bl	bbb7c <__aeabi_dsub>
   b4880:	e9ca 0100 	strd	r0, r1, [sl]
  bally += ballyspeed;
   b4884:	4b3b      	ldr	r3, [pc, #236]	; (b4974 <_Z13doBallPhysicsv+0x154>)
   b4886:	e9d3 4500 	ldrd	r4, r5, [r3]
   b488a:	4630      	mov	r0, r6
   b488c:	4622      	mov	r2, r4
   b488e:	462b      	mov	r3, r5
   b4890:	4639      	mov	r1, r7
   b4892:	f007 f975 	bl	bbb80 <__adddf3>
   b4896:	4689      	mov	r9, r1
   b4898:	4680      	mov	r8, r0
  if (getMazePixel((int)ballx, (int) bally) == w || getMazePixel((int)ballx, (int) bally) == d || (getMazePixel((int)ballx, (int) bally) == t && mazenum == 69)) {
   b489a:	e9da 6700 	ldrd	r6, r7, [sl]
  bally += ballyspeed;
   b489e:	e9cb 8900 	strd	r8, r9, [fp]
  if (getMazePixel((int)ballx, (int) bally) == w || getMazePixel((int)ballx, (int) bally) == d || (getMazePixel((int)ballx, (int) bally) == t && mazenum == 69)) {
   b48a2:	f007 fdbd 	bl	bc420 <__aeabi_d2iz>
   b48a6:	4639      	mov	r1, r7
   b48a8:	9001      	str	r0, [sp, #4]
   b48aa:	4630      	mov	r0, r6
   b48ac:	f007 fdb8 	bl	bc420 <__aeabi_d2iz>
   b48b0:	9b01      	ldr	r3, [sp, #4]
   b48b2:	4619      	mov	r1, r3
   b48b4:	f7ff fde6 	bl	b4484 <_Z12getMazePixelii>
   b48b8:	2801      	cmp	r0, #1
   b48ba:	d905      	bls.n	b48c8 <_Z13doBallPhysicsv+0xa8>
   b48bc:	2803      	cmp	r0, #3
   b48be:	d10b      	bne.n	b48d8 <_Z13doBallPhysicsv+0xb8>
   b48c0:	4b2b      	ldr	r3, [pc, #172]	; (b4970 <_Z13doBallPhysicsv+0x150>)
   b48c2:	681b      	ldr	r3, [r3, #0]
   b48c4:	2b45      	cmp	r3, #69	; 0x45
   b48c6:	d107      	bne.n	b48d8 <_Z13doBallPhysicsv+0xb8>
    bally -= ballyspeed;
   b48c8:	4622      	mov	r2, r4
   b48ca:	462b      	mov	r3, r5
   b48cc:	4640      	mov	r0, r8
   b48ce:	4649      	mov	r1, r9
   b48d0:	f007 f954 	bl	bbb7c <__aeabi_dsub>
   b48d4:	e9cb 0100 	strd	r0, r1, [fp]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b48d8:	2200      	movs	r2, #0
   b48da:	2300      	movs	r3, #0
   b48dc:	4630      	mov	r0, r6
   b48de:	4639      	mov	r1, r7
   b48e0:	f007 fd76 	bl	bc3d0 <__aeabi_dcmplt>
   b48e4:	2800      	cmp	r0, #0
   b48e6:	d134      	bne.n	b4952 <_Z13doBallPhysicsv+0x132>
   b48e8:	4b23      	ldr	r3, [pc, #140]	; (b4978 <_Z13doBallPhysicsv+0x158>)
   b48ea:	2200      	movs	r2, #0
   b48ec:	4630      	mov	r0, r6
   b48ee:	4639      	mov	r1, r7
   b48f0:	f007 fd8c 	bl	bc40c <__aeabi_dcmpgt>
   b48f4:	bb80      	cbnz	r0, b4958 <_Z13doBallPhysicsv+0x138>
  bally = constrain(bally, 0.0, 15.0);
   b48f6:	e9db 4500 	ldrd	r4, r5, [fp]
   b48fa:	2200      	movs	r2, #0
   b48fc:	2300      	movs	r3, #0
   b48fe:	4620      	mov	r0, r4
   b4900:	4629      	mov	r1, r5
  ballx = constrain(ballx, 0.0, 15.0);
   b4902:	e9ca 6700 	strd	r6, r7, [sl]
   b4906:	f007 fd63 	bl	bc3d0 <__aeabi_dcmplt>
   b490a:	bb40      	cbnz	r0, b495e <_Z13doBallPhysicsv+0x13e>
   b490c:	4b1a      	ldr	r3, [pc, #104]	; (b4978 <_Z13doBallPhysicsv+0x158>)
   b490e:	2200      	movs	r2, #0
   b4910:	4620      	mov	r0, r4
   b4912:	4629      	mov	r1, r5
   b4914:	f007 fd7a 	bl	bc40c <__aeabi_dcmpgt>
   b4918:	bb20      	cbnz	r0, b4964 <_Z13doBallPhysicsv+0x144>
  int tempx = (int) ballx;
   b491a:	4630      	mov	r0, r6
   b491c:	4639      	mov	r1, r7
  bally = constrain(bally, 0.0, 15.0);
   b491e:	e9cb 4500 	strd	r4, r5, [fp]
  int tempx = (int) ballx;
   b4922:	f007 fd7d 	bl	bc420 <__aeabi_d2iz>
  int tempy = (int) bally;
   b4926:	4629      	mov	r1, r5
  int tempx = (int) ballx;
   b4928:	4606      	mov	r6, r0
  int tempy = (int) bally;
   b492a:	4620      	mov	r0, r4
   b492c:	f007 fd78 	bl	bc420 <__aeabi_d2iz>
  for (int i = 0; i < 5; i++) {
   b4930:	4b12      	ldr	r3, [pc, #72]	; (b497c <_Z13doBallPhysicsv+0x15c>)
  int tempy = (int) bally;
   b4932:	2205      	movs	r2, #5
      reachedTargets[i][2] = 1;
   b4934:	2101      	movs	r1, #1
    if (reachedTargets[i][0] == tempx && reachedTargets[i][1] == tempy) {
   b4936:	681c      	ldr	r4, [r3, #0]
   b4938:	42b4      	cmp	r4, r6
   b493a:	d103      	bne.n	b4944 <_Z13doBallPhysicsv+0x124>
   b493c:	685c      	ldr	r4, [r3, #4]
   b493e:	4284      	cmp	r4, r0
      reachedTargets[i][2] = 1;
   b4940:	bf08      	it	eq
   b4942:	6099      	streq	r1, [r3, #8]
  for (int i = 0; i < 5; i++) {
   b4944:	3a01      	subs	r2, #1
   b4946:	f103 030c 	add.w	r3, r3, #12
   b494a:	d1f4      	bne.n	b4936 <_Z13doBallPhysicsv+0x116>
}
   b494c:	b003      	add	sp, #12
   b494e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4952:	2600      	movs	r6, #0
   b4954:	2700      	movs	r7, #0
   b4956:	e7ce      	b.n	b48f6 <_Z13doBallPhysicsv+0xd6>
   b4958:	4f07      	ldr	r7, [pc, #28]	; (b4978 <_Z13doBallPhysicsv+0x158>)
   b495a:	2600      	movs	r6, #0
   b495c:	e7cb      	b.n	b48f6 <_Z13doBallPhysicsv+0xd6>
   b495e:	2400      	movs	r4, #0
   b4960:	2500      	movs	r5, #0
   b4962:	e7da      	b.n	b491a <_Z13doBallPhysicsv+0xfa>
   b4964:	4d04      	ldr	r5, [pc, #16]	; (b4978 <_Z13doBallPhysicsv+0x158>)
   b4966:	2400      	movs	r4, #0
   b4968:	e7d7      	b.n	b491a <_Z13doBallPhysicsv+0xfa>
   b496a:	bf00      	nop
   b496c:	2003e530 	.word	0x2003e530
   b4970:	2003e434 	.word	0x2003e434
   b4974:	2003e538 	.word	0x2003e538
   b4978:	402e0000 	.word	0x402e0000
   b497c:	2003e43c 	.word	0x2003e43c
   b4980:	2003e420 	.word	0x2003e420
   b4984:	2003e428 	.word	0x2003e428

000b4988 <_Z8drawMazeii>:

void drawMaze(signed int offsetx, signed int offsety) {
   b4988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b498c:	fa1f f880 	uxth.w	r8, r0
        case e:
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(0, mazebright, 0));
          break;

        case q:
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(red, green, blue));
   b4990:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b4a7c <_Z8drawMazeii+0xf4>
   b4994:	f8df a0e8 	ldr.w	sl, [pc, #232]	; b4a80 <_Z8drawMazeii+0xf8>
void drawMaze(signed int offsetx, signed int offsety) {
   b4998:	460e      	mov	r6, r1
   b499a:	4644      	mov	r4, r8
  for (int x = 0; x < 16; x++) {
   b499c:	2700      	movs	r7, #0
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(red, green, blue));
   b499e:	f8df b0e4 	ldr.w	fp, [pc, #228]	; b4a84 <_Z8drawMazeii+0xfc>
    for (int y = 0; y < 16; y++) {
   b49a2:	2500      	movs	r5, #0
      switch(getMazePixel(x, y)) {
   b49a4:	4629      	mov	r1, r5
   b49a6:	4638      	mov	r0, r7
   b49a8:	f7ff fd6c 	bl	b4484 <_Z12getMazePixelii>
   b49ac:	2806      	cmp	r0, #6
   b49ae:	d812      	bhi.n	b49d6 <_Z8drawMazeii+0x4e>
   b49b0:	e8df f000 	tbb	[pc, r0]
   b49b4:	49114404 	.word	0x49114404
   b49b8:	1151      	.short	0x1151
   b49ba:	55          	.byte	0x55
   b49bb:	00          	.byte	0x00
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(0, 0, mazebright));
   b49bc:	4b2b      	ldr	r3, [pc, #172]	; (b4a6c <_Z8drawMazeii+0xe4>)
   b49be:	2100      	movs	r1, #0
   b49c0:	781a      	ldrb	r2, [r3, #0]
   b49c2:	4608      	mov	r0, r1
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(red, green, blue));
   b49c4:	f000 fd7e 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b49c8:	1972      	adds	r2, r6, r5
   b49ca:	4603      	mov	r3, r0
   b49cc:	b212      	sxth	r2, r2
   b49ce:	4828      	ldr	r0, [pc, #160]	; (b4a70 <_Z8drawMazeii+0xe8>)
   b49d0:	b221      	sxth	r1, r4
   b49d2:	f000 fc71 	bl	b52b8 <_ZN18Adafruit_NeoMatrix9drawPixelEsst>
    for (int y = 0; y < 16; y++) {
   b49d6:	3501      	adds	r5, #1
   b49d8:	2d10      	cmp	r5, #16
   b49da:	d1e3      	bne.n	b49a4 <_Z8drawMazeii+0x1c>
  for (int x = 0; x < 16; x++) {
   b49dc:	3701      	adds	r7, #1
   b49de:	3401      	adds	r4, #1
   b49e0:	2f10      	cmp	r7, #16
   b49e2:	b2a4      	uxth	r4, r4
   b49e4:	d1db      	bne.n	b499e <_Z8drawMazeii+0x16>
          break;
      }
    }
  }
  if (mazenum != 9 && mazenum != 69) {
   b49e6:	4b23      	ldr	r3, [pc, #140]	; (b4a74 <_Z8drawMazeii+0xec>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	2b09      	cmp	r3, #9
   b49ec:	d024      	beq.n	b4a38 <_Z8drawMazeii+0xb0>
   b49ee:	2b45      	cmp	r3, #69	; 0x45
   b49f0:	d022      	beq.n	b4a38 <_Z8drawMazeii+0xb0>
   b49f2:	4f21      	ldr	r7, [pc, #132]	; (b4a78 <_Z8drawMazeii+0xf0>)
    for (int i = 0; i < 5; i++) {
      //Serial.print("checking pixel");
      //Serial.println(i);
      if (reachedTargets[i][2] != 1) {
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(mazebright, mazebright, 0));
   b49f4:	f8df b074 	ldr.w	fp, [pc, #116]	; b4a6c <_Z8drawMazeii+0xe4>
        //Serial.print("drawing pixel ");
        //Serial.println(i);
      } else {
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(0, mazebright, 0));
   b49f8:	f8df a074 	ldr.w	sl, [pc, #116]	; b4a70 <_Z8drawMazeii+0xe8>
  if (mazenum != 9 && mazenum != 69) {
   b49fc:	f04f 0905 	mov.w	r9, #5
      if (reachedTargets[i][2] != 1) {
   b4a00:	68bb      	ldr	r3, [r7, #8]
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(mazebright, mazebright, 0));
   b4a02:	f89b 1000 	ldrb.w	r1, [fp]
   b4a06:	683c      	ldr	r4, [r7, #0]
   b4a08:	687d      	ldr	r5, [r7, #4]
      if (reachedTargets[i][2] != 1) {
   b4a0a:	2b01      	cmp	r3, #1
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(mazebright, mazebright, 0));
   b4a0c:	f04f 0200 	mov.w	r2, #0
   b4a10:	bf14      	ite	ne
   b4a12:	4608      	movne	r0, r1
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(0, mazebright, 0));
   b4a14:	4610      	moveq	r0, r2
   b4a16:	f000 fd55 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(mazebright, mazebright, 0));
   b4a1a:	4444      	add	r4, r8
   b4a1c:	4435      	add	r5, r6
   b4a1e:	b224      	sxth	r4, r4
   b4a20:	b22d      	sxth	r5, r5
        matrix.drawPixel(reachedTargets[i][0] + offsetx, reachedTargets[i][1] + offsety, matrix.Color(0, mazebright, 0));
   b4a22:	4603      	mov	r3, r0
   b4a24:	462a      	mov	r2, r5
   b4a26:	4621      	mov	r1, r4
   b4a28:	4650      	mov	r0, sl
   b4a2a:	f000 fc45 	bl	b52b8 <_ZN18Adafruit_NeoMatrix9drawPixelEsst>
    for (int i = 0; i < 5; i++) {
   b4a2e:	f1b9 0901 	subs.w	r9, r9, #1
   b4a32:	f107 070c 	add.w	r7, r7, #12
   b4a36:	d1e3      	bne.n	b4a00 <_Z8drawMazeii+0x78>
      }
    }
  }
}
   b4a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(mazebright, 0, 0));
   b4a3c:	4b0b      	ldr	r3, [pc, #44]	; (b4a6c <_Z8drawMazeii+0xe4>)
   b4a3e:	2200      	movs	r2, #0
   b4a40:	7818      	ldrb	r0, [r3, #0]
   b4a42:	4611      	mov	r1, r2
   b4a44:	e7be      	b.n	b49c4 <_Z8drawMazeii+0x3c>
          if (mazenum == 9) {
   b4a46:	4b0b      	ldr	r3, [pc, #44]	; (b4a74 <_Z8drawMazeii+0xec>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	2b09      	cmp	r3, #9
   b4a4c:	d1c3      	bne.n	b49d6 <_Z8drawMazeii+0x4e>
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(0, 255, 0));
   b4a4e:	2200      	movs	r2, #0
   b4a50:	21ff      	movs	r1, #255	; 0xff
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(0, mazebright, 0));
   b4a52:	4610      	mov	r0, r2
   b4a54:	e7b6      	b.n	b49c4 <_Z8drawMazeii+0x3c>
   b4a56:	4b05      	ldr	r3, [pc, #20]	; (b4a6c <_Z8drawMazeii+0xe4>)
   b4a58:	2200      	movs	r2, #0
   b4a5a:	7819      	ldrb	r1, [r3, #0]
   b4a5c:	e7f9      	b.n	b4a52 <_Z8drawMazeii+0xca>
          matrix.drawPixel(x + offsetx, y + offsety, matrix.Color(red, green, blue));
   b4a5e:	f899 2000 	ldrb.w	r2, [r9]
   b4a62:	f89a 1000 	ldrb.w	r1, [sl]
   b4a66:	f89b 0000 	ldrb.w	r0, [fp]
   b4a6a:	e7ab      	b.n	b49c4 <_Z8drawMazeii+0x3c>
   b4a6c:	2003e430 	.word	0x2003e430
   b4a70:	2003e5f8 	.word	0x2003e5f8
   b4a74:	2003e434 	.word	0x2003e434
   b4a78:	2003e43c 	.word	0x2003e43c
   b4a7c:	2003e540 	.word	0x2003e540
   b4a80:	2003e5bc 	.word	0x2003e5bc
   b4a84:	2003e668 	.word	0x2003e668

000b4a88 <_Z8drawMazeiii>:

void drawMaze(signed int offsetx, signed int offsety, signed int levelNum) {
   b4a88:	b538      	push	{r3, r4, r5, lr}
  signed int temp = mazenum;
   b4a8a:	4c03      	ldr	r4, [pc, #12]	; (b4a98 <_Z8drawMazeiii+0x10>)
   b4a8c:	6825      	ldr	r5, [r4, #0]
  mazenum = levelNum;
   b4a8e:	6022      	str	r2, [r4, #0]
  drawMaze(offsetx, offsety);
   b4a90:	f7ff ff7a 	bl	b4988 <_Z8drawMazeii>
  mazenum = temp;
   b4a94:	6025      	str	r5, [r4, #0]
  
}
   b4a96:	bd38      	pop	{r3, r4, r5, pc}
   b4a98:	2003e434 	.word	0x2003e434

000b4a9c <_Z15levelTransitionv>:
void levelTransition() {
   b4a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      matrix.fillScreen(0);
   b4a9e:	4f1a      	ldr	r7, [pc, #104]	; (b4b08 <_Z15levelTransitionv+0x6c>)
      drawMaze(i, i, mazenum);
   b4aa0:	4c1a      	ldr	r4, [pc, #104]	; (b4b0c <_Z15levelTransitionv+0x70>)
  for (int i = 0; i < 16; i++) {
   b4aa2:	2500      	movs	r5, #0
      matrix.fillScreen(0);
   b4aa4:	2100      	movs	r1, #0
   b4aa6:	4638      	mov	r0, r7
   b4aa8:	f000 fbd4 	bl	b5254 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      drawMaze(i, i, mazenum);
   b4aac:	6822      	ldr	r2, [r4, #0]
   b4aae:	4629      	mov	r1, r5
   b4ab0:	4628      	mov	r0, r5
   b4ab2:	f7ff ffe9 	bl	b4a88 <_Z8drawMazeiii>
      int tempmazenum = mazenum + 1;
   b4ab6:	6822      	ldr	r2, [r4, #0]
      if (mazenum == 10) {
   b4ab8:	f1a5 0110 	sub.w	r1, r5, #16
   b4abc:	2a0a      	cmp	r2, #10
      int tempmazenum = mazenum + 1;
   b4abe:	bf14      	ite	ne
   b4ac0:	3201      	addne	r2, #1
        tempmazenum = -1;
   b4ac2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
      drawMaze(i - 16, i - 16, tempmazenum);
   b4ac6:	4608      	mov	r0, r1
   b4ac8:	f7ff ffde 	bl	b4a88 <_Z8drawMazeiii>
      if (i == 8 && mazenum != 10) {
   b4acc:	2d08      	cmp	r5, #8
   b4ace:	d109      	bne.n	b4ae4 <_Z15levelTransitionv+0x48>
   b4ad0:	6826      	ldr	r6, [r4, #0]
   b4ad2:	2e0a      	cmp	r6, #10
   b4ad4:	d010      	beq.n	b4af8 <_Z15levelTransitionv+0x5c>
        mazenum++;
   b4ad6:	3601      	adds	r6, #1
   b4ad8:	6026      	str	r6, [r4, #0]
        populateReachedTargets();
   b4ada:	f7ff fd23 	bl	b4524 <_Z22populateReachedTargetsv>
        mazenum--;
   b4ade:	6823      	ldr	r3, [r4, #0]
   b4ae0:	3b01      	subs	r3, #1
   b4ae2:	6023      	str	r3, [r4, #0]
      matrix.show();
   b4ae4:	480a      	ldr	r0, [pc, #40]	; (b4b10 <_Z15levelTransitionv+0x74>)
   b4ae6:	f000 fd5d 	bl	b55a4 <_ZN17Adafruit_NeoPixel4showEv>
  for (int i = 0; i < 16; i++) {
   b4aea:	3501      	adds	r5, #1
      delay(100);
   b4aec:	2064      	movs	r0, #100	; 0x64
   b4aee:	f003 f943 	bl	b7d78 <delay>
  for (int i = 0; i < 16; i++) {
   b4af2:	2d10      	cmp	r5, #16
   b4af4:	d1d6      	bne.n	b4aa4 <_Z15levelTransitionv+0x8>
}
   b4af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mazenum = -1;
   b4af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4afc:	6023      	str	r3, [r4, #0]
        populateReachedTargets();
   b4afe:	f7ff fd11 	bl	b4524 <_Z22populateReachedTargetsv>
        mazenum = 10;
   b4b02:	6026      	str	r6, [r4, #0]
   b4b04:	e7ee      	b.n	b4ae4 <_Z15levelTransitionv+0x48>
   b4b06:	bf00      	nop
   b4b08:	2003e5f8 	.word	0x2003e5f8
   b4b0c:	2003e434 	.word	0x2003e434
   b4b10:	2003e614 	.word	0x2003e614

000b4b14 <_Z20checkIfLevelFinishedv>:
void checkIfLevelFinished() {
   b4b14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((int) ballx == 1 && (int) bally == 1 && checkIfTargetsReached()) || ((int) ballx == 1 && (int) bally == 14 && mazenum == 9)) {
   b4b18:	4f3f      	ldr	r7, [pc, #252]	; (b4c18 <_Z20checkIfLevelFinishedv+0x104>)
   b4b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
   b4b1e:	f007 fc7f 	bl	bc420 <__aeabi_d2iz>
   b4b22:	2801      	cmp	r0, #1
   b4b24:	d109      	bne.n	b4b3a <_Z20checkIfLevelFinishedv+0x26>
   b4b26:	4e3d      	ldr	r6, [pc, #244]	; (b4c1c <_Z20checkIfLevelFinishedv+0x108>)
   b4b28:	e9d6 0100 	ldrd	r0, r1, [r6]
   b4b2c:	f007 fc78 	bl	bc420 <__aeabi_d2iz>
   b4b30:	2801      	cmp	r0, #1
   b4b32:	d105      	bne.n	b4b40 <_Z20checkIfLevelFinishedv+0x2c>
   b4b34:	f7ff fd36 	bl	b45a4 <_Z21checkIfTargetsReachedv>
   b4b38:	b940      	cbnz	r0, b4b4c <_Z20checkIfLevelFinishedv+0x38>
}
   b4b3a:	b004      	add	sp, #16
   b4b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((int) ballx == 1 && (int) bally == 1 && checkIfTargetsReached()) || ((int) ballx == 1 && (int) bally == 14 && mazenum == 9)) {
   b4b40:	280e      	cmp	r0, #14
   b4b42:	d1fa      	bne.n	b4b3a <_Z20checkIfLevelFinishedv+0x26>
   b4b44:	4b36      	ldr	r3, [pc, #216]	; (b4c20 <_Z20checkIfLevelFinishedv+0x10c>)
   b4b46:	681b      	ldr	r3, [r3, #0]
   b4b48:	2b09      	cmp	r3, #9
   b4b4a:	d1f6      	bne.n	b4b3a <_Z20checkIfLevelFinishedv+0x26>
    mazenum++;
   b4b4c:	4c34      	ldr	r4, [pc, #208]	; (b4c20 <_Z20checkIfLevelFinishedv+0x10c>)
    levelTransition();
   b4b4e:	f7ff ffa5 	bl	b4a9c <_Z15levelTransitionv>
    mazenum++;
   b4b52:	6823      	ldr	r3, [r4, #0]
   b4b54:	3301      	adds	r3, #1
    if (mazenum == 10) {
   b4b56:	2b0a      	cmp	r3, #10
    mazenum++;
   b4b58:	6023      	str	r3, [r4, #0]
    if (mazenum == 10) {
   b4b5a:	d141      	bne.n	b4be0 <_Z20checkIfLevelFinishedv+0xcc>
      if (!client.isConnected()) {
   b4b5c:	4831      	ldr	r0, [pc, #196]	; (b4c24 <_Z20checkIfLevelFinishedv+0x110>)
   b4b5e:	f001 fa99 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b4b62:	b968      	cbnz	r0, b4b80 <_Z20checkIfLevelFinishedv+0x6c>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4b64:	4668      	mov	r0, sp
   b4b66:	f002 f80f 	bl	b6b88 <spark_deviceID>
        client.connect(System.deviceID());
   b4b6a:	9900      	ldr	r1, [sp, #0]
   b4b6c:	482d      	ldr	r0, [pc, #180]	; (b4c24 <_Z20checkIfLevelFinishedv+0x110>)
   b4b6e:	f001 fb81 	bl	b6274 <_ZN4MQTT7connectEPKc>
   b4b72:	4668      	mov	r0, sp
   b4b74:	f006 fbe8 	bl	bb348 <_ZN6StringD1Ev>
        client.subscribe("lindenline/leaderboardmsg");
   b4b78:	492b      	ldr	r1, [pc, #172]	; (b4c28 <_Z20checkIfLevelFinishedv+0x114>)
   b4b7a:	482a      	ldr	r0, [pc, #168]	; (b4c24 <_Z20checkIfLevelFinishedv+0x110>)
   b4b7c:	f001 fda9 	bl	b66d2 <_ZN4MQTT9subscribeEPKc>
      Serial.println("timer stopped");
   b4b80:	f002 ffe8 	bl	b7b54 <_Z16_fetch_usbserialv>
      if (millis() > startTime) {
   b4b84:	4d29      	ldr	r5, [pc, #164]	; (b4c2c <_Z20checkIfLevelFinishedv+0x118>)
      Serial.println("timer stopped");
   b4b86:	492a      	ldr	r1, [pc, #168]	; (b4c30 <_Z20checkIfLevelFinishedv+0x11c>)
   b4b88:	f004 f967 	bl	b8e5a <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b8c:	f001 ff94 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
      if (millis() > startTime) {
   b4b90:	682b      	ldr	r3, [r5, #0]
   b4b92:	4283      	cmp	r3, r0
   b4b94:	d23c      	bcs.n	b4c10 <_Z20checkIfLevelFinishedv+0xfc>
   b4b96:	f001 ff8f 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
        temp = millis() - startTime;
   b4b9a:	682d      	ldr	r5, [r5, #0]
   b4b9c:	1b45      	subs	r5, r0, r5
      Serial.println("Publishing:");
   b4b9e:	f002 ffd9 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4ba2:	4924      	ldr	r1, [pc, #144]	; (b4c34 <_Z20checkIfLevelFinishedv+0x120>)
   b4ba4:	f004 f959 	bl	b8e5a <_ZN5Print7printlnEPKc>
      Serial.println(String(temp));
   b4ba8:	f002 ffd4 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4bac:	220a      	movs	r2, #10
   b4bae:	4680      	mov	r8, r0
   b4bb0:	4629      	mov	r1, r5
   b4bb2:	4668      	mov	r0, sp
   b4bb4:	f006 fc7b 	bl	bb4ae <_ZN6StringC1Emh>
   b4bb8:	9900      	ldr	r1, [sp, #0]
   b4bba:	4640      	mov	r0, r8
   b4bbc:	f004 f94d 	bl	b8e5a <_ZN5Print7printlnEPKc>
   b4bc0:	4668      	mov	r0, sp
   b4bc2:	f006 fbc1 	bl	bb348 <_ZN6StringD1Ev>
      client.publish("lindenline/leaderboard", String(temp));
   b4bc6:	220a      	movs	r2, #10
   b4bc8:	4629      	mov	r1, r5
   b4bca:	4668      	mov	r0, sp
   b4bcc:	f006 fc6f 	bl	bb4ae <_ZN6StringC1Emh>
   b4bd0:	9a00      	ldr	r2, [sp, #0]
   b4bd2:	4919      	ldr	r1, [pc, #100]	; (b4c38 <_Z20checkIfLevelFinishedv+0x124>)
   b4bd4:	4813      	ldr	r0, [pc, #76]	; (b4c24 <_Z20checkIfLevelFinishedv+0x110>)
   b4bd6:	f001 fbd8 	bl	b638a <_ZN4MQTT7publishEPKcS1_>
   b4bda:	4668      	mov	r0, sp
   b4bdc:	f006 fbb4 	bl	bb348 <_ZN6StringD1Ev>
    if (mazenum == 0) {
   b4be0:	6823      	ldr	r3, [r4, #0]
   b4be2:	b943      	cbnz	r3, b4bf6 <_Z20checkIfLevelFinishedv+0xe2>
   b4be4:	f001 ff68 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
      startTime = millis();
   b4be8:	4b10      	ldr	r3, [pc, #64]	; (b4c2c <_Z20checkIfLevelFinishedv+0x118>)
   b4bea:	6018      	str	r0, [r3, #0]
      Serial.println("timer started");
   b4bec:	f002 ffb2 	bl	b7b54 <_Z16_fetch_usbserialv>
   b4bf0:	4912      	ldr	r1, [pc, #72]	; (b4c3c <_Z20checkIfLevelFinishedv+0x128>)
   b4bf2:	f004 f932 	bl	b8e5a <_ZN5Print7printlnEPKc>
    if (mazenum == 11) {
   b4bf6:	6823      	ldr	r3, [r4, #0]
   b4bf8:	2b0b      	cmp	r3, #11
      mazenum = -1;
   b4bfa:	bf04      	itt	eq
   b4bfc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   b4c00:	6023      	streq	r3, [r4, #0]
    ballx = 14.0;
   b4c02:	4b0f      	ldr	r3, [pc, #60]	; (b4c40 <_Z20checkIfLevelFinishedv+0x12c>)
   b4c04:	2200      	movs	r2, #0
   b4c06:	e9c7 2300 	strd	r2, r3, [r7]
    bally = 14.0;
   b4c0a:	e9c6 2300 	strd	r2, r3, [r6]
}
   b4c0e:	e794      	b.n	b4b3a <_Z20checkIfLevelFinishedv+0x26>
        temp = 1337; // in case of a rollover
   b4c10:	f240 5539 	movw	r5, #1337	; 0x539
   b4c14:	e7c3      	b.n	b4b9e <_Z20checkIfLevelFinishedv+0x8a>
   b4c16:	bf00      	nop
   b4c18:	2003e420 	.word	0x2003e420
   b4c1c:	2003e428 	.word	0x2003e428
   b4c20:	2003e434 	.word	0x2003e434
   b4c24:	2003e544 	.word	0x2003e544
   b4c28:	000bc918 	.word	0x000bc918
   b4c2c:	2003e66c 	.word	0x2003e66c
   b4c30:	000bc932 	.word	0x000bc932
   b4c34:	000bc940 	.word	0x000bc940
   b4c38:	000bc94c 	.word	0x000bc94c
   b4c3c:	000bc963 	.word	0x000bc963
   b4c40:	402c0000 	.word	0x402c0000

000b4c44 <_Z9connectuiv>:

void connectui() {
   b4c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    matrix.fillScreen(0);
   b4c48:	4855      	ldr	r0, [pc, #340]	; (b4da0 <_Z9connectuiv+0x15c>)
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4c4a:	4e56      	ldr	r6, [pc, #344]	; (b4da4 <_Z9connectuiv+0x160>)
void connectui() {
   b4c4c:	b08a      	sub	sp, #40	; 0x28
    matrix.fillScreen(0);
   b4c4e:	2100      	movs	r1, #0
   b4c50:	f000 fb00 	bl	b5254 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
  //drawMaze();
  matrix.setCursor(0, 0);
   b4c54:	2200      	movs	r2, #0
   b4c56:	4611      	mov	r1, r2
   b4c58:	4851      	ldr	r0, [pc, #324]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4c5a:	f001 f869 	bl	b5d30 <_ZN12Adafruit_GFX9setCursorEss>
  matrix.setTextSize(1);
   b4c5e:	4850      	ldr	r0, [pc, #320]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4c60:	2101      	movs	r1, #1
   b4c62:	f001 f868 	bl	b5d36 <_ZN12Adafruit_GFX11setTextSizeEh>
  matrix.print("con");
   b4c66:	4950      	ldr	r1, [pc, #320]	; (b4da8 <_Z9connectuiv+0x164>)
   b4c68:	484d      	ldr	r0, [pc, #308]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4c6a:	f004 f8e3 	bl	b8e34 <_ZN5Print5printEPKc>
  matrix.show();
   b4c6e:	484f      	ldr	r0, [pc, #316]	; (b4dac <_Z9connectuiv+0x168>)
   b4c70:	f000 fc98 	bl	b55a4 <_ZN17Adafruit_NeoPixel4showEv>
  while (!BLE.connected()) {
   b4c74:	f004 fde6 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c78:	f004 fe5b 	bl	b9932 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4c7c:	4604      	mov	r4, r0
   b4c7e:	2800      	cmp	r0, #0
   b4c80:	d176      	bne.n	b4d70 <_Z9connectuiv+0x12c>
    Vector<BleScanResult> scanResults = BLE.scan();
   b4c82:	f004 fddf 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c86:	4601      	mov	r1, r0
   b4c88:	a803      	add	r0, sp, #12
   b4c8a:	f006 fa39 	bl	bb100 <_ZNK8particle14BleLocalDevice4scanEv>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
   b4c8e:	9a04      	ldr	r2, [sp, #16]
      if (scanResults.size()) {
   b4c90:	2a00      	cmp	r2, #0
   b4c92:	d05a      	beq.n	b4d4a <_Z9connectuiv+0x106>
        Log.info("%d devices found", scanResults.size());
   b4c94:	4946      	ldr	r1, [pc, #280]	; (b4db0 <_Z9connectuiv+0x16c>)
   b4c96:	4847      	ldr	r0, [pc, #284]	; (b4db4 <_Z9connectuiv+0x170>)

        for (int ii = 0; ii < scanResults.size(); ii++) {
            String name = scanResults[ii].advertisingData().deviceName();
            if (name.length() > 0  && name.equals("maximus")) {
   b4c98:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4dd0 <_Z9connectuiv+0x18c>
        Log.info("%d devices found", scanResults.size());
   b4c9c:	f7ff fb44 	bl	b4328 <_ZNK5spark6Logger4infoEPKcz>
        for (int ii = 0; ii < scanResults.size(); ii++) {
   b4ca0:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   b4ca4:	429c      	cmp	r4, r3
   b4ca6:	da50      	bge.n	b4d4a <_Z9connectuiv+0x106>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::operator[](int i) {
   b4ca8:	2524      	movs	r5, #36	; 0x24
   b4caa:	4365      	muls	r5, r4
    return data_[i];
   b4cac:	4429      	add	r1, r5
            String name = scanResults[ii].advertisingData().deviceName();
   b4cae:	3108      	adds	r1, #8
   b4cb0:	a806      	add	r0, sp, #24
   b4cb2:	f004 fc2b 	bl	b950c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (name.length() > 0  && name.equals("maximus")) {
   b4cb6:	9b08      	ldr	r3, [sp, #32]
   b4cb8:	2b00      	cmp	r3, #0
   b4cba:	d041      	beq.n	b4d40 <_Z9connectuiv+0xfc>
   b4cbc:	4641      	mov	r1, r8
   b4cbe:	a806      	add	r0, sp, #24
   b4cc0:	f006 fc4f 	bl	bb562 <_ZNK6String6equalsEPKc>
   b4cc4:	2800      	cmp	r0, #0
   b4cc6:	d03b      	beq.n	b4d40 <_Z9connectuiv+0xfc>
                Log.info("Connecting to: %s", name.c_str());
   b4cc8:	9a06      	ldr	r2, [sp, #24]
   b4cca:	493b      	ldr	r1, [pc, #236]	; (b4db8 <_Z9connectuiv+0x174>)
   b4ccc:	4839      	ldr	r0, [pc, #228]	; (b4db4 <_Z9connectuiv+0x170>)
   b4cce:	f7ff fb2b 	bl	b4328 <_ZNK5spark6Logger4infoEPKcz>
                peer = BLE.connect(scanResults[ii].address());
   b4cd2:	f004 fdb7 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cd6:	9a03      	ldr	r2, [sp, #12]
   b4cd8:	4601      	mov	r1, r0
   b4cda:	2301      	movs	r3, #1
   b4cdc:	442a      	add	r2, r5
   b4cde:	a801      	add	r0, sp, #4
   b4ce0:	f006 f88e 	bl	bae00 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4ce4:	9b01      	ldr	r3, [sp, #4]
   b4ce6:	9f02      	ldr	r7, [sp, #8]
   b4ce8:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
   b4cea:	6873      	ldr	r3, [r6, #4]
   b4cec:	429f      	cmp	r7, r3
   b4cee:	d016      	beq.n	b4d1e <_Z9connectuiv+0xda>
	    if (__tmp != 0)
   b4cf0:	b117      	cbz	r7, b4cf8 <_Z9connectuiv+0xb4>
    { ++_M_use_count; }
   b4cf2:	687b      	ldr	r3, [r7, #4]
   b4cf4:	3301      	adds	r3, #1
   b4cf6:	607b      	str	r3, [r7, #4]
	    if (_M_pi != 0)
   b4cf8:	6875      	ldr	r5, [r6, #4]
   b4cfa:	b17d      	cbz	r5, b4d1c <_Z9connectuiv+0xd8>
      if (--_M_use_count == 0)
   b4cfc:	686b      	ldr	r3, [r5, #4]
   b4cfe:	3b01      	subs	r3, #1
   b4d00:	606b      	str	r3, [r5, #4]
   b4d02:	b95b      	cbnz	r3, b4d1c <_Z9connectuiv+0xd8>
          _M_dispose();
   b4d04:	682b      	ldr	r3, [r5, #0]
   b4d06:	4628      	mov	r0, r5
   b4d08:	689b      	ldr	r3, [r3, #8]
   b4d0a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d0c:	68ab      	ldr	r3, [r5, #8]
   b4d0e:	3b01      	subs	r3, #1
   b4d10:	60ab      	str	r3, [r5, #8]
   b4d12:	b91b      	cbnz	r3, b4d1c <_Z9connectuiv+0xd8>
            _M_destroy();
   b4d14:	682b      	ldr	r3, [r5, #0]
   b4d16:	4628      	mov	r0, r5
   b4d18:	68db      	ldr	r3, [r3, #12]
   b4d1a:	4798      	blx	r3
	    _M_pi = __tmp;
   b4d1c:	6077      	str	r7, [r6, #4]
   b4d1e:	a801      	add	r0, sp, #4
   b4d20:	f004 fe95 	bl	b9a4e <_ZN8particle13BlePeerDeviceD1Ev>
                if (peer.connected()) {
   b4d24:	4630      	mov	r0, r6
   b4d26:	f004 fcff 	bl	b9728 <_ZNK8particle13BlePeerDevice9connectedEv>
   b4d2a:	b148      	cbz	r0, b4d40 <_Z9connectuiv+0xfc>
                peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b4d2c:	4a23      	ldr	r2, [pc, #140]	; (b4dbc <_Z9connectuiv+0x178>)
   b4d2e:	4924      	ldr	r1, [pc, #144]	; (b4dc0 <_Z9connectuiv+0x17c>)
   b4d30:	4630      	mov	r0, r6
   b4d32:	f005 fcf8 	bl	ba726 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b4d36:	4a23      	ldr	r2, [pc, #140]	; (b4dc4 <_Z9connectuiv+0x180>)
   b4d38:	4923      	ldr	r1, [pc, #140]	; (b4dc8 <_Z9connectuiv+0x184>)
   b4d3a:	4630      	mov	r0, r6
   b4d3c:	f005 fcf3 	bl	ba726 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
            String name = scanResults[ii].advertisingData().deviceName();
   b4d40:	a806      	add	r0, sp, #24
   b4d42:	f006 fb01 	bl	bb348 <_ZN6StringD1Ev>
        for (int ii = 0; ii < scanResults.size(); ii++) {
   b4d46:	3401      	adds	r4, #1
   b4d48:	e7aa      	b.n	b4ca0 <_Z9connectuiv+0x5c>
    destruct(data_, data_ + size_);
   b4d4a:	e9dd 4303 	ldrd	r4, r3, [sp, #12]
   b4d4e:	2524      	movs	r5, #36	; 0x24
   b4d50:	fb05 4503 	mla	r5, r5, r3, r4
        for (; p != end; ++p) {
   b4d54:	42a5      	cmp	r5, r4
   b4d56:	d007      	beq.n	b4d68 <_Z9connectuiv+0x124>
    ::free(ptr);
   b4d58:	6960      	ldr	r0, [r4, #20]
   b4d5a:	f001 ffb1 	bl	b6cc0 <free>
   b4d5e:	68a0      	ldr	r0, [r4, #8]
   b4d60:	f001 ffae 	bl	b6cc0 <free>
        for (; p != end; ++p) {
   b4d64:	3424      	adds	r4, #36	; 0x24
   b4d66:	e7f5      	b.n	b4d54 <_Z9connectuiv+0x110>
    ::free(ptr);
   b4d68:	9803      	ldr	r0, [sp, #12]
   b4d6a:	f001 ffa9 	bl	b6cc0 <free>
  while (!BLE.connected()) {
   b4d6e:	e781      	b.n	b4c74 <_Z9connectuiv+0x30>
              }
            }
        }
    }
  }
  matrix.fillScreen(0);
   b4d70:	480b      	ldr	r0, [pc, #44]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4d72:	2100      	movs	r1, #0
   b4d74:	f000 fa6e 	bl	b5254 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
  //drawMaze();
  matrix.setCursor(0, 0);
   b4d78:	2200      	movs	r2, #0
   b4d7a:	4611      	mov	r1, r2
   b4d7c:	4808      	ldr	r0, [pc, #32]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4d7e:	f000 ffd7 	bl	b5d30 <_ZN12Adafruit_GFX9setCursorEss>
  matrix.setTextSize(1);
   b4d82:	4807      	ldr	r0, [pc, #28]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4d84:	2101      	movs	r1, #1
   b4d86:	f000 ffd6 	bl	b5d36 <_ZN12Adafruit_GFX11setTextSizeEh>
  matrix.print("ct");
   b4d8a:	4910      	ldr	r1, [pc, #64]	; (b4dcc <_Z9connectuiv+0x188>)
   b4d8c:	4804      	ldr	r0, [pc, #16]	; (b4da0 <_Z9connectuiv+0x15c>)
   b4d8e:	f004 f851 	bl	b8e34 <_ZN5Print5printEPKc>
  matrix.show();
   b4d92:	4806      	ldr	r0, [pc, #24]	; (b4dac <_Z9connectuiv+0x168>)
}
   b4d94:	b00a      	add	sp, #40	; 0x28
   b4d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  matrix.show();
   b4d9a:	f000 bc03 	b.w	b55a4 <_ZN17Adafruit_NeoPixel4showEv>
   b4d9e:	bf00      	nop
   b4da0:	2003e5f8 	.word	0x2003e5f8
   b4da4:	2003e650 	.word	0x2003e650
   b4da8:	000bc971 	.word	0x000bc971
   b4dac:	2003e614 	.word	0x2003e614
   b4db0:	000bc975 	.word	0x000bc975
   b4db4:	2003e6d0 	.word	0x2003e6d0
   b4db8:	000bc98e 	.word	0x000bc98e
   b4dbc:	2003e518 	.word	0x2003e518
   b4dc0:	2003e660 	.word	0x2003e660
   b4dc4:	2003e504 	.word	0x2003e504
   b4dc8:	2003e658 	.word	0x2003e658
   b4dcc:	000bc9a0 	.word	0x000bc9a0
   b4dd0:	000bc986 	.word	0x000bc986

000b4dd4 <setup>:

const uint16_t colors[] = {
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };

void setup() {
   b4dd4:	b538      	push	{r3, r4, r5, lr}
  setupLCDs();
  firstScoreDisplay.writeDigitAscii(1, 'A');
  firstScoreDisplay.writeDisplay();
  matrix.begin();
   b4dd6:	4c18      	ldr	r4, [pc, #96]	; (b4e38 <setup+0x64>)
  setupLCDs();
   b4dd8:	f7ff fb34 	bl	b4444 <_Z9setupLCDsv>
  firstScoreDisplay.writeDigitAscii(1, 'A');
   b4ddc:	2300      	movs	r3, #0
   b4dde:	2241      	movs	r2, #65	; 0x41
   b4de0:	2101      	movs	r1, #1
   b4de2:	4816      	ldr	r0, [pc, #88]	; (b4e3c <setup+0x68>)
   b4de4:	f001 f828 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  matrix.begin();
   b4de8:	f104 051c 	add.w	r5, r4, #28
  firstScoreDisplay.writeDisplay();
   b4dec:	4813      	ldr	r0, [pc, #76]	; (b4e3c <setup+0x68>)
   b4dee:	f000 fffe 	bl	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  matrix.begin();
   b4df2:	4628      	mov	r0, r5
   b4df4:	f000 fb9d 	bl	b5532 <_ZN17Adafruit_NeoPixel5beginEv>
  matrix.setTextWrap(true);
   b4df8:	4620      	mov	r0, r4
   b4dfa:	2101      	movs	r1, #1
   b4dfc:	f000 ffa3 	bl	b5d46 <_ZN12Adafruit_GFX11setTextWrapEb>
  matrix.setBrightness(25);
   b4e00:	4628      	mov	r0, r5
   b4e02:	2119      	movs	r1, #25
   b4e04:	f000 fdbf 	bl	b5986 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  matrix.setTextColor(matrix.Color(80,255,0));
   b4e08:	2200      	movs	r2, #0
   b4e0a:	21ff      	movs	r1, #255	; 0xff
   b4e0c:	2050      	movs	r0, #80	; 0x50
   b4e0e:	f000 fb59 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b4e12:	4601      	mov	r1, r0
   b4e14:	4620      	mov	r0, r4
   b4e16:	f000 ff93 	bl	b5d40 <_ZN12Adafruit_GFX12setTextColorEt>



  BLE.on();
   b4e1a:	f004 fd13 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e1e:	f004 fd5b 	bl	b98d8 <_ZNK8particle14BleLocalDevice2onEv>
  peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   b4e22:	4a07      	ldr	r2, [pc, #28]	; (b4e40 <setup+0x6c>)
   b4e24:	4907      	ldr	r1, [pc, #28]	; (b4e44 <setup+0x70>)
   b4e26:	4610      	mov	r0, r2
   b4e28:	f005 fca7 	bl	ba77a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  connectui();
   b4e2c:	f7ff ff0a 	bl	b4c44 <_Z9connectuiv>
  // delay(2000);
  populateReachedTargets();
  
  //BLE.on();
  
}
   b4e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  populateReachedTargets();
   b4e34:	f7ff bb76 	b.w	b4524 <_Z22populateReachedTargetsv>
   b4e38:	2003e5f8 	.word	0x2003e5f8
   b4e3c:	2003e5a8 	.word	0x2003e5a8
   b4e40:	2003e660 	.word	0x2003e660
   b4e44:	000b40dd 	.word	0x000b40dd

000b4e48 <loop>:


void loop() {
   b4e48:	b530      	push	{r4, r5, lr}
   b4e4a:	b085      	sub	sp, #20
  doBallPhysics();
   b4e4c:	f7ff fce8 	bl	b4820 <_Z13doBallPhysicsv>
  ballxspeed = map((double) xsample, -16000.0, 16000.0, -BALL_SPEED, BALL_SPEED);
   b4e50:	4b59      	ldr	r3, [pc, #356]	; (b4fb8 <loop+0x170>)
   b4e52:	6818      	ldr	r0, [r3, #0]
   b4e54:	f006 ffe0 	bl	bbe18 <__aeabi_i2d>
   b4e58:	ed9f 4b4f 	vldr	d4, [pc, #316]	; b4f98 <loop+0x150>
   b4e5c:	ed9f 3b50 	vldr	d3, [pc, #320]	; b4fa0 <loop+0x158>
   b4e60:	ed9f 2b51 	vldr	d2, [pc, #324]	; b4fa8 <loop+0x160>
   b4e64:	ed9f 1b52 	vldr	d1, [pc, #328]	; b4fb0 <loop+0x168>
   b4e68:	ec41 0b10 	vmov	d0, r0, r1
   b4e6c:	f002 ff41 	bl	b7cf2 <_Z3mapddddd>
   b4e70:	4b52      	ldr	r3, [pc, #328]	; (b4fbc <loop+0x174>)
   b4e72:	ed83 0b00 	vstr	d0, [r3]
  ballyspeed = map((double) ysample, -16000.0, 16000.0, -BALL_SPEED, BALL_SPEED);
   b4e76:	4b52      	ldr	r3, [pc, #328]	; (b4fc0 <loop+0x178>)
   b4e78:	6818      	ldr	r0, [r3, #0]
   b4e7a:	f006 ffcd 	bl	bbe18 <__aeabi_i2d>
   b4e7e:	ed9f 4b46 	vldr	d4, [pc, #280]	; b4f98 <loop+0x150>
   b4e82:	ed9f 3b47 	vldr	d3, [pc, #284]	; b4fa0 <loop+0x158>
   b4e86:	ed9f 2b48 	vldr	d2, [pc, #288]	; b4fa8 <loop+0x160>
   b4e8a:	ed9f 1b49 	vldr	d1, [pc, #292]	; b4fb0 <loop+0x168>
   b4e8e:	ec41 0b10 	vmov	d0, r0, r1
   b4e92:	f002 ff2e 	bl	b7cf2 <_Z3mapddddd>
   b4e96:	4b4b      	ldr	r3, [pc, #300]	; (b4fc4 <loop+0x17c>)
  matrix.fillScreen(0);
   b4e98:	484b      	ldr	r0, [pc, #300]	; (b4fc8 <loop+0x180>)
   b4e9a:	2100      	movs	r1, #0
  ballyspeed = map((double) ysample, -16000.0, 16000.0, -BALL_SPEED, BALL_SPEED);
   b4e9c:	ed83 0b00 	vstr	d0, [r3]
  matrix.fillScreen(0);
   b4ea0:	f000 f9d8 	bl	b5254 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
  //drawMaze();
  matrix.setCursor(0, 0);
   b4ea4:	2200      	movs	r2, #0
   b4ea6:	4611      	mov	r1, r2
   b4ea8:	4847      	ldr	r0, [pc, #284]	; (b4fc8 <loop+0x180>)
   b4eaa:	f000 ff41 	bl	b5d30 <_ZN12Adafruit_GFX9setCursorEss>
  //matrix.print(xsample);
  drawMaze(0, 0);
   b4eae:	2100      	movs	r1, #0
   b4eb0:	4608      	mov	r0, r1
   b4eb2:	f7ff fd69 	bl	b4988 <_Z8drawMazeii>
  tickRGBEnd();
   b4eb6:	f7ff fc5b 	bl	b4770 <_Z10tickRGBEndv>
  matrix.drawPixel((int) ballx, (int) bally, matrix.Color(255, 0, 255));
   b4eba:	4b44      	ldr	r3, [pc, #272]	; (b4fcc <loop+0x184>)
   b4ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
   b4ec0:	f007 faae 	bl	bc420 <__aeabi_d2iz>
   b4ec4:	4b42      	ldr	r3, [pc, #264]	; (b4fd0 <loop+0x188>)
   b4ec6:	b204      	sxth	r4, r0
   b4ec8:	e9d3 0100 	ldrd	r0, r1, [r3]
   b4ecc:	f007 faa8 	bl	bc420 <__aeabi_d2iz>
   b4ed0:	22ff      	movs	r2, #255	; 0xff
   b4ed2:	b205      	sxth	r5, r0
   b4ed4:	2100      	movs	r1, #0
   b4ed6:	4610      	mov	r0, r2
   b4ed8:	f000 faf4 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b4edc:	462a      	mov	r2, r5
   b4ede:	4603      	mov	r3, r0
   b4ee0:	4621      	mov	r1, r4
   b4ee2:	4839      	ldr	r0, [pc, #228]	; (b4fc8 <loop+0x180>)
   b4ee4:	f000 f9e8 	bl	b52b8 <_ZN18Adafruit_NeoMatrix9drawPixelEsst>
  checkIfLevelFinished();
   b4ee8:	f7ff fe14 	bl	b4b14 <_Z20checkIfLevelFinishedv>
  matrix.show();
   b4eec:	4839      	ldr	r0, [pc, #228]	; (b4fd4 <loop+0x18c>)
   b4eee:	f000 fb59 	bl	b55a4 <_ZN17Adafruit_NeoPixel4showEv>
  #ifndef OFFLINE
    if (client.isConnected()) {
   b4ef2:	4839      	ldr	r0, [pc, #228]	; (b4fd8 <loop+0x190>)
   b4ef4:	f001 f8ce 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b4ef8:	b198      	cbz	r0, b4f22 <loop+0xda>
    client.loop();
   b4efa:	4837      	ldr	r0, [pc, #220]	; (b4fd8 <loop+0x190>)
   b4efc:	f001 faa1 	bl	b6442 <_ZN4MQTT4loopEv>
    } else {
      client.connect(System.deviceID());
      client.subscribe("lindenline/leaderboardmsg");
    }
  #endif
  if (!BLE.connected()) {
   b4f00:	f004 fca0 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f04:	f004 fd15 	bl	b9932 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4f08:	b908      	cbnz	r0, b4f0e <loop+0xc6>
    connectui();
   b4f0a:	f7ff fe9b 	bl	b4c44 <_Z9connectuiv>
  }
  if (mazenum == -1) {
   b4f0e:	4b33      	ldr	r3, [pc, #204]	; (b4fdc <loop+0x194>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	1c5a      	adds	r2, r3, #1
   b4f14:	d114      	bne.n	b4f40 <loop+0xf8>
    writeNum(0);
   b4f16:	2000      	movs	r0, #0
    helperDisplay.writeDigitAscii(2, '0');
    helperDisplay.writeDigitAscii(3, '0');
    helperDisplay.writeDisplay();
  }
  
}
   b4f18:	b005      	add	sp, #20
   b4f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    writeNum(0);
   b4f1e:	f7ff ba29 	b.w	b4374 <_Z8writeNumm>
   b4f22:	4668      	mov	r0, sp
   b4f24:	f001 fe30 	bl	b6b88 <spark_deviceID>
      client.connect(System.deviceID());
   b4f28:	9900      	ldr	r1, [sp, #0]
   b4f2a:	482b      	ldr	r0, [pc, #172]	; (b4fd8 <loop+0x190>)
   b4f2c:	f001 f9a2 	bl	b6274 <_ZN4MQTT7connectEPKc>
   b4f30:	4668      	mov	r0, sp
   b4f32:	f006 fa09 	bl	bb348 <_ZN6StringD1Ev>
      client.subscribe("lindenline/leaderboardmsg");
   b4f36:	492a      	ldr	r1, [pc, #168]	; (b4fe0 <loop+0x198>)
   b4f38:	4827      	ldr	r0, [pc, #156]	; (b4fd8 <loop+0x190>)
   b4f3a:	f001 fbca 	bl	b66d2 <_ZN4MQTT9subscribeEPKc>
   b4f3e:	e7df      	b.n	b4f00 <loop+0xb8>
  } else if (mazenum != 10) {
   b4f40:	2b0a      	cmp	r3, #10
   b4f42:	d024      	beq.n	b4f8e <loop+0x146>
   b4f44:	f001 fdb8 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
    writeNum(millis() - startTime);
   b4f48:	4b26      	ldr	r3, [pc, #152]	; (b4fe4 <loop+0x19c>)
   b4f4a:	681b      	ldr	r3, [r3, #0]
   b4f4c:	1ac0      	subs	r0, r0, r3
   b4f4e:	f7ff fa11 	bl	b4374 <_Z8writeNumm>
    helperDisplay.writeDigitAscii(0, '0');
   b4f52:	2300      	movs	r3, #0
   b4f54:	4619      	mov	r1, r3
   b4f56:	4824      	ldr	r0, [pc, #144]	; (b4fe8 <loop+0x1a0>)
   b4f58:	2230      	movs	r2, #48	; 0x30
   b4f5a:	f000 ff6d 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
    helperDisplay.writeDigitAscii(1, '0');
   b4f5e:	4822      	ldr	r0, [pc, #136]	; (b4fe8 <loop+0x1a0>)
   b4f60:	2300      	movs	r3, #0
   b4f62:	2230      	movs	r2, #48	; 0x30
   b4f64:	2101      	movs	r1, #1
   b4f66:	f000 ff67 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
    helperDisplay.writeDigitAscii(2, '0');
   b4f6a:	481f      	ldr	r0, [pc, #124]	; (b4fe8 <loop+0x1a0>)
   b4f6c:	2300      	movs	r3, #0
   b4f6e:	2230      	movs	r2, #48	; 0x30
   b4f70:	2102      	movs	r1, #2
   b4f72:	f000 ff61 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
    helperDisplay.writeDigitAscii(3, '0');
   b4f76:	481c      	ldr	r0, [pc, #112]	; (b4fe8 <loop+0x1a0>)
   b4f78:	2300      	movs	r3, #0
   b4f7a:	2230      	movs	r2, #48	; 0x30
   b4f7c:	2103      	movs	r1, #3
   b4f7e:	f000 ff5b 	bl	b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
    helperDisplay.writeDisplay();
   b4f82:	4819      	ldr	r0, [pc, #100]	; (b4fe8 <loop+0x1a0>)
}
   b4f84:	b005      	add	sp, #20
   b4f86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    helperDisplay.writeDisplay();
   b4f8a:	f000 bf30 	b.w	b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
}
   b4f8e:	b005      	add	sp, #20
   b4f90:	bd30      	pop	{r4, r5, pc}
   b4f92:	bf00      	nop
   b4f94:	f3af 8000 	nop.w
   b4f98:	00000000 	.word	0x00000000
   b4f9c:	3fd00000 	.word	0x3fd00000
   b4fa0:	00000000 	.word	0x00000000
   b4fa4:	bfd00000 	.word	0xbfd00000
   b4fa8:	00000000 	.word	0x00000000
   b4fac:	40cf4000 	.word	0x40cf4000
   b4fb0:	00000000 	.word	0x00000000
   b4fb4:	c0cf4000 	.word	0xc0cf4000
   b4fb8:	2003e670 	.word	0x2003e670
   b4fbc:	2003e530 	.word	0x2003e530
   b4fc0:	2003e674 	.word	0x2003e674
   b4fc4:	2003e538 	.word	0x2003e538
   b4fc8:	2003e5f8 	.word	0x2003e5f8
   b4fcc:	2003e420 	.word	0x2003e420
   b4fd0:	2003e428 	.word	0x2003e428
   b4fd4:	2003e614 	.word	0x2003e614
   b4fd8:	2003e544 	.word	0x2003e544
   b4fdc:	2003e434 	.word	0x2003e434
   b4fe0:	000bc918 	.word	0x000bc918
   b4fe4:	2003e66c 	.word	0x2003e66c
   b4fe8:	2003e5c0 	.word	0x2003e5c0

000b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4fec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4fee:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4ff2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4ff4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4ff6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4ffa:	42ae      	cmp	r6, r5
   b4ffc:	d004      	beq.n	b5008 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4ffe:	4628      	mov	r0, r5
   b5000:	f006 f9a2 	bl	bb348 <_ZN6StringD1Ev>
   b5004:	3514      	adds	r5, #20
   b5006:	e7f8      	b.n	b4ffa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5008:	6820      	ldr	r0, [r4, #0]
   b500a:	f001 fe59 	bl	b6cc0 <free>
}
   b500e:	4620      	mov	r0, r4
   b5010:	bd70      	pop	{r4, r5, r6, pc}

000b5012 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5012:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5016:	4604      	mov	r4, r0
   b5018:	460d      	mov	r5, r1
   b501a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b501c:	d916      	bls.n	b504c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b501e:	4290      	cmp	r0, r2
   b5020:	d215      	bcs.n	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5022:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5026:	1a75      	subs	r5, r6, r1
   b5028:	f1a1 0714 	sub.w	r7, r1, #20
   b502c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b502e:	42b7      	cmp	r7, r6
   b5030:	d01c      	beq.n	b506c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5032:	b12c      	cbz	r4, b5040 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5034:	4631      	mov	r1, r6
   b5036:	4620      	mov	r0, r4
   b5038:	f006 fa02 	bl	bb440 <_ZN6StringC1EOS_>
   b503c:	7c33      	ldrb	r3, [r6, #16]
   b503e:	7423      	strb	r3, [r4, #16]
   b5040:	4630      	mov	r0, r6
   b5042:	f006 f981 	bl	bb348 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5046:	3e14      	subs	r6, #20
   b5048:	3c14      	subs	r4, #20
   b504a:	e7f0      	b.n	b502e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b504c:	d00e      	beq.n	b506c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b504e:	42b5      	cmp	r5, r6
   b5050:	d00c      	beq.n	b506c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5052:	b12c      	cbz	r4, b5060 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5054:	4629      	mov	r1, r5
   b5056:	4620      	mov	r0, r4
   b5058:	f006 f9f2 	bl	bb440 <_ZN6StringC1EOS_>
   b505c:	7c2b      	ldrb	r3, [r5, #16]
   b505e:	7423      	strb	r3, [r4, #16]
   b5060:	4628      	mov	r0, r5
   b5062:	f006 f971 	bl	bb348 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5066:	3514      	adds	r5, #20
   b5068:	3414      	adds	r4, #20
   b506a:	e7f0      	b.n	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b506e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b506e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5072:	2300      	movs	r3, #0
   b5074:	e9c0 3300 	strd	r3, r3, [r0]
   b5078:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b507a:	684f      	ldr	r7, [r1, #4]
   b507c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b507e:	4604      	mov	r4, r0
   b5080:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5082:	dd23      	ble.n	b50cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5084:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5088:	fb08 f007 	mul.w	r0, r8, r7
   b508c:	f001 fe10 	bl	b6cb0 <malloc>
            if (!d) {
   b5090:	4605      	mov	r5, r0
   b5092:	b1d8      	cbz	r0, b50cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5094:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5098:	fb08 1202 	mla	r2, r8, r2, r1
   b509c:	f7ff ffb9 	bl	b5012 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b50a0:	6820      	ldr	r0, [r4, #0]
   b50a2:	f001 fe0d 	bl	b6cc0 <free>
        data_ = d;
   b50a6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b50a8:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b50aa:	e9d6 7300 	ldrd	r7, r3, [r6]
   b50ae:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b50b2:	45b8      	cmp	r8, r7
   b50b4:	d008      	beq.n	b50c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b50b6:	4639      	mov	r1, r7
   b50b8:	4628      	mov	r0, r5
   b50ba:	f006 f9db 	bl	bb474 <_ZN6StringC1ERKS_>
   b50be:	7c3b      	ldrb	r3, [r7, #16]
   b50c0:	742b      	strb	r3, [r5, #16]
   b50c2:	3714      	adds	r7, #20
   b50c4:	3514      	adds	r5, #20
   b50c6:	e7f4      	b.n	b50b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b50c8:	6873      	ldr	r3, [r6, #4]
   b50ca:	6063      	str	r3, [r4, #4]
}
   b50cc:	4620      	mov	r0, r4
   b50ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b50d4 <_GLOBAL__sub_I_peerTxCharacteristic>:
   b50d4:	b5f0      	push	{r4, r5, r6, r7, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b50d6:	4940      	ldr	r1, [pc, #256]	; (b51d8 <_GLOBAL__sub_I_peerTxCharacteristic+0x104>)
   b50d8:	4840      	ldr	r0, [pc, #256]	; (b51dc <_GLOBAL__sub_I_peerTxCharacteristic+0x108>)
        filter_(level, filters) {
   b50da:	4d41      	ldr	r5, [pc, #260]	; (b51e0 <_GLOBAL__sub_I_peerTxCharacteristic+0x10c>)
}
   b50dc:	b091      	sub	sp, #68	; 0x44
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b50de:	f004 f955 	bl	b938c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b50e2:	4940      	ldr	r1, [pc, #256]	; (b51e4 <_GLOBAL__sub_I_peerTxCharacteristic+0x110>)
   b50e4:	4840      	ldr	r0, [pc, #256]	; (b51e8 <_GLOBAL__sub_I_peerTxCharacteristic+0x114>)
   b50e6:	f004 f951 	bl	b938c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b50ea:	4940      	ldr	r1, [pc, #256]	; (b51ec <_GLOBAL__sub_I_peerTxCharacteristic+0x118>)
   b50ec:	4840      	ldr	r0, [pc, #256]	; (b51f0 <_GLOBAL__sub_I_peerTxCharacteristic+0x11c>)
   b50ee:	f004 f94d 	bl	b938c <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic peerTxCharacteristic;
   b50f2:	4840      	ldr	r0, [pc, #256]	; (b51f4 <_GLOBAL__sub_I_peerTxCharacteristic+0x120>)
   b50f4:	f004 fa7a 	bl	b95ec <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b50f8:	483f      	ldr	r0, [pc, #252]	; (b51f8 <_GLOBAL__sub_I_peerTxCharacteristic+0x124>)
   b50fa:	f004 fa77 	bl	b95ec <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b50fe:	483f      	ldr	r0, [pc, #252]	; (b51fc <_GLOBAL__sub_I_peerTxCharacteristic+0x128>)
   b5100:	f004 faf0 	bl	b96e4 <_ZN8particle13BlePeerDeviceC1Ev>
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(8,8,2,2, PIXEL_PIN,
   b5104:	2302      	movs	r3, #2
   b5106:	2280      	movs	r2, #128	; 0x80
   b5108:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b510c:	2208      	movs	r2, #8
        capacity_(0) {
   b510e:	2400      	movs	r4, #0
   b5110:	4611      	mov	r1, r2
   b5112:	e9cd 3300 	strd	r3, r3, [sp]
   b5116:	483a      	ldr	r0, [pc, #232]	; (b5200 <_GLOBAL__sub_I_peerTxCharacteristic+0x12c>)
   b5118:	f000 f99c 	bl	b5454 <_ZN18Adafruit_NeoMatrixC1Ehhhhhhh>
   b511c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   b5120:	9406      	str	r4, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   b5122:	f002 fd17 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5126:	a904      	add	r1, sp, #16
   b5128:	4606      	mov	r6, r0
   b512a:	a807      	add	r0, sp, #28
   b512c:	f7ff ff9f 	bl	b506e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5130:	462f      	mov	r7, r5
        stream_(&stream) {
   b5132:	a907      	add	r1, sp, #28
   b5134:	a80a      	add	r0, sp, #40	; 0x28
   b5136:	f7ff ff9a 	bl	b506e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b513a:	4b32      	ldr	r3, [pc, #200]	; (b5204 <_GLOBAL__sub_I_peerTxCharacteristic+0x130>)
   b513c:	f847 3b04 	str.w	r3, [r7], #4
   b5140:	a90a      	add	r1, sp, #40	; 0x28
   b5142:	a80d      	add	r0, sp, #52	; 0x34
   b5144:	f7ff ff93 	bl	b506e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5148:	aa0d      	add	r2, sp, #52	; 0x34
   b514a:	2101      	movs	r1, #1
   b514c:	4638      	mov	r0, r7
   b514e:	f003 fb4f 	bl	b87f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5152:	a80d      	add	r0, sp, #52	; 0x34
   b5154:	f7ff ff4a 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5158:	a80a      	add	r0, sp, #40	; 0x28
   b515a:	f7ff ff47 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b515e:	4b2a      	ldr	r3, [pc, #168]	; (b5208 <_GLOBAL__sub_I_peerTxCharacteristic+0x134>)
   b5160:	602b      	str	r3, [r5, #0]
   b5162:	a807      	add	r0, sp, #28
   b5164:	622e      	str	r6, [r5, #32]
   b5166:	f7ff ff41 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b516a:	4b28      	ldr	r3, [pc, #160]	; (b520c <_GLOBAL__sub_I_peerTxCharacteristic+0x138>)
   b516c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b516e:	f002 fcf1 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5172:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5176:	f002 fcdd 	bl	b7b34 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b517a:	f003 f809 	bl	b8190 <_ZN5spark10LogManager8instanceEv>
   b517e:	4629      	mov	r1, r5
   b5180:	f003 fa0c 	bl	b859c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   b5184:	a804      	add	r0, sp, #16
   b5186:	f7ff ff31 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Adafruit_AlphaNum4 midScoreDisplay = Adafruit_AlphaNum4();
   b518a:	4821      	ldr	r0, [pc, #132]	; (b5210 <_GLOBAL__sub_I_peerTxCharacteristic+0x13c>)
   b518c:	f000 fe53 	bl	b5e36 <_ZN18Adafruit_AlphaNum4C1Ev>
Adafruit_AlphaNum4 firstScoreDisplay = Adafruit_AlphaNum4();
   b5190:	4820      	ldr	r0, [pc, #128]	; (b5214 <_GLOBAL__sub_I_peerTxCharacteristic+0x140>)
   b5192:	f000 fe50 	bl	b5e36 <_ZN18Adafruit_AlphaNum4C1Ev>
Adafruit_AlphaNum4 helperDisplay = Adafruit_AlphaNum4();
   b5196:	4820      	ldr	r0, [pc, #128]	; (b5218 <_GLOBAL__sub_I_peerTxCharacteristic+0x144>)
   b5198:	f000 fe4d 	bl	b5e36 <_ZN18Adafruit_AlphaNum4C1Ev>
MQTT client("lab.thewcl.com", 1883, callback);
   b519c:	4b1f      	ldr	r3, [pc, #124]	; (b521c <_GLOBAL__sub_I_peerTxCharacteristic+0x148>)
   b519e:	4920      	ldr	r1, [pc, #128]	; (b5220 <_GLOBAL__sub_I_peerTxCharacteristic+0x14c>)
   b51a0:	9400      	str	r4, [sp, #0]
   b51a2:	f240 725b 	movw	r2, #1883	; 0x75b
   b51a6:	481f      	ldr	r0, [pc, #124]	; (b5224 <_GLOBAL__sub_I_peerTxCharacteristic+0x150>)
   b51a8:	f000 fe98 	bl	b5edc <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b51ac:	f001 fc84 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
unsigned long startTime = millis();
   b51b0:	4b1d      	ldr	r3, [pc, #116]	; (b5228 <_GLOBAL__sub_I_peerTxCharacteristic+0x154>)
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };
   b51b2:	4622      	mov	r2, r4
unsigned long startTime = millis();
   b51b4:	6018      	str	r0, [r3, #0]
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };
   b51b6:	4621      	mov	r1, r4
   b51b8:	20ff      	movs	r0, #255	; 0xff
   b51ba:	f000 f983 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b51be:	4622      	mov	r2, r4
   b51c0:	21ff      	movs	r1, #255	; 0xff
   b51c2:	4620      	mov	r0, r4
   b51c4:	f000 f97e 	bl	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b51c8:	22ff      	movs	r2, #255	; 0xff
   b51ca:	4621      	mov	r1, r4
   b51cc:	4620      	mov	r0, r4
}
   b51ce:	b011      	add	sp, #68	; 0x44
   b51d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };
   b51d4:	f000 b976 	b.w	b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   b51d8:	000bc9a3 	.word	0x000bc9a3
   b51dc:	2003e4f0 	.word	0x2003e4f0
   b51e0:	2003e5d4 	.word	0x2003e5d4
   b51e4:	000bc9c8 	.word	0x000bc9c8
   b51e8:	2003e504 	.word	0x2003e504
   b51ec:	000bc9ed 	.word	0x000bc9ed
   b51f0:	2003e518 	.word	0x2003e518
   b51f4:	2003e660 	.word	0x2003e660
   b51f8:	2003e658 	.word	0x2003e658
   b51fc:	2003e650 	.word	0x2003e650
   b5200:	2003e5f8 	.word	0x2003e5f8
   b5204:	000bca2c 	.word	0x000bca2c
   b5208:	000be094 	.word	0x000be094
   b520c:	000bca44 	.word	0x000bca44
   b5210:	2003e63c 	.word	0x2003e63c
   b5214:	2003e5a8 	.word	0x2003e5a8
   b5218:	2003e5c0 	.word	0x2003e5c0
   b521c:	000b4225 	.word	0x000b4225
   b5220:	000bca12 	.word	0x000bca12
   b5224:	2003e544 	.word	0x2003e544
   b5228:	2003e66c 	.word	0x2003e66c

000b522c <_ZL11expandColort>:
  tilesY(tY), remapFn(NULL) { }

// Expand 16-bit input color (Adafruit_GFX colorspace) to 24-bit (NeoPixel)
// (w/gamma adjustment)
static uint32_t expandColor(uint16_t color) {
  return ((uint32_t)pgm_read_byte(&gamma5[ color >> 11       ]) << 16) |
   b522c:	4a07      	ldr	r2, [pc, #28]	; (b524c <_ZL11expandColort+0x20>)
   b522e:	0ac3      	lsrs	r3, r0, #11
   b5230:	5cd1      	ldrb	r1, [r2, r3]
         ((uint32_t)pgm_read_byte(&gamma6[(color >> 5) & 0x3F]) <<  8) |
                    pgm_read_byte(&gamma5[ color       & 0x1F]);
   b5232:	f000 031f 	and.w	r3, r0, #31
         ((uint32_t)pgm_read_byte(&gamma6[(color >> 5) & 0x3F]) <<  8) |
   b5236:	f3c0 1045 	ubfx	r0, r0, #5, #6
                    pgm_read_byte(&gamma5[ color       & 0x1F]);
   b523a:	5cd3      	ldrb	r3, [r2, r3]
         ((uint32_t)pgm_read_byte(&gamma6[(color >> 5) & 0x3F]) <<  8) |
   b523c:	4a04      	ldr	r2, [pc, #16]	; (b5250 <_ZL11expandColort+0x24>)
   b523e:	5c10      	ldrb	r0, [r2, r0]
                    pgm_read_byte(&gamma5[ color       & 0x1F]);
   b5240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
}
   b5244:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   b5248:	4770      	bx	lr
   b524a:	bf00      	nop
   b524c:	000bd754 	.word	0x000bd754
   b5250:	000bd774 	.word	0x000bd774

000b5254 <_ZN18Adafruit_NeoMatrix10fillScreenEt>:
  }

  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
}

void Adafruit_NeoMatrix::fillScreen(uint16_t color) {
   b5254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5256:	4604      	mov	r4, r0
   b5258:	4608      	mov	r0, r1
  uint16_t i, n;
  uint32_t c;

  c = passThruFlag ? passThruColor : expandColor(color);
   b525a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   b525e:	b17b      	cbz	r3, b5280 <_ZN18Adafruit_NeoMatrix10fillScreenEt+0x2c>
   b5260:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  n   = numPixels();
   b5262:	341c      	adds	r4, #28
   b5264:	4620      	mov	r0, r4
   b5266:	f000 fb8c 	bl	b5982 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   b526a:	2600      	movs	r6, #0
   b526c:	4607      	mov	r7, r0
  for(i=0; i<n; i++) setPixelColor(i, c);
   b526e:	b2b1      	uxth	r1, r6
   b5270:	428f      	cmp	r7, r1
   b5272:	d909      	bls.n	b5288 <_ZN18Adafruit_NeoMatrix10fillScreenEt+0x34>
   b5274:	462a      	mov	r2, r5
   b5276:	4620      	mov	r0, r4
   b5278:	f000 fb40 	bl	b58fc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   b527c:	3601      	adds	r6, #1
   b527e:	e7f6      	b.n	b526e <_ZN18Adafruit_NeoMatrix10fillScreenEt+0x1a>
  c = passThruFlag ? passThruColor : expandColor(color);
   b5280:	f7ff ffd4 	bl	b522c <_ZL11expandColort>
   b5284:	4605      	mov	r5, r0
   b5286:	e7ec      	b.n	b5262 <_ZN18Adafruit_NeoMatrix10fillScreenEt+0xe>
}
   b5288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b528c <_ZN18Adafruit_NeoMatrixD1Ev>:
#define NEO_TILE_AXIS          0x40 // Bitmask for tile H/V orientation
#define NEO_TILE_PROGRESSIVE   0x00 // Same tile order across each line
#define NEO_TILE_ZIGZAG        0x80 // Tile order reverses between lines
#define NEO_TILE_SEQUENCE      0x80 // Bitmask for tile line order

class Adafruit_NeoMatrix : public Adafruit_GFX, public Adafruit_NeoPixel {
   b528c:	b510      	push	{r4, lr}
   b528e:	4b04      	ldr	r3, [pc, #16]	; (b52a0 <_ZN18Adafruit_NeoMatrixD1Ev+0x14>)
   b5290:	4604      	mov	r4, r0
   b5292:	f840 3b1c 	str.w	r3, [r0], #28
   b5296:	f000 f921 	bl	b54dc <_ZN17Adafruit_NeoPixelD1Ev>
   b529a:	4620      	mov	r0, r4
   b529c:	bd10      	pop	{r4, pc}
   b529e:	bf00      	nop
   b52a0:	000bd7bc 	.word	0x000bd7bc

000b52a4 <_ZN18Adafruit_NeoMatrixD0Ev>:
   b52a4:	b510      	push	{r4, lr}
   b52a6:	4604      	mov	r4, r0
   b52a8:	f7ff fff0 	bl	b528c <_ZN18Adafruit_NeoMatrixD1Ev>
   b52ac:	4620      	mov	r0, r4
   b52ae:	2144      	movs	r1, #68	; 0x44
   b52b0:	f7fe fef7 	bl	b40a2 <_ZdlPvj>
   b52b4:	4620      	mov	r0, r4
   b52b6:	bd10      	pop	{r4, pc}

000b52b8 <_ZN18Adafruit_NeoMatrix9drawPixelEsst>:
void Adafruit_NeoMatrix::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b52b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
   b52bc:	1e0c      	subs	r4, r1, #0
void Adafruit_NeoMatrix::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b52be:	4605      	mov	r5, r0
   b52c0:	4698      	mov	r8, r3
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
   b52c2:	f2c0 80c4 	blt.w	b544e <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x196>
   b52c6:	2a00      	cmp	r2, #0
   b52c8:	f2c0 80c1 	blt.w	b544e <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x196>
   b52cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b52d0:	42a3      	cmp	r3, r4
   b52d2:	f340 80bc 	ble.w	b544e <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x196>
   b52d6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b52da:	4293      	cmp	r3, r2
   b52dc:	f340 80b7 	ble.w	b544e <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x196>
  switch(rotation) {
   b52e0:	7e40      	ldrb	r0, [r0, #25]
   b52e2:	2802      	cmp	r0, #2
    x = WIDTH  - 1 - y;
   b52e4:	b296      	uxth	r6, r2
    x = WIDTH  - 1 - x;
   b52e6:	b2a1      	uxth	r1, r4
  switch(rotation) {
   b52e8:	d01e      	beq.n	b5328 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x70>
   b52ea:	2803      	cmp	r0, #3
   b52ec:	d025      	beq.n	b533a <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x82>
   b52ee:	2801      	cmp	r0, #1
   b52f0:	d104      	bne.n	b52fc <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x44>
    x = WIDTH  - 1 - y;
   b52f2:	892b      	ldrh	r3, [r5, #8]
   b52f4:	3b01      	subs	r3, #1
   b52f6:	1b9b      	subs	r3, r3, r6
    break;
   b52f8:	4622      	mov	r2, r4
    x = WIDTH  - 1 - y;
   b52fa:	b21c      	sxth	r4, r3
  if(remapFn) { // Custom X/Y remapping function
   b52fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    pixelOffset = (*remapFn)(x, y);
   b52fe:	b2a0      	uxth	r0, r4
   b5300:	b291      	uxth	r1, r2
  if(remapFn) { // Custom X/Y remapping function
   b5302:	b303      	cbz	r3, b5346 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x8e>
    pixelOffset = (*remapFn)(x, y);
   b5304:	4798      	blx	r3
  int tileOffset = 0, pixelOffset;
   b5306:	2300      	movs	r3, #0
  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
   b5308:	4403      	add	r3, r0
   b530a:	b299      	uxth	r1, r3
   b530c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   b5310:	f105 041c 	add.w	r4, r5, #28
   b5314:	2b00      	cmp	r3, #0
   b5316:	f000 8093 	beq.w	b5440 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x188>
   b531a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   b531c:	4620      	mov	r0, r4
}
   b531e:	b002      	add	sp, #8
   b5320:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
   b5324:	f000 baea 	b.w	b58fc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    x = WIDTH  - 1 - x;
   b5328:	892c      	ldrh	r4, [r5, #8]
    y = HEIGHT - 1 - y;
   b532a:	896a      	ldrh	r2, [r5, #10]
    x = WIDTH  - 1 - x;
   b532c:	3c01      	subs	r4, #1
    y = HEIGHT - 1 - y;
   b532e:	3a01      	subs	r2, #1
    x = WIDTH  - 1 - x;
   b5330:	1a64      	subs	r4, r4, r1
    y = HEIGHT - 1 - y;
   b5332:	1b92      	subs	r2, r2, r6
    x = WIDTH  - 1 - x;
   b5334:	b224      	sxth	r4, r4
    y = HEIGHT - 1 - y;
   b5336:	b212      	sxth	r2, r2
    break;
   b5338:	e7e0      	b.n	b52fc <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x44>
    y = HEIGHT - 1 - t;
   b533a:	896b      	ldrh	r3, [r5, #10]
   b533c:	3b01      	subs	r3, #1
   b533e:	1a5b      	subs	r3, r3, r1
    break;
   b5340:	4614      	mov	r4, r2
    y = HEIGHT - 1 - t;
   b5342:	b21a      	sxth	r2, r3
    break;
   b5344:	e7da      	b.n	b52fc <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x44>
    uint8_t  corner = type & NEO_MATRIX_CORNER;
   b5346:	f895 c030 	ldrb.w	ip, [r5, #48]	; 0x30
    if(tilesX) { // Tiled display, multiple matrices
   b534a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    uint8_t  corner = type & NEO_MATRIX_CORNER;
   b534e:	f00c 0e03 	and.w	lr, ip, #3
    if(tilesX) { // Tiled display, multiple matrices
   b5352:	2b00      	cmp	r3, #0
   b5354:	d039      	beq.n	b53ca <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x112>
      major = y / matrixHeight,           // start (will swap later if needed)
   b5356:	f895 9032 	ldrb.w	r9, [r5, #50]	; 0x32
   b535a:	fb92 f2f9 	sdiv	r2, r2, r9
   b535e:	b296      	uxth	r6, r2
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
   b5360:	fb19 f206 	smulbb	r2, r9, r6
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
   b5364:	f01c 0f20 	tst.w	ip, #32
      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
   b5368:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
   b536c:	fb94 f4fa 	sdiv	r4, r4, sl
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
   b5370:	eba1 0202 	sub.w	r2, r1, r2
      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
   b5374:	b2a7      	uxth	r7, r4
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
   b5376:	bf18      	it	ne
   b5378:	f103 31ff 	addne.w	r1, r3, #4294967295	; 0xffffffff
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
   b537c:	fb1a f407 	smulbb	r4, sl, r7
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
   b5380:	bf1c      	itt	ne
   b5382:	1bcf      	subne	r7, r1, r7
   b5384:	b2bf      	uxthne	r7, r7
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
   b5386:	f01c 0f10 	tst.w	ip, #16
   b538a:	bf1f      	itttt	ne
   b538c:	f895 1034 	ldrbne.w	r1, [r5, #52]	; 0x34
   b5390:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b5394:	1b8e      	subne	r6, r1, r6
   b5396:	b2b6      	uxthne	r6, r6
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
   b5398:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b539c:	bf0a      	itet	eq
   b539e:	4631      	moveq	r1, r6
        majorScale = tilesY;
   b53a0:	f895 3034 	ldrbne.w	r3, [r5, #52]	; 0x34
   b53a4:	463e      	moveq	r6, r7
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
   b53a6:	eba0 0004 	sub.w	r0, r0, r4
        majorScale = tilesX;
   b53aa:	bf04      	itt	eq
   b53ac:	b29b      	uxtheq	r3, r3
   b53ae:	460f      	moveq	r7, r1
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
   b53b0:	f01c 0f80 	tst.w	ip, #128	; 0x80
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
   b53b4:	b204      	sxth	r4, r0
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
   b53b6:	b212      	sxth	r2, r2
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
   b53b8:	d12e      	bne.n	b5418 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x160>
        tile = major * majorScale + minor;
   b53ba:	fb17 f303 	smulbb	r3, r7, r3
          tile = (major + 1) * majorScale - 1 - minor;
   b53be:	441e      	add	r6, r3
          tile =  major      * majorScale     + minor;
   b53c0:	b2b6      	uxth	r6, r6
      tileOffset = tile * matrixWidth * matrixHeight;
   b53c2:	fb0a f606 	mul.w	r6, sl, r6
   b53c6:	fb09 f306 	mul.w	r3, r9, r6
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
   b53ca:	f01e 0f02 	tst.w	lr, #2
   b53ce:	bf18      	it	ne
   b53d0:	f895 0031 	ldrbne.w	r0, [r5, #49]	; 0x31
    minor = x; // Presume row major to start (will swap later if needed)
   b53d4:	b2a4      	uxth	r4, r4
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
   b53d6:	bf1e      	ittt	ne
   b53d8:	f100 30ff 	addne.w	r0, r0, #4294967295	; 0xffffffff
   b53dc:	1b00      	subne	r0, r0, r4
   b53de:	b284      	uxthne	r4, r0
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
   b53e0:	f01e 0f01 	tst.w	lr, #1
   b53e4:	bf18      	it	ne
   b53e6:	f895 0032 	ldrbne.w	r0, [r5, #50]	; 0x32
    major = y;
   b53ea:	b292      	uxth	r2, r2
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
   b53ec:	bf1e      	ittt	ne
   b53ee:	f100 30ff 	addne.w	r0, r0, #4294967295	; 0xffffffff
   b53f2:	1a82      	subne	r2, r0, r2
   b53f4:	b292      	uxthne	r2, r2
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
   b53f6:	f01c 0f04 	tst.w	ip, #4
      majorScale = matrixWidth;
   b53fa:	bf05      	ittet	eq
   b53fc:	4611      	moveq	r1, r2
   b53fe:	f895 0031 	ldrbeq.w	r0, [r5, #49]	; 0x31
      majorScale = matrixHeight;
   b5402:	f895 0032 	ldrbne.w	r0, [r5, #50]	; 0x32
   b5406:	4622      	moveq	r2, r4
   b5408:	bf08      	it	eq
   b540a:	460c      	moveq	r4, r1
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
   b540c:	f01c 0f08 	tst.w	ip, #8
   b5410:	d10f      	bne.n	b5432 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x17a>
      else          pixelOffset =  major      * majorScale     + minor;
   b5412:	fb00 2004 	mla	r0, r0, r4, r2
   b5416:	e777      	b.n	b5308 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x50>
        if(major & 1) {
   b5418:	07f8      	lsls	r0, r7, #31
   b541a:	d506      	bpl.n	b542a <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x172>
          tile = (major + 1) * majorScale - 1 - minor;
   b541c:	3701      	adds	r7, #1
          corner ^= NEO_MATRIX_CORNER;
   b541e:	f08e 0e03 	eor.w	lr, lr, #3
          tile = (major + 1) * majorScale - 1 - minor;
   b5422:	fb17 f303 	smulbb	r3, r7, r3
   b5426:	43f6      	mvns	r6, r6
   b5428:	e7c9      	b.n	b53be <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x106>
          tile =  major      * majorScale     + minor;
   b542a:	fb17 f703 	smulbb	r7, r7, r3
   b542e:	443e      	add	r6, r7
   b5430:	e7c6      	b.n	b53c0 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x108>
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
   b5432:	07e1      	lsls	r1, r4, #31
   b5434:	d5ed      	bpl.n	b5412 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x15a>
   b5436:	fb04 0000 	mla	r0, r4, r0, r0
   b543a:	3801      	subs	r0, #1
   b543c:	1a80      	subs	r0, r0, r2
   b543e:	e763      	b.n	b5308 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x50>
  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
   b5440:	4640      	mov	r0, r8
   b5442:	9101      	str	r1, [sp, #4]
   b5444:	f7ff fef2 	bl	b522c <_ZL11expandColort>
   b5448:	9901      	ldr	r1, [sp, #4]
   b544a:	4602      	mov	r2, r0
   b544c:	e766      	b.n	b531c <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x64>
}
   b544e:	b002      	add	sp, #8
   b5450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5454 <_ZN18Adafruit_NeoMatrixC1Ehhhhhhh>:
Adafruit_NeoMatrix::Adafruit_NeoMatrix(uint8_t mW, uint8_t mH, uint8_t tX,
   b5454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5458:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b545c:	460e      	mov	r6, r1
  Adafruit_GFX(mW * tX, mH * tY), Adafruit_NeoPixel(mW * mH * tX * tY, pin,
   b545e:	fa1f fb81 	uxth.w	fp, r1
   b5462:	fb02 fa09 	mul.w	sl, r2, r9
   b5466:	4359      	muls	r1, r3
   b5468:	b29f      	uxth	r7, r3
Adafruit_NeoMatrix::Adafruit_NeoMatrix(uint8_t mW, uint8_t mH, uint8_t tX,
   b546a:	4690      	mov	r8, r2
  tilesY(tY), remapFn(NULL) { }
   b546c:	b209      	sxth	r1, r1
   b546e:	fa0f f28a 	sxth.w	r2, sl
Adafruit_NeoMatrix::Adafruit_NeoMatrix(uint8_t mW, uint8_t mH, uint8_t tX,
   b5472:	4604      	mov	r4, r0
   b5474:	461d      	mov	r5, r3
  tilesY(tY), remapFn(NULL) { }
   b5476:	f000 fb8d 	bl	b5b94 <_ZN12Adafruit_GFXC1Ess>
   b547a:	fb17 f10a 	smulbb	r1, r7, sl
   b547e:	fb11 f10b 	smulbb	r1, r1, fp
   b5482:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   b5486:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   b548a:	b289      	uxth	r1, r1
   b548c:	f104 001c 	add.w	r0, r4, #28
   b5490:	f000 f876 	bl	b5580 <_ZN17Adafruit_NeoPixelC1Ethh>
   b5494:	4b0a      	ldr	r3, [pc, #40]	; (b54c0 <_ZN18Adafruit_NeoMatrixC1Ehhhhhhh+0x6c>)
   b5496:	6023      	str	r3, [r4, #0]
   b5498:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b549c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b54a0:	2300      	movs	r3, #0
   b54a2:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
   b54a6:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
   b54aa:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   b54ae:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
   b54b2:	63a3      	str	r3, [r4, #56]	; 0x38
   b54b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   b54b8:	4620      	mov	r0, r4
   b54ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54be:	bf00      	nop
   b54c0:	000bd7bc 	.word	0x000bd7bc

000b54c4 <_ZN18Adafruit_NeoMatrix5ColorEhhh>:
  return ((uint16_t)(r & 0xF8) << 8) |
   b54c4:	4b04      	ldr	r3, [pc, #16]	; (b54d8 <_ZN18Adafruit_NeoMatrix5ColorEhhh+0x14>)
         ((uint16_t)(g & 0xFC) << 3) |
   b54c6:	00c9      	lsls	r1, r1, #3
   b54c8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
   b54cc:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
  return ((uint16_t)(r & 0xF8) << 8) |
   b54d0:	ea03 2000 	and.w	r0, r3, r0, lsl #8
}
   b54d4:	4310      	orrs	r0, r2
   b54d6:	4770      	bx	lr
   b54d8:	fffff800 	.word	0xfffff800

000b54dc <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   b54dc:	b510      	push	{r4, lr}
   b54de:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   b54e0:	68c0      	ldr	r0, [r0, #12]
   b54e2:	b108      	cbz	r0, b54e8 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   b54e4:	f001 fbec 	bl	b6cc0 <free>
  if (begun) pinMode(pin, INPUT);
   b54e8:	7823      	ldrb	r3, [r4, #0]
   b54ea:	b11b      	cbz	r3, b54f4 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   b54ec:	79e0      	ldrb	r0, [r4, #7]
   b54ee:	2100      	movs	r1, #0
   b54f0:	f006 f9fc 	bl	bb8ec <pinMode>
}
   b54f4:	4620      	mov	r0, r4
   b54f6:	bd10      	pop	{r4, pc}

000b54f8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b54f8:	b538      	push	{r3, r4, r5, lr}
   b54fa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b54fc:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b54fe:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b5500:	b108      	cbz	r0, b5506 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b5502:	f001 fbdd 	bl	b6cc0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5506:	79a3      	ldrb	r3, [r4, #6]
   b5508:	2b06      	cmp	r3, #6
   b550a:	bf0c      	ite	eq
   b550c:	2004      	moveq	r0, #4
   b550e:	2003      	movne	r0, #3
   b5510:	fb10 f005 	smulbb	r0, r0, r5
   b5514:	b280      	uxth	r0, r0
   b5516:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b5518:	f001 fbca 	bl	b6cb0 <malloc>
   b551c:	60e0      	str	r0, [r4, #12]
   b551e:	b128      	cbz	r0, b552c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b5520:	88a2      	ldrh	r2, [r4, #4]
   b5522:	2100      	movs	r1, #0
   b5524:	f007 f83e 	bl	bc5a4 <memset>
    numLEDs = n;
   b5528:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b552a:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b552c:	80a0      	strh	r0, [r4, #4]
   b552e:	8060      	strh	r0, [r4, #2]
}
   b5530:	e7fb      	b.n	b552a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b5532 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b5532:	b510      	push	{r4, lr}
   b5534:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b5536:	2101      	movs	r1, #1
   b5538:	79c0      	ldrb	r0, [r0, #7]
   b553a:	f006 f9d7 	bl	bb8ec <pinMode>
  digitalWrite(pin, LOW);
   b553e:	79e0      	ldrb	r0, [r4, #7]
   b5540:	2100      	movs	r1, #0
   b5542:	f006 f9e4 	bl	bb90e <digitalWrite>
  begun = true;
   b5546:	2301      	movs	r3, #1
   b5548:	7023      	strb	r3, [r4, #0]
}
   b554a:	bd10      	pop	{r4, pc}

000b554c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b554c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b554e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5550:	4605      	mov	r5, r0
   b5552:	460c      	mov	r4, r1
    if (begun) {
   b5554:	b11b      	cbz	r3, b555e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b5556:	79c0      	ldrb	r0, [r0, #7]
   b5558:	2100      	movs	r1, #0
   b555a:	f006 f9c7 	bl	bb8ec <pinMode>
    }
    pin = p;
    if (begun) {
   b555e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b5560:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b5562:	b15b      	cbz	r3, b557c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b5564:	b2a0      	uxth	r0, r4
   b5566:	2101      	movs	r1, #1
   b5568:	9001      	str	r0, [sp, #4]
   b556a:	f006 f9bf 	bl	bb8ec <pinMode>
        digitalWrite(p, LOW);
   b556e:	9801      	ldr	r0, [sp, #4]
   b5570:	2100      	movs	r1, #0
    }
}
   b5572:	b003      	add	sp, #12
   b5574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b5578:	f006 b9c9 	b.w	bb90e <digitalWrite>
}
   b557c:	b003      	add	sp, #12
   b557e:	bd30      	pop	{r4, r5, pc}

000b5580 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5580:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5582:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5584:	4604      	mov	r4, r0
   b5586:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5588:	7183      	strb	r3, [r0, #6]
   b558a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b558e:	7005      	strb	r5, [r0, #0]
   b5590:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b5592:	f7ff ffb1 	bl	b54f8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b5596:	4620      	mov	r0, r4
   b5598:	4631      	mov	r1, r6
   b559a:	f7ff ffd7 	bl	b554c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b559e:	4620      	mov	r0, r4
   b55a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b55a4 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b55a4:	68c3      	ldr	r3, [r0, #12]
   b55a6:	2b00      	cmp	r3, #0
   b55a8:	f000 81a4 	beq.w	b58f4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b55ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55b0:	7983      	ldrb	r3, [r0, #6]
   b55b2:	3b02      	subs	r3, #2
   b55b4:	b2db      	uxtb	r3, r3
   b55b6:	2b04      	cmp	r3, #4
   b55b8:	bf9c      	itt	ls
   b55ba:	4abf      	ldrls	r2, [pc, #764]	; (b58b8 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b55bc:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b55c0:	b085      	sub	sp, #20
   b55c2:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b55c4:	bf88      	it	hi
   b55c6:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b55c8:	f001 fa6e 	bl	b6aa8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b55cc:	692b      	ldr	r3, [r5, #16]
   b55ce:	1ac0      	subs	r0, r0, r3
   b55d0:	42a0      	cmp	r0, r4
   b55d2:	d3f9      	bcc.n	b55c8 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b55d4:	4cb9      	ldr	r4, [pc, #740]	; (b58bc <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b55d6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b55d8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b55dc:	b91b      	cbnz	r3, b55e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b55de:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b55e2:	2b00      	cmp	r3, #0
   b55e4:	db7e      	blt.n	b56e4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b55e6:	4cb6      	ldr	r4, [pc, #728]	; (b58c0 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b55e8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b55ec:	b923      	cbnz	r3, b55f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b55ee:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b55f2:	2b00      	cmp	r3, #0
   b55f4:	f2c0 816e 	blt.w	b58d4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b55f8:	4cb2      	ldr	r4, [pc, #712]	; (b58c4 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b55fa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b55fe:	2b00      	cmp	r3, #0
   b5600:	f000 8144 	beq.w	b588c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5604:	79eb      	ldrb	r3, [r5, #7]
   b5606:	4ab0      	ldr	r2, [pc, #704]	; (b58c8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5608:	4cb0      	ldr	r4, [pc, #704]	; (b58cc <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b560a:	6812      	ldr	r2, [r2, #0]
   b560c:	0119      	lsls	r1, r3, #4
   b560e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b5612:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5614:	49ae      	ldr	r1, [pc, #696]	; (b58d0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5616:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5618:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b561c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b5620:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5624:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5626:	f003 031f 	and.w	r3, r3, #31
   b562a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b562e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5630:	433a      	orrs	r2, r7
   b5632:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5634:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5636:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b563a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b563e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5640:	2900      	cmp	r1, #0
   b5642:	d044      	beq.n	b56ce <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5644:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5648:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b564a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b564e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5652:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5654:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5656:	6863      	ldr	r3, [r4, #4]
   b5658:	1a9b      	subs	r3, r3, r2
   b565a:	2b46      	cmp	r3, #70	; 0x46
   b565c:	d9fb      	bls.n	b5656 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b565e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5660:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5664:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5668:	ea43 0307 	orr.w	r3, r3, r7
   b566c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5670:	d02f      	beq.n	b56d2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5672:	6863      	ldr	r3, [r4, #4]
   b5674:	1a9b      	subs	r3, r3, r2
   b5676:	2b28      	cmp	r3, #40	; 0x28
   b5678:	d9fb      	bls.n	b5672 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b567a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b567e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5680:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5684:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5688:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b568c:	d1e3      	bne.n	b5656 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b568e:	88ab      	ldrh	r3, [r5, #4]
   b5690:	f10e 0e01 	add.w	lr, lr, #1
   b5694:	fa1f fe8e 	uxth.w	lr, lr
   b5698:	4573      	cmp	r3, lr
   b569a:	d8d8      	bhi.n	b564e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b569c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b56a0:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b56a4:	6863      	ldr	r3, [r4, #4]
   b56a6:	1a9b      	subs	r3, r3, r2
   b56a8:	2b46      	cmp	r3, #70	; 0x46
   b56aa:	d9fb      	bls.n	b56a4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b56ac:	6863      	ldr	r3, [r4, #4]
   b56ae:	eba3 0909 	sub.w	r9, r3, r9
   b56b2:	4589      	cmp	r9, r1
   b56b4:	f0c0 80e4 	bcc.w	b5880 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b56b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b56bc:	f001 f9ec 	bl	b6a98 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b56c0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b56c2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b56c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b56ca:	2900      	cmp	r1, #0
   b56cc:	d1ba      	bne.n	b5644 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b56ce:	460a      	mov	r2, r1
   b56d0:	e7e8      	b.n	b56a4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b56d2:	6863      	ldr	r3, [r4, #4]
   b56d4:	1a9b      	subs	r3, r3, r2
   b56d6:	2b11      	cmp	r3, #17
   b56d8:	d8cf      	bhi.n	b567a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b56da:	6863      	ldr	r3, [r4, #4]
   b56dc:	1a9b      	subs	r3, r3, r2
   b56de:	2b11      	cmp	r3, #17
   b56e0:	d9f7      	bls.n	b56d2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b56e2:	e7ca      	b.n	b567a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b56e4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b56e8:	2b00      	cmp	r3, #0
   b56ea:	f6bf af7c 	bge.w	b55e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b56ee:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b56f2:	2b00      	cmp	r3, #0
   b56f4:	f6bf af77 	bge.w	b55e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b56f8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b56fc:	2b00      	cmp	r3, #0
   b56fe:	f6bf af72 	bge.w	b55e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5702:	0136      	lsls	r6, r6, #4
   b5704:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5706:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5708:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b570a:	f001 fad1 	bl	b6cb0 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b570e:	2800      	cmp	r0, #0
   b5710:	f43f af78 	beq.w	b5604 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5714:	88ab      	ldrh	r3, [r5, #4]
   b5716:	2b00      	cmp	r3, #0
   b5718:	f000 80ed 	beq.w	b58f6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b571c:	68ea      	ldr	r2, [r5, #12]
   b571e:	3b01      	subs	r3, #1
   b5720:	fa12 f783 	uxtah	r7, r2, r3
   b5724:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b5728:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b572a:	f248 0206 	movw	r2, #32774	; 0x8006
   b572e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5732:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5736:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b573a:	bf0c      	ite	eq
   b573c:	4693      	moveq	fp, r2
   b573e:	468b      	movne	fp, r1
   b5740:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5744:	bf0c      	ite	eq
   b5746:	4616      	moveq	r6, r2
   b5748:	460e      	movne	r6, r1
   b574a:	f01c 0f20 	tst.w	ip, #32
   b574e:	bf0c      	ite	eq
   b5750:	4690      	moveq	r8, r2
   b5752:	4688      	movne	r8, r1
        pos++;
   b5754:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5758:	f8cd 8008 	str.w	r8, [sp, #8]
   b575c:	9601      	str	r6, [sp, #4]
        pos++;
   b575e:	f103 0802 	add.w	r8, r3, #2
   b5762:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5766:	9e01      	ldr	r6, [sp, #4]
   b5768:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b576c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5770:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5774:	9e02      	ldr	r6, [sp, #8]
   b5776:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b577a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b577e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5782:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5786:	bf0c      	ite	eq
   b5788:	4693      	moveq	fp, r2
   b578a:	468b      	movne	fp, r1
   b578c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5790:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5794:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5798:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b579c:	bf0c      	ite	eq
   b579e:	4693      	moveq	fp, r2
   b57a0:	468b      	movne	fp, r1
   b57a2:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b57a6:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57aa:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b57ae:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57b2:	bf0c      	ite	eq
   b57b4:	4693      	moveq	fp, r2
   b57b6:	468b      	movne	fp, r1
   b57b8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b57bc:	f103 0a08 	add.w	sl, r3, #8
   b57c0:	f103 0806 	add.w	r8, r3, #6
   b57c4:	3307      	adds	r3, #7
   b57c6:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57c8:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b57cc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57d0:	bf0c      	ite	eq
   b57d2:	4693      	moveq	fp, r2
   b57d4:	468b      	movne	fp, r1
        pos++;
   b57d6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57da:	f01c 0f01 	tst.w	ip, #1
   b57de:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b57e2:	bf15      	itete	ne
   b57e4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b57e8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b57ec:	fa1f f38a 	uxthne.w	r3, sl
   b57f0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b57f4:	4577      	cmp	r7, lr
   b57f6:	d19c      	bne.n	b5732 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b57f8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b57fa:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b57fc:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b57fe:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5800:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5802:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5804:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5808:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b580a:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b580c:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b580e:	4b2e      	ldr	r3, [pc, #184]	; (b58c8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5810:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5812:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5814:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5816:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5818:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b581c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5820:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5824:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5828:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b582c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5830:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5834:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5838:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b583c:	79eb      	ldrb	r3, [r5, #7]
   b583e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5842:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5844:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5846:	5cfe      	ldrb	r6, [r7, r3]
   b5848:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b584c:	f003 031f 	and.w	r3, r3, #31
   b5850:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5854:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5858:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b585c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5860:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5862:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5866:	2b00      	cmp	r3, #0
   b5868:	d0fb      	beq.n	b5862 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b586a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b586c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b5870:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5874:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5878:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b587c:	f001 fa20 	bl	b6cc0 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5880:	f001 f912 	bl	b6aa8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5884:	6128      	str	r0, [r5, #16]
}
   b5886:	b005      	add	sp, #20
   b5888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b588c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5890:	2b00      	cmp	r3, #0
   b5892:	f6bf aeb7 	bge.w	b5604 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5896:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b589a:	2b00      	cmp	r3, #0
   b589c:	f6bf aeb2 	bge.w	b5604 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58a0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58a4:	2b00      	cmp	r3, #0
   b58a6:	f6bf aead 	bge.w	b5604 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b58aa:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58ae:	2b00      	cmp	r3, #0
   b58b0:	f6bf aea8 	bge.w	b5604 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b58b4:	e725      	b.n	b5702 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b58b6:	bf00      	nop
   b58b8:	000bd7ec 	.word	0x000bd7ec
   b58bc:	4001c000 	.word	0x4001c000
   b58c0:	40021000 	.word	0x40021000
   b58c4:	40022000 	.word	0x40022000
   b58c8:	2003e67c 	.word	0x2003e67c
   b58cc:	e0001000 	.word	0xe0001000
   b58d0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58d4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58d8:	2b00      	cmp	r3, #0
   b58da:	f6bf ae8d 	bge.w	b55f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58de:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58e2:	2b00      	cmp	r3, #0
   b58e4:	f6bf ae88 	bge.w	b55f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b58e8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b58ec:	2b00      	cmp	r3, #0
   b58ee:	f6bf ae83 	bge.w	b55f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b58f2:	e706      	b.n	b5702 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b58f4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b58f6:	2304      	movs	r3, #4
   b58f8:	2102      	movs	r1, #2
   b58fa:	e783      	b.n	b5804 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b58fc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b58fc:	8843      	ldrh	r3, [r0, #2]
   b58fe:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b5900:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b5902:	d92d      	bls.n	b5960 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b5904:	7a06      	ldrb	r6, [r0, #8]
   b5906:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b590a:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b590e:	b2d5      	uxtb	r5, r2
   b5910:	b13e      	cbz	r6, b5922 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b5912:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b5914:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b5916:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b5918:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b591c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b5920:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b5922:	f890 c006 	ldrb.w	ip, [r0, #6]
   b5926:	68c7      	ldr	r7, [r0, #12]
   b5928:	f1bc 0f06 	cmp.w	ip, #6
   b592c:	bf0c      	ite	eq
   b592e:	2604      	moveq	r6, #4
   b5930:	2603      	movne	r6, #3
   b5932:	434e      	muls	r6, r1
   b5934:	f1ac 0c02 	sub.w	ip, ip, #2
   b5938:	19b9      	adds	r1, r7, r6
    switch(type) {
   b593a:	f1bc 0f06 	cmp.w	ip, #6
   b593e:	d81d      	bhi.n	b597c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b5940:	e8df f00c 	tbb	[pc, ip]
   b5944:	04081c04 	.word	0x04081c04
   b5948:	040f      	.short	0x040f
   b594a:	04          	.byte	0x04
   b594b:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b594c:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b594e:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b5950:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b5952:	e005      	b.n	b5960 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b5954:	2bfe      	cmp	r3, #254	; 0xfe
   b5956:	bf28      	it	cs
   b5958:	23fe      	movcs	r3, #254	; 0xfe
   b595a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b595c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b595e:	708c      	strb	r4, [r1, #2]
}
   b5960:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b5962:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5964:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b5966:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5968:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b596a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b596c:	b913      	cbnz	r3, b5974 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b596e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5970:	70ca      	strb	r2, [r1, #3]
        } break;
   b5972:	e7f5      	b.n	b5960 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5974:	435a      	muls	r2, r3
   b5976:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b597a:	e7f9      	b.n	b5970 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b597c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b597e:	704c      	strb	r4, [r1, #1]
   b5980:	e7e6      	b.n	b5950 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b5982 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
   b5982:	8840      	ldrh	r0, [r0, #2]
   b5984:	4770      	bx	lr

000b5986 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b5986:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b5988:	1c4a      	adds	r2, r1, #1
   b598a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b598c:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b598e:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b5990:	d01f      	beq.n	b59d2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b5992:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5994:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b5998:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b599a:	d00c      	beq.n	b59b6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b599c:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b599e:	bf1f      	itttt	ne
   b59a0:	0211      	lslne	r1, r2, #8
   b59a2:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b59a6:	fbb1 f3f3 	udivne	r3, r1, r3
   b59aa:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b59ac:	bf04      	itt	eq
   b59ae:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b59b2:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b59b6:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b59b8:	8886      	ldrh	r6, [r0, #4]
   b59ba:	1b29      	subs	r1, r5, r4
   b59bc:	b289      	uxth	r1, r1
   b59be:	428e      	cmp	r6, r1
   b59c0:	d906      	bls.n	b59d0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b59c2:	7829      	ldrb	r1, [r5, #0]
   b59c4:	4359      	muls	r1, r3
   b59c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b59ca:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b59ce:	e7f3      	b.n	b59b8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b59d0:	7202      	strb	r2, [r0, #8]
  }
}
   b59d2:	bd70      	pop	{r4, r5, r6, pc}

000b59d4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b59d4:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b59d6:	f001 f87f 	bl	b6ad8 <HAL_Pin_Map>
   b59da:	4b01      	ldr	r3, [pc, #4]	; (b59e0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b59dc:	6018      	str	r0, [r3, #0]
}
   b59de:	bd08      	pop	{r3, pc}
   b59e0:	2003e67c 	.word	0x2003e67c

000b59e4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b59e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59e8:	b085      	sub	sp, #20
   b59ea:	461f      	mov	r7, r3
   b59ec:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b59f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b59f4:	eba8 0902 	sub.w	r9, r8, r2
   b59f8:	eba7 0a01 	sub.w	sl, r7, r1
   b59fc:	f1b9 0f00 	cmp.w	r9, #0
   b5a00:	bfb8      	it	lt
   b5a02:	f1c9 0900 	rsblt	r9, r9, #0
   b5a06:	f1ba 0f00 	cmp.w	sl, #0
   b5a0a:	bfb8      	it	lt
   b5a0c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5a10:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5a12:	4683      	mov	fp, r0
   b5a14:	460c      	mov	r4, r1
   b5a16:	4615      	mov	r5, r2
  if (steep) {
   b5a18:	dd04      	ble.n	b5a24 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5a1a:	463a      	mov	r2, r7
    swap(x0, y0);
   b5a1c:	462c      	mov	r4, r5
    swap(x1, y1);
   b5a1e:	4647      	mov	r7, r8
    swap(x0, y0);
   b5a20:	460d      	mov	r5, r1
    swap(x1, y1);
   b5a22:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5a24:	42bc      	cmp	r4, r7
   b5a26:	dd05      	ble.n	b5a34 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5a28:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5a2a:	4645      	mov	r5, r8
   b5a2c:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5a2e:	4622      	mov	r2, r4
   b5a30:	463c      	mov	r4, r7
   b5a32:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5a34:	1b3e      	subs	r6, r7, r4
   b5a36:	b2b2      	uxth	r2, r6
   b5a38:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5a3a:	eba8 0205 	sub.w	r2, r8, r5
   b5a3e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5a42:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5a46:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5a4a:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5a4e:	4545      	cmp	r5, r8
   b5a50:	bfb4      	ite	lt
   b5a52:	2201      	movlt	r2, #1
   b5a54:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b5a58:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5a5a:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5a5c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b5a5e:	42bc      	cmp	r4, r7
   b5a60:	dc1c      	bgt.n	b5a9c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b5a62:	f8db 2000 	ldr.w	r2, [fp]
   b5a66:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5a68:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5a6a:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5a6e:	bfc7      	ittee	gt
   b5a70:	4629      	movgt	r1, r5
   b5a72:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5a74:	462a      	movle	r2, r5
   b5a76:	4621      	movle	r1, r4
   b5a78:	4658      	mov	r0, fp
   b5a7a:	47c0      	blx	r8
    }
    err -= dy;
   b5a7c:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5a7e:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5a80:	1ab6      	subs	r6, r6, r2
   b5a82:	b2b1      	uxth	r1, r6
   b5a84:	b236      	sxth	r6, r6
    if (err < 0) {
   b5a86:	2e00      	cmp	r6, #0
   b5a88:	da05      	bge.n	b5a96 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5a8a:	9a02      	ldr	r2, [sp, #8]
   b5a8c:	4415      	add	r5, r2
      err += dx;
   b5a8e:	9a00      	ldr	r2, [sp, #0]
   b5a90:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b5a92:	b22d      	sxth	r5, r5
      err += dx;
   b5a94:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5a96:	3401      	adds	r4, #1
   b5a98:	b224      	sxth	r4, r4
   b5a9a:	e7e0      	b.n	b5a5e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5a9c:	b005      	add	sp, #20
   b5a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5aa2 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b5aa2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5aa6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5aaa:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5aac:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5ab0:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5ab4:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5ab6:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5ab8:	4616      	mov	r6, r2
   b5aba:	468a      	mov	sl, r1
   b5abc:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5abe:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5ac0:	6823      	ldr	r3, [r4, #0]
   b5ac2:	f8cd 8000 	str.w	r8, [sp]
   b5ac6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5aca:	4432      	add	r2, r6
   b5acc:	69df      	ldr	r7, [r3, #28]
   b5ace:	4651      	mov	r1, sl
   b5ad0:	462b      	mov	r3, r5
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	b212      	sxth	r2, r2
   b5ad6:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5ad8:	6823      	ldr	r3, [r4, #0]
   b5ada:	f8cd 8000 	str.w	r8, [sp]
   b5ade:	699f      	ldr	r7, [r3, #24]
   b5ae0:	4632      	mov	r2, r6
   b5ae2:	464b      	mov	r3, r9
   b5ae4:	4651      	mov	r1, sl
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5aea:	1e6b      	subs	r3, r5, #1
   b5aec:	eb03 010a 	add.w	r1, r3, sl
   b5af0:	6823      	ldr	r3, [r4, #0]
   b5af2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5af6:	699d      	ldr	r5, [r3, #24]
   b5af8:	4632      	mov	r2, r6
   b5afa:	464b      	mov	r3, r9
   b5afc:	b209      	sxth	r1, r1
   b5afe:	4620      	mov	r0, r4
   b5b00:	46ac      	mov	ip, r5
}
   b5b02:	b002      	add	sp, #8
   b5b04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5b08:	4760      	bx	ip

000b5b0a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5b0c:	3b01      	subs	r3, #1
   b5b0e:	4413      	add	r3, r2
   b5b10:	6804      	ldr	r4, [r0, #0]
   b5b12:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5b16:	9501      	str	r5, [sp, #4]
   b5b18:	b21b      	sxth	r3, r3
   b5b1a:	9300      	str	r3, [sp, #0]
   b5b1c:	6964      	ldr	r4, [r4, #20]
   b5b1e:	460b      	mov	r3, r1
   b5b20:	47a0      	blx	r4
}
   b5b22:	b003      	add	sp, #12
   b5b24:	bd30      	pop	{r4, r5, pc}

000b5b26 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5b26:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5b28:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5b2c:	6804      	ldr	r4, [r0, #0]
   b5b2e:	e9cd 2500 	strd	r2, r5, [sp]
   b5b32:	3b01      	subs	r3, #1
   b5b34:	440b      	add	r3, r1
   b5b36:	6964      	ldr	r4, [r4, #20]
   b5b38:	b21b      	sxth	r3, r3
   b5b3a:	47a0      	blx	r4
}
   b5b3c:	b003      	add	sp, #12
   b5b3e:	bd30      	pop	{r4, r5, pc}

000b5b40 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5b40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5b44:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5b48:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5b4c:	4605      	mov	r5, r0
   b5b4e:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5b50:	460c      	mov	r4, r1
   b5b52:	18ce      	adds	r6, r1, r3
   b5b54:	42b4      	cmp	r4, r6
   b5b56:	da0b      	bge.n	b5b70 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5b58:	682b      	ldr	r3, [r5, #0]
   b5b5a:	f8cd 8000 	str.w	r8, [sp]
   b5b5e:	699f      	ldr	r7, [r3, #24]
   b5b60:	4621      	mov	r1, r4
   b5b62:	464b      	mov	r3, r9
   b5b64:	4652      	mov	r2, sl
   b5b66:	4628      	mov	r0, r5
   b5b68:	3401      	adds	r4, #1
   b5b6a:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5b6c:	b224      	sxth	r4, r4
   b5b6e:	e7f1      	b.n	b5b54 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5b70:	b002      	add	sp, #8
   b5b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5b76 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5b76:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5b78:	6802      	ldr	r2, [r0, #0]
   b5b7a:	9101      	str	r1, [sp, #4]
   b5b7c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5b80:	9100      	str	r1, [sp, #0]
   b5b82:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5b84:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5b88:	2200      	movs	r2, #0
   b5b8a:	4611      	mov	r1, r2
   b5b8c:	47a0      	blx	r4
}
   b5b8e:	b002      	add	sp, #8
   b5b90:	bd10      	pop	{r4, pc}

000b5b92 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b5b92:	4770      	bx	lr

000b5b94 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5b94:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5b96:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5b98:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b5b9e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5ba0:	4d05      	ldr	r5, [pc, #20]	; (b5bb8 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5ba2:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5ba4:	2201      	movs	r2, #1
   b5ba6:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5ba8:	6005      	str	r5, [r0, #0]
   b5baa:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5bac:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5bae:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5bb0:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b5bb2:	7682      	strb	r2, [r0, #26]
}
   b5bb4:	bd30      	pop	{r4, r5, pc}
   b5bb6:	bf00      	nop
   b5bb8:	000bdd04 	.word	0x000bdd04

000b5bbc <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bc0:	ed2d 8b02 	vpush	{d8}
   b5bc4:	b08d      	sub	sp, #52	; 0x34
   b5bc6:	4607      	mov	r7, r0
   b5bc8:	9104      	str	r1, [sp, #16]
   b5bca:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5bce:	9105      	str	r1, [sp, #20]
   b5bd0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5bd4:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5bd6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5bda:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5bdc:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5be0:	4281      	cmp	r1, r0
   b5be2:	dd52      	ble.n	b5c8a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5be4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5be8:	4291      	cmp	r1, r2
   b5bea:	dd4e      	ble.n	b5c8a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5bec:	2106      	movs	r1, #6
   b5bee:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5bf2:	2c00      	cmp	r4, #0
   b5bf4:	dd49      	ble.n	b5c8a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5bf6:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5bfa:	2c00      	cmp	r4, #0
   b5bfc:	dd45      	ble.n	b5c8a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5bfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5c02:	930b      	str	r3, [sp, #44]	; 0x2c
   b5c04:	b293      	uxth	r3, r2
   b5c06:	9307      	str	r3, [sp, #28]
   b5c08:	3308      	adds	r3, #8
   b5c0a:	b29b      	uxth	r3, r3
   b5c0c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5c0e:	2400      	movs	r4, #0
   b5c10:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5c12:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5c14:	bf1c      	itt	ne
   b5c16:	4b2c      	ldrne	r3, [pc, #176]	; (b5cc8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5c18:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5c1a:	9e07      	ldr	r6, [sp, #28]
   b5c1c:	bf16      	itet	ne
   b5c1e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5c20:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5c22:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5c24:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5c26:	9a04      	ldr	r2, [sp, #16]
   b5c28:	b2ab      	uxth	r3, r5
   b5c2a:	930a      	str	r3, [sp, #40]	; 0x28
   b5c2c:	fb04 f305 	mul.w	r3, r4, r5
   b5c30:	fa13 f382 	uxtah	r3, r3, r2
   b5c34:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5c36:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5c3a:	ee08 3a10 	vmov	s16, r3
   b5c3e:	46b0      	mov	r8, r6
   b5c40:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5c44:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5c48:	9b03      	ldr	r3, [sp, #12]
   b5c4a:	07db      	lsls	r3, r3, #31
   b5c4c:	d52f      	bpl.n	b5cae <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5c4e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5c50:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5c52:	d11f      	bne.n	b5c94 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5c54:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5c58:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5c5a:	b232      	sxth	r2, r6
   b5c5c:	4651      	mov	r1, sl
   b5c5e:	4638      	mov	r0, r7
   b5c60:	47d8      	blx	fp
      line >>= 1;
   b5c62:	9b03      	ldr	r3, [sp, #12]
   b5c64:	085b      	lsrs	r3, r3, #1
   b5c66:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5c6a:	3601      	adds	r6, #1
   b5c6c:	4498      	add	r8, r3
   b5c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5c70:	b2b6      	uxth	r6, r6
   b5c72:	42b3      	cmp	r3, r6
   b5c74:	fa1f f888 	uxth.w	r8, r8
   b5c78:	d1e6      	bne.n	b5c48 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5c7a:	9b08      	ldr	r3, [sp, #32]
   b5c7c:	3b01      	subs	r3, #1
   b5c7e:	3401      	adds	r4, #1
   b5c80:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5c84:	b264      	sxtb	r4, r4
   b5c86:	9308      	str	r3, [sp, #32]
   b5c88:	d1c3      	bne.n	b5c12 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5c8a:	b00d      	add	sp, #52	; 0x34
   b5c8c:	ecbd 8b02 	vpop	{d8}
   b5c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5c94:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5c96:	e9cd 9200 	strd	r9, r2, [sp]
   b5c9a:	ee18 1a10 	vmov	r1, s16
   b5c9e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5ca2:	fa0f f288 	sxth.w	r2, r8
   b5ca6:	464b      	mov	r3, r9
   b5ca8:	4638      	mov	r0, r7
   b5caa:	47d8      	blx	fp
   b5cac:	e7d9      	b.n	b5c62 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5cae:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5cb2:	4293      	cmp	r3, r2
   b5cb4:	d0d5      	beq.n	b5c62 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5cb6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5cb8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5cba:	d103      	bne.n	b5cc4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5cbc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5cc0:	9b06      	ldr	r3, [sp, #24]
   b5cc2:	e7ca      	b.n	b5c5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5cc4:	9a06      	ldr	r2, [sp, #24]
   b5cc6:	e7e6      	b.n	b5c96 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5cc8:	000bd800 	.word	0x000bd800

000b5ccc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5ccc:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5cce:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5cd0:	b085      	sub	sp, #20
   b5cd2:	4604      	mov	r4, r0
  if (c == '\n') {
   b5cd4:	d107      	bne.n	b5ce6 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5cd6:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5cd8:	8a63      	ldrh	r3, [r4, #18]
   b5cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5cde:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5ce0:	2300      	movs	r3, #0
   b5ce2:	8223      	strh	r3, [r4, #16]
   b5ce4:	e021      	b.n	b5d2a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5ce6:	290d      	cmp	r1, #13
   b5ce8:	d01f      	beq.n	b5d2a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5cea:	7e03      	ldrb	r3, [r0, #24]
   b5cec:	9302      	str	r3, [sp, #8]
   b5cee:	8ac3      	ldrh	r3, [r0, #22]
   b5cf0:	9301      	str	r3, [sp, #4]
   b5cf2:	8a83      	ldrh	r3, [r0, #20]
   b5cf4:	9300      	str	r3, [sp, #0]
   b5cf6:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5cfa:	460b      	mov	r3, r1
   b5cfc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5d00:	f7ff ff5c 	bl	b5bbc <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5d04:	7e20      	ldrb	r0, [r4, #24]
   b5d06:	8a23      	ldrh	r3, [r4, #16]
   b5d08:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5d0c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5d10:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5d12:	b21b      	sxth	r3, r3
   b5d14:	4602      	mov	r2, r0
   b5d16:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5d18:	b139      	cbz	r1, b5d2a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5d1a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5d1e:	f06f 0505 	mvn.w	r5, #5
   b5d22:	fb05 1100 	mla	r1, r5, r0, r1
   b5d26:	428b      	cmp	r3, r1
   b5d28:	dcd6      	bgt.n	b5cd8 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5d2a:	2001      	movs	r0, #1
   b5d2c:	b005      	add	sp, #20
   b5d2e:	bd30      	pop	{r4, r5, pc}

000b5d30 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5d30:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5d32:	8242      	strh	r2, [r0, #18]
}
   b5d34:	4770      	bx	lr

000b5d36 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5d36:	2901      	cmp	r1, #1
   b5d38:	bf38      	it	cc
   b5d3a:	2101      	movcc	r1, #1
   b5d3c:	7601      	strb	r1, [r0, #24]
}
   b5d3e:	4770      	bx	lr

000b5d40 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5d40:	82c1      	strh	r1, [r0, #22]
   b5d42:	8281      	strh	r1, [r0, #20]
}
   b5d44:	4770      	bx	lr

000b5d46 <_ZN12Adafruit_GFX11setTextWrapEb>:
  wrap = w;
   b5d46:	7681      	strb	r1, [r0, #26]
}
   b5d48:	4770      	bx	lr

000b5d4a <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5d4a:	6803      	ldr	r3, [r0, #0]
   b5d4c:	b2c9      	uxtb	r1, r1
   b5d4e:	689b      	ldr	r3, [r3, #8]
   b5d50:	4718      	bx	r3

000b5d52 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>:
0b0010010010001001, // }
0b0000010100100000, // ~
0b0011111111111111,

};
void Adafruit_LEDBackpack::setBrightness(uint8_t b) {
   b5d52:	b538      	push	{r3, r4, r5, lr}
   b5d54:	4605      	mov	r5, r0
   b5d56:	460c      	mov	r4, r1
  if (b > 15) b = 15;
  Wire.beginTransmission(i2c_addr);
   b5d58:	f005 fd26 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5d5c:	7c29      	ldrb	r1, [r5, #16]
   b5d5e:	f001 fe5f 	bl	b7a20 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(HT16K33_CMD_BRIGHTNESS | b);
   b5d62:	f005 fd21 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5d66:	2c0f      	cmp	r4, #15
   b5d68:	bf28      	it	cs
   b5d6a:	240f      	movcs	r4, #15
   b5d6c:	f044 01e0 	orr.w	r1, r4, #224	; 0xe0
   b5d70:	f7ff ffeb 	bl	b5d4a <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b5d74:	f005 fd18 	bl	bb7a8 <_Z19__fetch_global_Wirev>
}
   b5d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b5d7c:	f001 be58 	b.w	b7a30 <_ZN7TwoWire15endTransmissionEv>

000b5d80 <_ZN20Adafruit_LEDBackpack9blinkRateEh>:

void Adafruit_LEDBackpack::blinkRate(uint8_t b) {
   b5d80:	b538      	push	{r3, r4, r5, lr}
   b5d82:	4605      	mov	r5, r0
   b5d84:	460c      	mov	r4, r1
  Wire.beginTransmission(i2c_addr);
   b5d86:	f005 fd0f 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5d8a:	7c29      	ldrb	r1, [r5, #16]
   b5d8c:	f001 fe48 	bl	b7a20 <_ZN7TwoWire17beginTransmissionEh>
  if (b > 3) b = 0; // turn off if not sure
   b5d90:	2c04      	cmp	r4, #4
   b5d92:	bf28      	it	cs
   b5d94:	2400      	movcs	r4, #0

  Wire.write(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
   b5d96:	f005 fd07 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5d9a:	0061      	lsls	r1, r4, #1
   b5d9c:	f041 0181 	orr.w	r1, r1, #129	; 0x81
   b5da0:	f7ff ffd3 	bl	b5d4a <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b5da4:	f005 fd00 	bl	bb7a8 <_Z19__fetch_global_Wirev>
}
   b5da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b5dac:	f001 be40 	b.w	b7a30 <_ZN7TwoWire15endTransmissionEv>

000b5db0 <_ZN20Adafruit_LEDBackpack5beginEh>:

Adafruit_LEDBackpack::Adafruit_LEDBackpack(void) {
}

void Adafruit_LEDBackpack::begin(uint8_t _addr = 0x70) {
   b5db0:	b510      	push	{r4, lr}
   b5db2:	4604      	mov	r4, r0
  i2c_addr = _addr;
   b5db4:	7401      	strb	r1, [r0, #16]

  Wire.begin();
   b5db6:	f005 fcf7 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5dba:	f001 fe2b 	bl	b7a14 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(i2c_addr);
   b5dbe:	f005 fcf3 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5dc2:	7c21      	ldrb	r1, [r4, #16]
   b5dc4:	f001 fe2c 	bl	b7a20 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x21);  // turn on oscillator
   b5dc8:	f005 fcee 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5dcc:	2121      	movs	r1, #33	; 0x21
   b5dce:	f7ff ffbc 	bl	b5d4a <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b5dd2:	f005 fce9 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5dd6:	f001 fe2b 	bl	b7a30 <_ZN7TwoWire15endTransmissionEv>
  blinkRate(HT16K33_BLINK_OFF);
   b5dda:	4620      	mov	r0, r4
   b5ddc:	2100      	movs	r1, #0
   b5dde:	f7ff ffcf 	bl	b5d80 <_ZN20Adafruit_LEDBackpack9blinkRateEh>

  setBrightness(15); // max brightness
   b5de2:	4620      	mov	r0, r4
   b5de4:	210f      	movs	r1, #15
}
   b5de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setBrightness(15); // max brightness
   b5dea:	f7ff bfb2 	b.w	b5d52 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>

000b5dee <_ZN20Adafruit_LEDBackpack12writeDisplayEv>:

void Adafruit_LEDBackpack::writeDisplay(void) {
   b5dee:	b538      	push	{r3, r4, r5, lr}
   b5df0:	4604      	mov	r4, r0
  Wire.beginTransmission(i2c_addr);
   b5df2:	f005 fcd9 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5df6:	7c21      	ldrb	r1, [r4, #16]
   b5df8:	f001 fe12 	bl	b7a20 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)0x00); // start at address $00
   b5dfc:	f005 fcd4 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5e00:	6803      	ldr	r3, [r0, #0]
   b5e02:	2100      	movs	r1, #0
   b5e04:	689b      	ldr	r3, [r3, #8]
   b5e06:	4798      	blx	r3

  for (uint8_t i=0; i<8; i++) {
   b5e08:	1ea5      	subs	r5, r4, #2
   b5e0a:	340e      	adds	r4, #14
    Wire.write(displaybuffer[i] & 0xFF);
   b5e0c:	f005 fccc 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5e10:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   b5e14:	b2c9      	uxtb	r1, r1
   b5e16:	f7ff ff98 	bl	b5d4a <_ZN7TwoWire5writeEi.isra.0>
    Wire.write(displaybuffer[i] >> 8);
   b5e1a:	f005 fcc5 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   b5e1e:	8829      	ldrh	r1, [r5, #0]
   b5e20:	0a09      	lsrs	r1, r1, #8
   b5e22:	f7ff ff92 	bl	b5d4a <_ZN7TwoWire5writeEi.isra.0>
  for (uint8_t i=0; i<8; i++) {
   b5e26:	42a5      	cmp	r5, r4
   b5e28:	d1f0      	bne.n	b5e0c <_ZN20Adafruit_LEDBackpack12writeDisplayEv+0x1e>
  }
  Wire.endTransmission();
   b5e2a:	f005 fcbd 	bl	bb7a8 <_Z19__fetch_global_Wirev>
}
   b5e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b5e32:	f001 bdfd 	b.w	b7a30 <_ZN7TwoWire15endTransmissionEv>

000b5e36 <_ZN18Adafruit_AlphaNum4C1Ev>:

/******************************* QUAD ALPHANUM OBJECT */

Adafruit_AlphaNum4::Adafruit_AlphaNum4(void) {

}
   b5e36:	4770      	bx	lr

000b5e38 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>:

void Adafruit_AlphaNum4::writeDigitRaw(uint8_t n, uint16_t bitmask) {
  displaybuffer[n] = bitmask;
}

void Adafruit_AlphaNum4::writeDigitAscii(uint8_t n, uint8_t a,  boolean d) {
   b5e38:	b510      	push	{r4, lr}
  uint16_t font = alphafonttable[a];
   b5e3a:	4c05      	ldr	r4, [pc, #20]	; (b5e50 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb+0x18>)
   b5e3c:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  Serial.print(a, DEC);
  Serial.print(" / '"); Serial.write(a);
  Serial.print("' = 0x"); Serial.println(font, HEX);
  */

  if (d) displaybuffer[n] |= (1<<14);
   b5e40:	b913      	cbnz	r3, b5e48 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb+0x10>
   b5e42:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
}
   b5e46:	bd10      	pop	{r4, pc}
  if (d) displaybuffer[n] |= (1<<14);
   b5e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   b5e4c:	e7f9      	b.n	b5e42 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb+0xa>
   b5e4e:	bf00      	nop
   b5e50:	000bdd34 	.word	0x000bdd34

000b5e54 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5e54:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5e58:	b510      	push	{r4, lr}
   b5e5a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5e5c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5e5e:	b113      	cbz	r3, b5e66 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5e60:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5e62:	f000 fd81 	bl	b6968 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5e66:	4620      	mov	r0, r4
   b5e68:	bd10      	pop	{r4, pc}

000b5e6a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5e6a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5e6c:	6803      	ldr	r3, [r0, #0]
   b5e6e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5e72:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5e74:	b112      	cbz	r2, b5e7c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5e76:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5e78:	f000 fd7e 	bl	b6978 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5e7c:	4620      	mov	r0, r4
   b5e7e:	bd10      	pop	{r4, pc}

000b5e80 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e82:	461f      	mov	r7, r3
   b5e84:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5e88:	4604      	mov	r4, r0
   b5e8a:	460d      	mov	r5, r1
   b5e8c:	4616      	mov	r6, r2
    if (thread) {
   b5e8e:	b12b      	cbz	r3, b5e9c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5e90:	2301      	movs	r3, #1
   b5e92:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5e96:	3058      	adds	r0, #88	; 0x58
   b5e98:	f000 fd5e 	bl	b6958 <os_mutex_create>
    }
    this->callback = callback;
   b5e9c:	9b08      	ldr	r3, [sp, #32]
   b5e9e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5ea0:	2300      	movs	r3, #0
   b5ea2:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5ea4:	b106      	cbz	r6, b5ea8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5ea6:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5ea8:	b125      	cbz	r5, b5eb4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5eaa:	4629      	mov	r1, r5
   b5eac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5eb0:	f005 faeb 	bl	bb48a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5eb4:	9b06      	ldr	r3, [sp, #24]
   b5eb6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5eb8:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5eba:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5ebc:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5ec0:	2bff      	cmp	r3, #255	; 0xff
   b5ec2:	bfb8      	it	lt
   b5ec4:	23ff      	movlt	r3, #255	; 0xff
   b5ec6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5eca:	b108      	cbz	r0, b5ed0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5ecc:	f7fe f8e7 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5ed0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5ed4:	f7fe f8e1 	bl	b409a <_Znaj>
   b5ed8:	61e0      	str	r0, [r4, #28]
}
   b5eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5edc <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5edc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5ee0:	4604      	mov	r4, r0
            bool thread) {
   b5ee2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5ee4:	4617      	mov	r7, r2
   b5ee6:	4698      	mov	r8, r3
   b5ee8:	460e      	mov	r6, r1
            bool thread) {
   b5eea:	f001 fce1 	bl	b78b0 <_ZN9TCPClientC1Ev>
   b5eee:	490d      	ldr	r1, [pc, #52]	; (b5f24 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b5ef0:	61e5      	str	r5, [r4, #28]
   b5ef2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5ef6:	f005 fa72 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5efa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b5efe:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5f00:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5f04:	22ff      	movs	r2, #255	; 0xff
   b5f06:	230f      	movs	r3, #15
   b5f08:	e9cd 3200 	strd	r3, r2, [sp]
   b5f0c:	4620      	mov	r0, r4
            bool thread) {
   b5f0e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5f12:	463b      	mov	r3, r7
   b5f14:	462a      	mov	r2, r5
   b5f16:	4631      	mov	r1, r6
   b5f18:	f7ff ffb2 	bl	b5e80 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	b004      	add	sp, #16
   b5f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f24:	000be05f 	.word	0x000be05f

000b5f28 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5f28:	b510      	push	{r4, lr}
   b5f2a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	f001 fc1b 	bl	b7768 <_ZN9TCPClient9availableEv>
   b5f32:	2800      	cmp	r0, #0
   b5f34:	d0fa      	beq.n	b5f2c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5f36:	4620      	mov	r0, r4
   b5f38:	f001 fa00 	bl	b733c <_ZN9TCPClient4readEv>
}
   b5f3c:	b2c0      	uxtb	r0, r0
   b5f3e:	bd10      	pop	{r4, pc}

000b5f40 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f44:	4605      	mov	r5, r0
   b5f46:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5f48:	f7ff ffee 	bl	b5f28 <_ZN4MQTT8readByteEv>
   b5f4c:	69eb      	ldr	r3, [r5, #28]
   b5f4e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5f50:	69eb      	ldr	r3, [r5, #28]
   b5f52:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5f56:	f04f 0901 	mov.w	r9, #1
   b5f5a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5f5e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5f60:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5f62:	4628      	mov	r0, r5
   b5f64:	f7ff ffe0 	bl	b5f28 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5f68:	4626      	mov	r6, r4
   b5f6a:	69eb      	ldr	r3, [r5, #28]
   b5f6c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5f6e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5f72:	fb13 f309 	smulbb	r3, r3, r9
   b5f76:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5f78:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5f7a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5f7c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5f7e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5f80:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5f84:	d4ed      	bmi.n	b5f62 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5f86:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5f88:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5f8c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5f90:	d11e      	bne.n	b5fd0 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b5f92:	4628      	mov	r0, r5
   b5f94:	f7ff ffc8 	bl	b5f28 <_ZN4MQTT8readByteEv>
   b5f98:	69eb      	ldr	r3, [r5, #28]
   b5f9a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5f9c:	4628      	mov	r0, r5
   b5f9e:	f7ff ffc3 	bl	b5f28 <_ZN4MQTT8readByteEv>
   b5fa2:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5fa4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5fa6:	b2b6      	uxth	r6, r6
   b5fa8:	69eb      	ldr	r3, [r5, #28]
   b5faa:	b2a4      	uxth	r4, r4
   b5fac:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5fae:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5fb0:	b2b6      	uxth	r6, r6
   b5fb2:	42be      	cmp	r6, r7
   b5fb4:	d20e      	bcs.n	b5fd4 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5fb6:	4628      	mov	r0, r5
   b5fb8:	f7ff ffb6 	bl	b5f28 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5fbc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5fc0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b5fc2:	bf84      	itt	hi
   b5fc4:	69eb      	ldrhi	r3, [r5, #28]
   b5fc6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5fc8:	3401      	adds	r4, #1
   b5fca:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5fcc:	3601      	adds	r6, #1
   b5fce:	e7ef      	b.n	b5fb0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5fd0:	2600      	movs	r6, #0
   b5fd2:	e7ed      	b.n	b5fb0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5fd4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5fd8:	42a3      	cmp	r3, r4
   b5fda:	bf2c      	ite	cs
   b5fdc:	4620      	movcs	r0, r4
   b5fde:	2000      	movcc	r0, #0
   b5fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5fe4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5fe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5fe8:	4615      	mov	r5, r2
   b5fea:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5fec:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5fee:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5ff0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5ff2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5ff4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5ff6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5ffa:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5ffe:	f103 0401 	add.w	r4, r3, #1
   b6002:	4403      	add	r3, r0
            digit |= 0x80;
   b6004:	bf88      	it	hi
   b6006:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b600a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b600e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6012:	b2e4      	uxtb	r4, r4
   b6014:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6018:	d81e      	bhi.n	b6058 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b601a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b601e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6022:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6024:	4622      	mov	r2, r4
   b6026:	a901      	add	r1, sp, #4
   b6028:	4428      	add	r0, r5
    buf[4-llen] = header;
   b602a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b602e:	f006 fa91 	bl	bc554 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b6032:	1c72      	adds	r2, r6, #1
   b6034:	4422      	add	r2, r4
   b6036:	4641      	mov	r1, r8
   b6038:	4638      	mov	r0, r7
   b603a:	f001 f96a 	bl	b7312 <_ZN9TCPClient5writeEPKhj>
   b603e:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6040:	f000 fd3a 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b6044:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b6046:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6048:	4432      	add	r2, r6
   b604a:	b2a8      	uxth	r0, r5
}
   b604c:	1a13      	subs	r3, r2, r0
   b604e:	4258      	negs	r0, r3
   b6050:	4158      	adcs	r0, r3
   b6052:	b002      	add	sp, #8
   b6054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6058:	4623      	mov	r3, r4
   b605a:	e7ca      	b.n	b5ff2 <_ZN4MQTT5writeEhPht+0xe>

000b605c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b605c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b605e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6060:	4605      	mov	r5, r0
    pos += 2;
   b6062:	b298      	uxth	r0, r3
   b6064:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b6066:	5cce      	ldrb	r6, [r1, r3]
   b6068:	b29c      	uxth	r4, r3
   b606a:	b156      	cbz	r6, b6082 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b606c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6070:	4584      	cmp	ip, r0
   b6072:	f103 0701 	add.w	r7, r3, #1
   b6076:	d904      	bls.n	b6082 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b6078:	1c44      	adds	r4, r0, #1
   b607a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b607c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b607e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6080:	e7f1      	b.n	b6066 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b6082:	b299      	uxth	r1, r3
   b6084:	1a41      	subs	r1, r0, r1
   b6086:	440a      	add	r2, r1
   b6088:	0a21      	lsrs	r1, r4, #8
   b608a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b608e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6092:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6094 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6094:	b538      	push	{r3, r4, r5, lr}
   b6096:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6098:	f001 fa88 	bl	b75ac <_ZN9TCPClient9connectedEv>
   b609c:	2800      	cmp	r0, #0
   b609e:	bf14      	ite	ne
   b60a0:	2501      	movne	r5, #1
   b60a2:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b60a4:	d102      	bne.n	b60ac <_ZN4MQTT11isConnectedEv+0x18>
   b60a6:	4620      	mov	r0, r4
   b60a8:	f001 fbb8 	bl	b781c <_ZN9TCPClient4stopEv>
    return rc;
}
   b60ac:	4628      	mov	r0, r5
   b60ae:	bd38      	pop	{r3, r4, r5, pc}

000b60b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b60b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b60b4:	b088      	sub	sp, #32
   b60b6:	4604      	mov	r4, r0
   b60b8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b60bc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b60c0:	4689      	mov	r9, r1
   b60c2:	4617      	mov	r7, r2
   b60c4:	461e      	mov	r6, r3
    if (!isConnected()) {
   b60c6:	f7ff ffe5 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b60ca:	4605      	mov	r5, r0
   b60cc:	2800      	cmp	r0, #0
   b60ce:	f040 80cd 	bne.w	b626c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b60d2:	4621      	mov	r1, r4
   b60d4:	a801      	add	r0, sp, #4
   b60d6:	f7ff febd 	bl	b5e54 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b60da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b60dc:	2900      	cmp	r1, #0
   b60de:	f040 8088 	bne.w	b61f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b60e2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b60e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b60e8:	462b      	mov	r3, r5
   b60ea:	4620      	mov	r0, r4
   b60ec:	f001 f9e0 	bl	b74b0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b60f0:	2800      	cmp	r0, #0
   b60f2:	d07a      	beq.n	b61ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b60f4:	2301      	movs	r3, #1
   b60f6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b60f8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b60fc:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b60fe:	2b04      	cmp	r3, #4
   b6100:	4b5b      	ldr	r3, [pc, #364]	; (b6270 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6102:	f040 8081 	bne.w	b6208 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6106:	6818      	ldr	r0, [r3, #0]
   b6108:	8899      	ldrh	r1, [r3, #4]
   b610a:	799b      	ldrb	r3, [r3, #6]
   b610c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6110:	f88d 300e 	strb.w	r3, [sp, #14]
   b6114:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6116:	f8c2 0005 	str.w	r0, [r2, #5]
   b611a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b611e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6122:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6126:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6128:	230c      	movs	r3, #12
            if (willTopic) {
   b612a:	f1b8 0f00 	cmp.w	r8, #0
   b612e:	f000 8081 	beq.w	b6234 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6132:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b6136:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b613a:	0140      	lsls	r0, r0, #5
   b613c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6140:	f040 0006 	orr.w	r0, r0, #6
   b6144:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b6146:	f1ba 0f00 	cmp.w	sl, #0
   b614a:	d101      	bne.n	b6150 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b614c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b6150:	b11f      	cbz	r7, b615a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b6152:	2e00      	cmp	r6, #0
   b6154:	d170      	bne.n	b6238 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b6156:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b615a:	69e2      	ldr	r2, [r4, #28]
   b615c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b615e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6160:	69e1      	ldr	r1, [r4, #28]
   b6162:	1c58      	adds	r0, r3, #1
   b6164:	1212      	asrs	r2, r2, #8
   b6166:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6168:	1c9a      	adds	r2, r3, #2
   b616a:	69e1      	ldr	r1, [r4, #28]
   b616c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b616e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6170:	3303      	adds	r3, #3
   b6172:	69e2      	ldr	r2, [r4, #28]
   b6174:	4649      	mov	r1, r9
   b6176:	4620      	mov	r0, r4
   b6178:	f7ff ff70 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
   b617c:	4603      	mov	r3, r0
            if (willTopic) {
   b617e:	f1b8 0f00 	cmp.w	r8, #0
   b6182:	d00b      	beq.n	b619c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b6184:	69e2      	ldr	r2, [r4, #28]
   b6186:	4641      	mov	r1, r8
   b6188:	4620      	mov	r0, r4
   b618a:	f7ff ff67 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b618e:	69e2      	ldr	r2, [r4, #28]
   b6190:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6192:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6194:	4620      	mov	r0, r4
   b6196:	f7ff ff61 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
   b619a:	4603      	mov	r3, r0
            if(user != NULL) {
   b619c:	b167      	cbz	r7, b61b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b619e:	69e2      	ldr	r2, [r4, #28]
   b61a0:	4639      	mov	r1, r7
   b61a2:	4620      	mov	r0, r4
   b61a4:	f7ff ff5a 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
   b61a8:	4603      	mov	r3, r0
                if(pass != NULL) {
   b61aa:	b12e      	cbz	r6, b61b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b61ac:	69e2      	ldr	r2, [r4, #28]
   b61ae:	4631      	mov	r1, r6
   b61b0:	4620      	mov	r0, r4
   b61b2:	f7ff ff53 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
   b61b6:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b61b8:	3b05      	subs	r3, #5
   b61ba:	69e2      	ldr	r2, [r4, #28]
   b61bc:	b29b      	uxth	r3, r3
   b61be:	2110      	movs	r1, #16
   b61c0:	4620      	mov	r0, r4
   b61c2:	f7ff ff0f 	bl	b5fe4 <_ZN4MQTT5writeEhPht>
   b61c6:	f000 fc77 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b61ca:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b61ce:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b61d2:	4620      	mov	r0, r4
   b61d4:	f001 fac8 	bl	b7768 <_ZN9TCPClient9availableEv>
   b61d8:	bb88      	cbnz	r0, b623e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b61da:	f000 fc6d 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b61de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b61e0:	1ac0      	subs	r0, r0, r3
   b61e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b61e4:	4373      	muls	r3, r6
   b61e6:	4298      	cmp	r0, r3
   b61e8:	d9f3      	bls.n	b61d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b61ea:	4620      	mov	r0, r4
   b61ec:	f001 fb16 	bl	b781c <_ZN9TCPClient4stopEv>
   b61f0:	e035      	b.n	b625e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b61f2:	a802      	add	r0, sp, #8
   b61f4:	f001 fd52 	bl	b7c9c <_ZN9IPAddressC1EPKh>
   b61f8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b61fc:	462b      	mov	r3, r5
   b61fe:	a902      	add	r1, sp, #8
   b6200:	4620      	mov	r0, r4
   b6202:	f001 fa35 	bl	b7670 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6206:	e773      	b.n	b60f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6208:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b620c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6210:	7bdb      	ldrb	r3, [r3, #15]
   b6212:	f10d 0c08 	add.w	ip, sp, #8
   b6216:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b621a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b621e:	ab02      	add	r3, sp, #8
   b6220:	cb03      	ldmia	r3!, {r0, r1}
   b6222:	f8c2 0005 	str.w	r0, [r2, #5]
   b6226:	f8c2 1009 	str.w	r1, [r2, #9]
   b622a:	f89c 3000 	ldrb.w	r3, [ip]
   b622e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6230:	230e      	movs	r3, #14
   b6232:	e77a      	b.n	b612a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6234:	2002      	movs	r0, #2
   b6236:	e786      	b.n	b6146 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6238:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b623c:	e78d      	b.n	b615a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b623e:	a902      	add	r1, sp, #8
   b6240:	4620      	mov	r0, r4
   b6242:	f7ff fe7d 	bl	b5f40 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6246:	2804      	cmp	r0, #4
   b6248:	d1cf      	bne.n	b61ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b624a:	69e3      	ldr	r3, [r4, #28]
   b624c:	78de      	ldrb	r6, [r3, #3]
   b624e:	2e00      	cmp	r6, #0
   b6250:	d1cb      	bne.n	b61ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6252:	f000 fc31 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6256:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6258:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b625a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b625e:	a801      	add	r0, sp, #4
   b6260:	f7ff fe03 	bl	b5e6a <_ZN4MQTT11MutexLockerD1Ev>
}
   b6264:	4628      	mov	r0, r5
   b6266:	b008      	add	sp, #32
   b6268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b626c:	2500      	movs	r5, #0
   b626e:	e7f9      	b.n	b6264 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6270:	000bde34 	.word	0x000bde34

000b6274 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6276:	2301      	movs	r3, #1
   b6278:	2204      	movs	r2, #4
   b627a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b627e:	2300      	movs	r3, #0
   b6280:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6284:	e9cd 3300 	strd	r3, r3, [sp]
   b6288:	461a      	mov	r2, r3
   b628a:	f7ff ff11 	bl	b60b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b628e:	b007      	add	sp, #28
   b6290:	f85d fb04 	ldr.w	pc, [sp], #4

000b6294 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6298:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b629c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b62a0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b62a4:	4604      	mov	r4, r0
   b62a6:	468b      	mov	fp, r1
   b62a8:	4616      	mov	r6, r2
   b62aa:	461f      	mov	r7, r3
    if (isConnected()) {
   b62ac:	f7ff fef2 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b62b0:	4682      	mov	sl, r0
   b62b2:	2800      	cmp	r0, #0
   b62b4:	d051      	beq.n	b635a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b62b6:	4621      	mov	r1, r4
   b62b8:	a801      	add	r0, sp, #4
   b62ba:	f7ff fdcb 	bl	b5e54 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b62be:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b62c2:	69e0      	ldr	r0, [r4, #28]
   b62c4:	2100      	movs	r1, #0
   b62c6:	f006 f96d 	bl	bc5a4 <memset>
        length = writeString(topic, buffer, length);
   b62ca:	2305      	movs	r3, #5
   b62cc:	69e2      	ldr	r2, [r4, #28]
   b62ce:	4659      	mov	r1, fp
   b62d0:	4620      	mov	r0, r4
   b62d2:	f7ff fec3 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b62d6:	1e6b      	subs	r3, r5, #1
   b62d8:	2b01      	cmp	r3, #1
   b62da:	d815      	bhi.n	b6308 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b62dc:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b62de:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b62e0:	3101      	adds	r1, #1
   b62e2:	b289      	uxth	r1, r1
   b62e4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b62e6:	0a09      	lsrs	r1, r1, #8
   b62e8:	5419      	strb	r1, [r3, r0]
   b62ea:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b62ec:	69e3      	ldr	r3, [r4, #28]
   b62ee:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b62f0:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b62f2:	3002      	adds	r0, #2
   b62f4:	5499      	strb	r1, [r3, r2]
   b62f6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b62f8:	f1b8 0f00 	cmp.w	r8, #0
   b62fc:	d004      	beq.n	b6308 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b62fe:	8c23      	ldrh	r3, [r4, #32]
   b6300:	1c5a      	adds	r2, r3, #1
   b6302:	8422      	strh	r2, [r4, #32]
   b6304:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6308:	2100      	movs	r1, #0
   b630a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b630c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b630e:	69e2      	ldr	r2, [r4, #28]
   b6310:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6312:	d90a      	bls.n	b632a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6314:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6318:	459c      	cmp	ip, r3
   b631a:	d906      	bls.n	b632a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b631c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6320:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6324:	3101      	adds	r1, #1
   b6326:	b289      	uxth	r1, r1
   b6328:	e7ef      	b.n	b630a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b632a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b632e:	2900      	cmp	r1, #0
   b6330:	bf0c      	ite	eq
   b6332:	2130      	moveq	r1, #48	; 0x30
   b6334:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b6336:	f1b9 0f00 	cmp.w	r9, #0
   b633a:	d001      	beq.n	b6340 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b633c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6340:	2d02      	cmp	r5, #2
   b6342:	d10e      	bne.n	b6362 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6344:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b6348:	3b05      	subs	r3, #5
   b634a:	b29b      	uxth	r3, r3
   b634c:	4620      	mov	r0, r4
   b634e:	f7ff fe49 	bl	b5fe4 <_ZN4MQTT5writeEhPht>
   b6352:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b6354:	a801      	add	r0, sp, #4
   b6356:	f7ff fd88 	bl	b5e6a <_ZN4MQTT11MutexLockerD1Ev>
}
   b635a:	4650      	mov	r0, sl
   b635c:	b003      	add	sp, #12
   b635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6362:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6364:	bf08      	it	eq
   b6366:	f041 0102 	orreq.w	r1, r1, #2
   b636a:	e7ed      	b.n	b6348 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b636c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b636c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b636e:	9c08      	ldr	r4, [sp, #32]
   b6370:	9403      	str	r4, [sp, #12]
   b6372:	2400      	movs	r4, #0
   b6374:	9402      	str	r4, [sp, #8]
   b6376:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b637a:	9401      	str	r4, [sp, #4]
   b637c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6380:	9400      	str	r4, [sp, #0]
   b6382:	f7ff ff87 	bl	b6294 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6386:	b004      	add	sp, #16
   b6388:	bd10      	pop	{r4, pc}

000b638a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b638a:	b530      	push	{r4, r5, lr}
   b638c:	b087      	sub	sp, #28
   b638e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6390:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6392:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6394:	9204      	str	r2, [sp, #16]
   b6396:	f006 f964 	bl	bc662 <strlen>
   b639a:	2500      	movs	r5, #0
   b639c:	4603      	mov	r3, r0
   b639e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b63a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b63a6:	9500      	str	r5, [sp, #0]
   b63a8:	4620      	mov	r0, r4
   b63aa:	f7ff ffdf 	bl	b636c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b63ae:	b007      	add	sp, #28
   b63b0:	bd30      	pop	{r4, r5, pc}

000b63b2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b63b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b63b4:	4604      	mov	r4, r0
   b63b6:	460e      	mov	r6, r1
    if (isConnected()) {
   b63b8:	f7ff fe6c 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b63bc:	4605      	mov	r5, r0
   b63be:	b1c8      	cbz	r0, b63f4 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b63c0:	4621      	mov	r1, r4
   b63c2:	a801      	add	r0, sp, #4
   b63c4:	f7ff fd46 	bl	b5e54 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b63c8:	69e3      	ldr	r3, [r4, #28]
   b63ca:	2262      	movs	r2, #98	; 0x62
   b63cc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b63ce:	69e3      	ldr	r3, [r4, #28]
   b63d0:	2202      	movs	r2, #2
   b63d2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b63d4:	69e3      	ldr	r3, [r4, #28]
   b63d6:	0a32      	lsrs	r2, r6, #8
   b63d8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b63da:	69e3      	ldr	r3, [r4, #28]
   b63dc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b63de:	69e1      	ldr	r1, [r4, #28]
   b63e0:	2204      	movs	r2, #4
   b63e2:	4620      	mov	r0, r4
   b63e4:	f000 ff95 	bl	b7312 <_ZN9TCPClient5writeEPKhj>
   b63e8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b63ea:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b63ec:	bf18      	it	ne
   b63ee:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b63f0:	f7ff fd3b 	bl	b5e6a <_ZN4MQTT11MutexLockerD1Ev>
}
   b63f4:	4628      	mov	r0, r5
   b63f6:	b002      	add	sp, #8
   b63f8:	bd70      	pop	{r4, r5, r6, pc}

000b63fa <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b63fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b63fc:	4604      	mov	r4, r0
   b63fe:	460e      	mov	r6, r1
    if (isConnected()) {
   b6400:	f7ff fe48 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b6404:	4605      	mov	r5, r0
   b6406:	b1c8      	cbz	r0, b643c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6408:	4621      	mov	r1, r4
   b640a:	a801      	add	r0, sp, #4
   b640c:	f7ff fd22 	bl	b5e54 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6410:	69e3      	ldr	r3, [r4, #28]
   b6412:	2272      	movs	r2, #114	; 0x72
   b6414:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6416:	69e3      	ldr	r3, [r4, #28]
   b6418:	2202      	movs	r2, #2
   b641a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b641c:	69e3      	ldr	r3, [r4, #28]
   b641e:	0a32      	lsrs	r2, r6, #8
   b6420:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6422:	69e3      	ldr	r3, [r4, #28]
   b6424:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6426:	69e1      	ldr	r1, [r4, #28]
   b6428:	2204      	movs	r2, #4
   b642a:	4620      	mov	r0, r4
   b642c:	f000 ff71 	bl	b7312 <_ZN9TCPClient5writeEPKhj>
   b6430:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6432:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6434:	bf18      	it	ne
   b6436:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6438:	f7ff fd17 	bl	b5e6a <_ZN4MQTT11MutexLockerD1Ev>
}
   b643c:	4628      	mov	r0, r5
   b643e:	b002      	add	sp, #8
   b6440:	bd70      	pop	{r4, r5, r6, pc}

000b6442 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6446:	ed2d 8b02 	vpush	{d8}
   b644a:	b087      	sub	sp, #28
   b644c:	af00      	add	r7, sp, #0
   b644e:	4604      	mov	r4, r0
    if (isConnected()) {
   b6450:	f7ff fe20 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b6454:	4681      	mov	r9, r0
   b6456:	b1f8      	cbz	r0, b6498 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b6458:	4621      	mov	r1, r4
   b645a:	f107 0014 	add.w	r0, r7, #20
   b645e:	f7ff fcf9 	bl	b5e54 <_ZN4MQTT11MutexLockerC1EPS_>
   b6462:	f000 fb29 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6466:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b646c:	4353      	muls	r3, r2
   b646e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6470:	1a82      	subs	r2, r0, r2
   b6472:	429a      	cmp	r2, r3
   b6474:	4606      	mov	r6, r0
   b6476:	d803      	bhi.n	b6480 <_ZN4MQTT4loopEv+0x3e>
   b6478:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b647a:	1a82      	subs	r2, r0, r2
   b647c:	4293      	cmp	r3, r2
   b647e:	d221      	bcs.n	b64c4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6480:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6484:	b17b      	cbz	r3, b64a6 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6486:	4620      	mov	r0, r4
   b6488:	f001 f9c8 	bl	b781c <_ZN9TCPClient4stopEv>
                return false;
   b648c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6490:	f107 0014 	add.w	r0, r7, #20
   b6494:	f7ff fce9 	bl	b5e6a <_ZN4MQTT11MutexLockerD1Ev>
}
   b6498:	4648      	mov	r0, r9
   b649a:	371c      	adds	r7, #28
   b649c:	46bd      	mov	sp, r7
   b649e:	ecbd 8b02 	vpop	{d8}
   b64a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b64a6:	69e2      	ldr	r2, [r4, #28]
   b64a8:	21c0      	movs	r1, #192	; 0xc0
   b64aa:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b64ac:	69e2      	ldr	r2, [r4, #28]
   b64ae:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b64b0:	69e1      	ldr	r1, [r4, #28]
   b64b2:	2202      	movs	r2, #2
   b64b4:	4620      	mov	r0, r4
   b64b6:	f000 ff2c 	bl	b7312 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b64ba:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b64be:	2301      	movs	r3, #1
   b64c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b64c4:	4620      	mov	r0, r4
   b64c6:	f001 f94f 	bl	b7768 <_ZN9TCPClient9availableEv>
   b64ca:	2800      	cmp	r0, #0
   b64cc:	d0e0      	beq.n	b6490 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b64ce:	f107 0113 	add.w	r1, r7, #19
   b64d2:	4620      	mov	r0, r4
   b64d4:	f7ff fd34 	bl	b5f40 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b64d8:	4683      	mov	fp, r0
   b64da:	2800      	cmp	r0, #0
   b64dc:	d0d8      	beq.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b64de:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b64e0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b64e2:	7819      	ldrb	r1, [r3, #0]
   b64e4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b64e8:	2a30      	cmp	r2, #48	; 0x30
   b64ea:	d17f      	bne.n	b65ec <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b64ec:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b64f0:	f1ba 0f00 	cmp.w	sl, #0
   b64f4:	d0cc      	beq.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b64f6:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b64fa:	466a      	mov	r2, sp
   b64fc:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6500:	eb03 020c 	add.w	r2, r3, ip
   b6504:	7851      	ldrb	r1, [r2, #1]
   b6506:	7895      	ldrb	r5, [r2, #2]
   b6508:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b650c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b650e:	f105 0208 	add.w	r2, r5, #8
   b6512:	4669      	mov	r1, sp
   b6514:	08d2      	lsrs	r2, r2, #3
   b6516:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b651a:	4695      	mov	sp, r2
   b651c:	f10c 0203 	add.w	r2, ip, #3
   b6520:	60fa      	str	r2, [r7, #12]
   b6522:	eb03 0e02 	add.w	lr, r3, r2
   b6526:	eb0d 0205 	add.w	r2, sp, r5
   b652a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b652c:	f8c7 d008 	str.w	sp, [r7, #8]
   b6530:	607a      	str	r2, [r7, #4]
   b6532:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6536:	428a      	cmp	r2, r1
   b6538:	d006      	beq.n	b6548 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b653a:	460a      	mov	r2, r1
   b653c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6540:	f802 8b01 	strb.w	r8, [r2], #1
   b6544:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6546:	e7f4      	b.n	b6532 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6548:	2200      	movs	r2, #0
   b654a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b654c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6550:	68f9      	ldr	r1, [r7, #12]
   b6552:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6556:	ebab 020c 	sub.w	r2, fp, ip
   b655a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b655c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6560:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6564:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6566:	d125      	bne.n	b65b4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6568:	f813 e001 	ldrb.w	lr, [r3, r1]
   b656c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b656e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6570:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6574:	f10c 0105 	add.w	r1, ip, #5
   b6578:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b657a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b657c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6580:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6582:	69e3      	ldr	r3, [r4, #28]
   b6584:	2240      	movs	r2, #64	; 0x40
   b6586:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6588:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b658a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b658e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6592:	69e3      	ldr	r3, [r4, #28]
   b6594:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6598:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b659a:	69e3      	ldr	r3, [r4, #28]
   b659c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b65a0:	69e1      	ldr	r1, [r4, #28]
   b65a2:	2204      	movs	r2, #4
   b65a4:	4620      	mov	r0, r4
   b65a6:	f000 feb4 	bl	b7312 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b65aa:	6266      	str	r6, [r4, #36]	; 0x24
   b65ac:	ee18 3a10 	vmov	r3, s16
   b65b0:	469d      	mov	sp, r3
   b65b2:	e76d      	b.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b65b4:	f1b8 0f04 	cmp.w	r8, #4
   b65b8:	d115      	bne.n	b65e6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b65ba:	f813 e001 	ldrb.w	lr, [r3, r1]
   b65be:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b65c0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b65c2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b65c6:	f10c 0105 	add.w	r1, ip, #5
   b65ca:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b65cc:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b65ce:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b65d2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b65d4:	69e3      	ldr	r3, [r4, #28]
   b65d6:	2250      	movs	r2, #80	; 0x50
   b65d8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b65da:	69e3      	ldr	r3, [r4, #28]
   b65dc:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b65de:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b65e2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b65e4:	e7d5      	b.n	b6592 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b65e6:	4419      	add	r1, r3
   b65e8:	47d0      	blx	sl
   b65ea:	e7df      	b.n	b65ac <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b65ec:	2a50      	cmp	r2, #80	; 0x50
   b65ee:	d108      	bne.n	b6602 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b65f0:	789a      	ldrb	r2, [r3, #2]
   b65f2:	78d9      	ldrb	r1, [r3, #3]
   b65f4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b65f8:	b289      	uxth	r1, r1
   b65fa:	4620      	mov	r0, r4
   b65fc:	f7ff fed9 	bl	b63b2 <_ZN4MQTT14publishReleaseEt>
   b6600:	e746      	b.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6602:	2a40      	cmp	r2, #64	; 0x40
   b6604:	d112      	bne.n	b662c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6606:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6608:	2a00      	cmp	r2, #0
   b660a:	f43f af41 	beq.w	b6490 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b660e:	f1bb 0f04 	cmp.w	fp, #4
   b6612:	f47f af3d 	bne.w	b6490 <_ZN4MQTT4loopEv+0x4e>
   b6616:	f011 0f06 	tst.w	r1, #6
   b661a:	f47f af39 	bne.w	b6490 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b661e:	7899      	ldrb	r1, [r3, #2]
   b6620:	78d8      	ldrb	r0, [r3, #3]
   b6622:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6626:	b280      	uxth	r0, r0
   b6628:	4790      	blx	r2
   b662a:	e731      	b.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b662c:	2a60      	cmp	r2, #96	; 0x60
   b662e:	d108      	bne.n	b6642 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6630:	789a      	ldrb	r2, [r3, #2]
   b6632:	78d9      	ldrb	r1, [r3, #3]
   b6634:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6638:	b289      	uxth	r1, r1
   b663a:	4620      	mov	r0, r4
   b663c:	f7ff fedd 	bl	b63fa <_ZN4MQTT15publishCompleteEt>
   b6640:	e726      	b.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6642:	2a70      	cmp	r2, #112	; 0x70
   b6644:	d0df      	beq.n	b6606 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6646:	2a90      	cmp	r2, #144	; 0x90
   b6648:	f43f af22 	beq.w	b6490 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b664c:	2ac0      	cmp	r2, #192	; 0xc0
   b664e:	d10a      	bne.n	b6666 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6650:	22d0      	movs	r2, #208	; 0xd0
   b6652:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6654:	69e3      	ldr	r3, [r4, #28]
   b6656:	2200      	movs	r2, #0
   b6658:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b665a:	69e1      	ldr	r1, [r4, #28]
   b665c:	2202      	movs	r2, #2
   b665e:	4620      	mov	r0, r4
   b6660:	f000 fe57 	bl	b7312 <_ZN9TCPClient5writeEPKhj>
   b6664:	e714      	b.n	b6490 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6666:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6668:	bf04      	itt	eq
   b666a:	2300      	moveq	r3, #0
   b666c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6670:	e70e      	b.n	b6490 <_ZN4MQTT4loopEv+0x4e>

000b6672 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6674:	4604      	mov	r4, r0
   b6676:	460f      	mov	r7, r1
   b6678:	4616      	mov	r6, r2
    if (isConnected()) {
   b667a:	f7ff fd0b 	bl	b6094 <_ZN4MQTT11isConnectedEv>
   b667e:	4605      	mov	r5, r0
   b6680:	b310      	cbz	r0, b66c8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6682:	4621      	mov	r1, r4
   b6684:	a801      	add	r0, sp, #4
   b6686:	f7ff fbe5 	bl	b5e54 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b668a:	8c23      	ldrh	r3, [r4, #32]
   b668c:	3301      	adds	r3, #1
   b668e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6690:	b1eb      	cbz	r3, b66ce <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6692:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6694:	8c23      	ldrh	r3, [r4, #32]
   b6696:	69e2      	ldr	r2, [r4, #28]
   b6698:	0a1b      	lsrs	r3, r3, #8
   b669a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b669c:	69e3      	ldr	r3, [r4, #28]
   b669e:	8c22      	ldrh	r2, [r4, #32]
   b66a0:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b66a2:	69e2      	ldr	r2, [r4, #28]
   b66a4:	2307      	movs	r3, #7
   b66a6:	4639      	mov	r1, r7
   b66a8:	4620      	mov	r0, r4
   b66aa:	f7ff fcd7 	bl	b605c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b66ae:	69e3      	ldr	r3, [r4, #28]
   b66b0:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b66b2:	3804      	subs	r0, #4
   b66b4:	b283      	uxth	r3, r0
   b66b6:	69e2      	ldr	r2, [r4, #28]
   b66b8:	2182      	movs	r1, #130	; 0x82
   b66ba:	4620      	mov	r0, r4
   b66bc:	f7ff fc92 	bl	b5fe4 <_ZN4MQTT5writeEhPht>
   b66c0:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b66c2:	a801      	add	r0, sp, #4
   b66c4:	f7ff fbd1 	bl	b5e6a <_ZN4MQTT11MutexLockerD1Ev>
}
   b66c8:	4628      	mov	r0, r5
   b66ca:	b003      	add	sp, #12
   b66cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b66ce:	2301      	movs	r3, #1
   b66d0:	e7df      	b.n	b6692 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b66d2 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b66d2:	2200      	movs	r2, #0
   b66d4:	f7ff bfcd 	b.w	b6672 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b66d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b66d8:	b508      	push	{r3, lr}
   b66da:	4b02      	ldr	r3, [pc, #8]	; (b66e4 <HAL_USB_USART_Init+0xc>)
   b66dc:	681b      	ldr	r3, [r3, #0]
   b66de:	681b      	ldr	r3, [r3, #0]
   b66e0:	9301      	str	r3, [sp, #4]
   b66e2:	bd08      	pop	{r3, pc}
   b66e4:	0003024c 	.word	0x0003024c

000b66e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b02      	ldr	r3, [pc, #8]	; (b66f4 <HAL_USB_USART_Begin+0xc>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	685b      	ldr	r3, [r3, #4]
   b66f0:	9301      	str	r3, [sp, #4]
   b66f2:	bd08      	pop	{r3, pc}
   b66f4:	0003024c 	.word	0x0003024c

000b66f8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b66f8:	b508      	push	{r3, lr}
   b66fa:	4b02      	ldr	r3, [pc, #8]	; (b6704 <HAL_USB_USART_End+0xc>)
   b66fc:	681b      	ldr	r3, [r3, #0]
   b66fe:	689b      	ldr	r3, [r3, #8]
   b6700:	9301      	str	r3, [sp, #4]
   b6702:	bd08      	pop	{r3, pc}
   b6704:	0003024c 	.word	0x0003024c

000b6708 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6708:	b508      	push	{r3, lr}
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <HAL_USB_USART_Available_Data+0xc>)
   b670c:	681b      	ldr	r3, [r3, #0]
   b670e:	691b      	ldr	r3, [r3, #16]
   b6710:	9301      	str	r3, [sp, #4]
   b6712:	bd08      	pop	{r3, pc}
   b6714:	0003024c 	.word	0x0003024c

000b6718 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6718:	b508      	push	{r3, lr}
   b671a:	4b02      	ldr	r3, [pc, #8]	; (b6724 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b671c:	681b      	ldr	r3, [r3, #0]
   b671e:	695b      	ldr	r3, [r3, #20]
   b6720:	9301      	str	r3, [sp, #4]
   b6722:	bd08      	pop	{r3, pc}
   b6724:	0003024c 	.word	0x0003024c

000b6728 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b02      	ldr	r3, [pc, #8]	; (b6734 <HAL_USB_USART_Receive_Data+0xc>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	699b      	ldr	r3, [r3, #24]
   b6730:	9301      	str	r3, [sp, #4]
   b6732:	bd08      	pop	{r3, pc}
   b6734:	0003024c 	.word	0x0003024c

000b6738 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6738:	b508      	push	{r3, lr}
   b673a:	4b02      	ldr	r3, [pc, #8]	; (b6744 <HAL_USB_USART_Send_Data+0xc>)
   b673c:	681b      	ldr	r3, [r3, #0]
   b673e:	69db      	ldr	r3, [r3, #28]
   b6740:	9301      	str	r3, [sp, #4]
   b6742:	bd08      	pop	{r3, pc}
   b6744:	0003024c 	.word	0x0003024c

000b6748 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b02      	ldr	r3, [pc, #8]	; (b6754 <HAL_USB_USART_Flush_Data+0xc>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	6a1b      	ldr	r3, [r3, #32]
   b6750:	9301      	str	r3, [sp, #4]
   b6752:	bd08      	pop	{r3, pc}
   b6754:	0003024c 	.word	0x0003024c

000b6758 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6758:	b508      	push	{r3, lr}
   b675a:	4b02      	ldr	r3, [pc, #8]	; (b6764 <hal_i2c_set_speed+0xc>)
   b675c:	681b      	ldr	r3, [r3, #0]
   b675e:	681b      	ldr	r3, [r3, #0]
   b6760:	9301      	str	r3, [sp, #4]
   b6762:	bd08      	pop	{r3, pc}
   b6764:	00030228 	.word	0x00030228

000b6768 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6768:	b508      	push	{r3, lr}
   b676a:	4b02      	ldr	r3, [pc, #8]	; (b6774 <hal_i2c_begin+0xc>)
   b676c:	681b      	ldr	r3, [r3, #0]
   b676e:	68db      	ldr	r3, [r3, #12]
   b6770:	9301      	str	r3, [sp, #4]
   b6772:	bd08      	pop	{r3, pc}
   b6774:	00030228 	.word	0x00030228

000b6778 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6778:	b508      	push	{r3, lr}
   b677a:	4b02      	ldr	r3, [pc, #8]	; (b6784 <hal_i2c_begin_transmission+0xc>)
   b677c:	681b      	ldr	r3, [r3, #0]
   b677e:	699b      	ldr	r3, [r3, #24]
   b6780:	9301      	str	r3, [sp, #4]
   b6782:	bd08      	pop	{r3, pc}
   b6784:	00030228 	.word	0x00030228

000b6788 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6788:	b508      	push	{r3, lr}
   b678a:	4b02      	ldr	r3, [pc, #8]	; (b6794 <hal_i2c_end_transmission+0xc>)
   b678c:	681b      	ldr	r3, [r3, #0]
   b678e:	69db      	ldr	r3, [r3, #28]
   b6790:	9301      	str	r3, [sp, #4]
   b6792:	bd08      	pop	{r3, pc}
   b6794:	00030228 	.word	0x00030228

000b6798 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6798:	b508      	push	{r3, lr}
   b679a:	4b02      	ldr	r3, [pc, #8]	; (b67a4 <hal_i2c_write+0xc>)
   b679c:	681b      	ldr	r3, [r3, #0]
   b679e:	6a1b      	ldr	r3, [r3, #32]
   b67a0:	9301      	str	r3, [sp, #4]
   b67a2:	bd08      	pop	{r3, pc}
   b67a4:	00030228 	.word	0x00030228

000b67a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b67a8:	b508      	push	{r3, lr}
   b67aa:	4b02      	ldr	r3, [pc, #8]	; (b67b4 <hal_i2c_available+0xc>)
   b67ac:	681b      	ldr	r3, [r3, #0]
   b67ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b67b0:	9301      	str	r3, [sp, #4]
   b67b2:	bd08      	pop	{r3, pc}
   b67b4:	00030228 	.word	0x00030228

000b67b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b67b8:	b508      	push	{r3, lr}
   b67ba:	4b02      	ldr	r3, [pc, #8]	; (b67c4 <hal_i2c_read+0xc>)
   b67bc:	681b      	ldr	r3, [r3, #0]
   b67be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67c0:	9301      	str	r3, [sp, #4]
   b67c2:	bd08      	pop	{r3, pc}
   b67c4:	00030228 	.word	0x00030228

000b67c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b02      	ldr	r3, [pc, #8]	; (b67d4 <hal_i2c_peek+0xc>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67d0:	9301      	str	r3, [sp, #4]
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	00030228 	.word	0x00030228

000b67d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <hal_i2c_flush+0xc>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67e0:	9301      	str	r3, [sp, #4]
   b67e2:	bd08      	pop	{r3, pc}
   b67e4:	00030228 	.word	0x00030228

000b67e8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b67e8:	b508      	push	{r3, lr}
   b67ea:	4b02      	ldr	r3, [pc, #8]	; (b67f4 <hal_i2c_is_enabled+0xc>)
   b67ec:	681b      	ldr	r3, [r3, #0]
   b67ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b67f0:	9301      	str	r3, [sp, #4]
   b67f2:	bd08      	pop	{r3, pc}
   b67f4:	00030228 	.word	0x00030228

000b67f8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b67f8:	b508      	push	{r3, lr}
   b67fa:	4b02      	ldr	r3, [pc, #8]	; (b6804 <hal_i2c_init+0xc>)
   b67fc:	681b      	ldr	r3, [r3, #0]
   b67fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6800:	9301      	str	r3, [sp, #4]
   b6802:	bd08      	pop	{r3, pc}
   b6804:	00030228 	.word	0x00030228

000b6808 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6808:	b508      	push	{r3, lr}
   b680a:	4b02      	ldr	r3, [pc, #8]	; (b6814 <hal_spi_init+0xc>)
   b680c:	681b      	ldr	r3, [r3, #0]
   b680e:	69db      	ldr	r3, [r3, #28]
   b6810:	9301      	str	r3, [sp, #4]
   b6812:	bd08      	pop	{r3, pc}
   b6814:	00030230 	.word	0x00030230

000b6818 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6818:	b508      	push	{r3, lr}
   b681a:	4b02      	ldr	r3, [pc, #8]	; (b6824 <hal_spi_is_enabled+0xc>)
   b681c:	681b      	ldr	r3, [r3, #0]
   b681e:	6a1b      	ldr	r3, [r3, #32]
   b6820:	9301      	str	r3, [sp, #4]
   b6822:	bd08      	pop	{r3, pc}
   b6824:	00030230 	.word	0x00030230

000b6828 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6828:	b508      	push	{r3, lr}
   b682a:	4b02      	ldr	r3, [pc, #8]	; (b6834 <sock_setsockopt+0xc>)
   b682c:	681b      	ldr	r3, [r3, #0]
   b682e:	699b      	ldr	r3, [r3, #24]
   b6830:	9301      	str	r3, [sp, #4]
   b6832:	bd08      	pop	{r3, pc}
   b6834:	00030238 	.word	0x00030238

000b6838 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6838:	b508      	push	{r3, lr}
   b683a:	4b02      	ldr	r3, [pc, #8]	; (b6844 <sock_close+0xc>)
   b683c:	681b      	ldr	r3, [r3, #0]
   b683e:	69db      	ldr	r3, [r3, #28]
   b6840:	9301      	str	r3, [sp, #4]
   b6842:	bd08      	pop	{r3, pc}
   b6844:	00030238 	.word	0x00030238

000b6848 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6848:	b508      	push	{r3, lr}
   b684a:	4b02      	ldr	r3, [pc, #8]	; (b6854 <sock_connect+0xc>)
   b684c:	681b      	ldr	r3, [r3, #0]
   b684e:	6a1b      	ldr	r3, [r3, #32]
   b6850:	9301      	str	r3, [sp, #4]
   b6852:	bd08      	pop	{r3, pc}
   b6854:	00030238 	.word	0x00030238

000b6858 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6858:	b508      	push	{r3, lr}
   b685a:	4b02      	ldr	r3, [pc, #8]	; (b6864 <sock_recv+0xc>)
   b685c:	681b      	ldr	r3, [r3, #0]
   b685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6860:	9301      	str	r3, [sp, #4]
   b6862:	bd08      	pop	{r3, pc}
   b6864:	00030238 	.word	0x00030238

000b6868 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6868:	b508      	push	{r3, lr}
   b686a:	4b02      	ldr	r3, [pc, #8]	; (b6874 <sock_send+0xc>)
   b686c:	681b      	ldr	r3, [r3, #0]
   b686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6870:	9301      	str	r3, [sp, #4]
   b6872:	bd08      	pop	{r3, pc}
   b6874:	00030238 	.word	0x00030238

000b6878 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6878:	b508      	push	{r3, lr}
   b687a:	4b02      	ldr	r3, [pc, #8]	; (b6884 <sock_socket+0xc>)
   b687c:	681b      	ldr	r3, [r3, #0]
   b687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6880:	9301      	str	r3, [sp, #4]
   b6882:	bd08      	pop	{r3, pc}
   b6884:	00030238 	.word	0x00030238

000b6888 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6888:	b508      	push	{r3, lr}
   b688a:	4b02      	ldr	r3, [pc, #8]	; (b6894 <hal_usart_end+0xc>)
   b688c:	681b      	ldr	r3, [r3, #0]
   b688e:	689b      	ldr	r3, [r3, #8]
   b6890:	9301      	str	r3, [sp, #4]
   b6892:	bd08      	pop	{r3, pc}
   b6894:	0003023c 	.word	0x0003023c

000b6898 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6898:	b508      	push	{r3, lr}
   b689a:	4b02      	ldr	r3, [pc, #8]	; (b68a4 <hal_usart_write+0xc>)
   b689c:	681b      	ldr	r3, [r3, #0]
   b689e:	68db      	ldr	r3, [r3, #12]
   b68a0:	9301      	str	r3, [sp, #4]
   b68a2:	bd08      	pop	{r3, pc}
   b68a4:	0003023c 	.word	0x0003023c

000b68a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b68a8:	b508      	push	{r3, lr}
   b68aa:	4b02      	ldr	r3, [pc, #8]	; (b68b4 <hal_usart_available+0xc>)
   b68ac:	681b      	ldr	r3, [r3, #0]
   b68ae:	691b      	ldr	r3, [r3, #16]
   b68b0:	9301      	str	r3, [sp, #4]
   b68b2:	bd08      	pop	{r3, pc}
   b68b4:	0003023c 	.word	0x0003023c

000b68b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b68b8:	b508      	push	{r3, lr}
   b68ba:	4b02      	ldr	r3, [pc, #8]	; (b68c4 <hal_usart_read+0xc>)
   b68bc:	681b      	ldr	r3, [r3, #0]
   b68be:	695b      	ldr	r3, [r3, #20]
   b68c0:	9301      	str	r3, [sp, #4]
   b68c2:	bd08      	pop	{r3, pc}
   b68c4:	0003023c 	.word	0x0003023c

000b68c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b68c8:	b508      	push	{r3, lr}
   b68ca:	4b02      	ldr	r3, [pc, #8]	; (b68d4 <hal_usart_peek+0xc>)
   b68cc:	681b      	ldr	r3, [r3, #0]
   b68ce:	699b      	ldr	r3, [r3, #24]
   b68d0:	9301      	str	r3, [sp, #4]
   b68d2:	bd08      	pop	{r3, pc}
   b68d4:	0003023c 	.word	0x0003023c

000b68d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b68d8:	b508      	push	{r3, lr}
   b68da:	4b02      	ldr	r3, [pc, #8]	; (b68e4 <hal_usart_flush+0xc>)
   b68dc:	681b      	ldr	r3, [r3, #0]
   b68de:	69db      	ldr	r3, [r3, #28]
   b68e0:	9301      	str	r3, [sp, #4]
   b68e2:	bd08      	pop	{r3, pc}
   b68e4:	0003023c 	.word	0x0003023c

000b68e8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b68e8:	b508      	push	{r3, lr}
   b68ea:	4b02      	ldr	r3, [pc, #8]	; (b68f4 <hal_usart_is_enabled+0xc>)
   b68ec:	681b      	ldr	r3, [r3, #0]
   b68ee:	6a1b      	ldr	r3, [r3, #32]
   b68f0:	9301      	str	r3, [sp, #4]
   b68f2:	bd08      	pop	{r3, pc}
   b68f4:	0003023c 	.word	0x0003023c

000b68f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b68f8:	b508      	push	{r3, lr}
   b68fa:	4b02      	ldr	r3, [pc, #8]	; (b6904 <hal_usart_available_data_for_write+0xc>)
   b68fc:	681b      	ldr	r3, [r3, #0]
   b68fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6900:	9301      	str	r3, [sp, #4]
   b6902:	bd08      	pop	{r3, pc}
   b6904:	0003023c 	.word	0x0003023c

000b6908 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6908:	b508      	push	{r3, lr}
   b690a:	4b02      	ldr	r3, [pc, #8]	; (b6914 <hal_usart_begin_config+0xc>)
   b690c:	681b      	ldr	r3, [r3, #0]
   b690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6910:	9301      	str	r3, [sp, #4]
   b6912:	bd08      	pop	{r3, pc}
   b6914:	0003023c 	.word	0x0003023c

000b6918 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6918:	b508      	push	{r3, lr}
   b691a:	4b02      	ldr	r3, [pc, #8]	; (b6924 <hal_usart_init_ex+0xc>)
   b691c:	681b      	ldr	r3, [r3, #0]
   b691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6920:	9301      	str	r3, [sp, #4]
   b6922:	bd08      	pop	{r3, pc}
   b6924:	0003023c 	.word	0x0003023c

000b6928 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6928:	b508      	push	{r3, lr}
   b692a:	4b02      	ldr	r3, [pc, #8]	; (b6934 <inet_inet_ntop+0xc>)
   b692c:	681b      	ldr	r3, [r3, #0]
   b692e:	695b      	ldr	r3, [r3, #20]
   b6930:	9301      	str	r3, [sp, #4]
   b6932:	bd08      	pop	{r3, pc}
   b6934:	00030264 	.word	0x00030264

000b6938 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6938:	b508      	push	{r3, lr}
   b693a:	4b02      	ldr	r3, [pc, #8]	; (b6944 <inet_htonl+0xc>)
   b693c:	681b      	ldr	r3, [r3, #0]
   b693e:	6a1b      	ldr	r3, [r3, #32]
   b6940:	9301      	str	r3, [sp, #4]
   b6942:	bd08      	pop	{r3, pc}
   b6944:	00030264 	.word	0x00030264

000b6948 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6948:	b508      	push	{r3, lr}
   b694a:	4b02      	ldr	r3, [pc, #8]	; (b6954 <inet_htons+0xc>)
   b694c:	681b      	ldr	r3, [r3, #0]
   b694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6950:	9301      	str	r3, [sp, #4]
   b6952:	bd08      	pop	{r3, pc}
   b6954:	00030264 	.word	0x00030264

000b6958 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6958:	b508      	push	{r3, lr}
   b695a:	4b02      	ldr	r3, [pc, #8]	; (b6964 <os_mutex_create+0xc>)
   b695c:	681b      	ldr	r3, [r3, #0]
   b695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6960:	9301      	str	r3, [sp, #4]
   b6962:	bd08      	pop	{r3, pc}
   b6964:	00030248 	.word	0x00030248

000b6968 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6968:	b508      	push	{r3, lr}
   b696a:	4b02      	ldr	r3, [pc, #8]	; (b6974 <os_mutex_lock+0xc>)
   b696c:	681b      	ldr	r3, [r3, #0]
   b696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6970:	9301      	str	r3, [sp, #4]
   b6972:	bd08      	pop	{r3, pc}
   b6974:	00030248 	.word	0x00030248

000b6978 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6978:	b508      	push	{r3, lr}
   b697a:	4b02      	ldr	r3, [pc, #8]	; (b6984 <os_mutex_unlock+0xc>)
   b697c:	681b      	ldr	r3, [r3, #0]
   b697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6980:	9301      	str	r3, [sp, #4]
   b6982:	bd08      	pop	{r3, pc}
   b6984:	00030248 	.word	0x00030248

000b6988 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6988:	b508      	push	{r3, lr}
   b698a:	4b02      	ldr	r3, [pc, #8]	; (b6994 <os_mutex_recursive_create+0xc>)
   b698c:	681b      	ldr	r3, [r3, #0]
   b698e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6990:	9301      	str	r3, [sp, #4]
   b6992:	bd08      	pop	{r3, pc}
   b6994:	00030248 	.word	0x00030248

000b6998 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6998:	b508      	push	{r3, lr}
   b699a:	4b02      	ldr	r3, [pc, #8]	; (b69a4 <os_mutex_recursive_destroy+0xc>)
   b699c:	681b      	ldr	r3, [r3, #0]
   b699e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b69a0:	9301      	str	r3, [sp, #4]
   b69a2:	bd08      	pop	{r3, pc}
   b69a4:	00030248 	.word	0x00030248

000b69a8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b69a8:	b508      	push	{r3, lr}
   b69aa:	4b02      	ldr	r3, [pc, #8]	; (b69b4 <os_mutex_recursive_lock+0xc>)
   b69ac:	681b      	ldr	r3, [r3, #0]
   b69ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b69b0:	9301      	str	r3, [sp, #4]
   b69b2:	bd08      	pop	{r3, pc}
   b69b4:	00030248 	.word	0x00030248

000b69b8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b69b8:	b508      	push	{r3, lr}
   b69ba:	4b02      	ldr	r3, [pc, #8]	; (b69c4 <os_mutex_recursive_unlock+0xc>)
   b69bc:	681b      	ldr	r3, [r3, #0]
   b69be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b69c0:	9301      	str	r3, [sp, #4]
   b69c2:	bd08      	pop	{r3, pc}
   b69c4:	00030248 	.word	0x00030248

000b69c8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b69c8:	b508      	push	{r3, lr}
   b69ca:	4b02      	ldr	r3, [pc, #8]	; (b69d4 <hal_ble_stack_init+0xc>)
   b69cc:	681b      	ldr	r3, [r3, #0]
   b69ce:	689b      	ldr	r3, [r3, #8]
   b69d0:	9301      	str	r3, [sp, #4]
   b69d2:	bd08      	pop	{r3, pc}
   b69d4:	00030278 	.word	0x00030278

000b69d8 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b69d8:	b508      	push	{r3, lr}
   b69da:	4b02      	ldr	r3, [pc, #8]	; (b69e4 <hal_ble_gap_start_scan+0xc>)
   b69dc:	681b      	ldr	r3, [r3, #0]
   b69de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b69e0:	9301      	str	r3, [sp, #4]
   b69e2:	bd08      	pop	{r3, pc}
   b69e4:	00030278 	.word	0x00030278

000b69e8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b69e8:	b508      	push	{r3, lr}
   b69ea:	4b03      	ldr	r3, [pc, #12]	; (b69f8 <hal_ble_gap_stop_scan+0x10>)
   b69ec:	681b      	ldr	r3, [r3, #0]
   b69ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b69f2:	9301      	str	r3, [sp, #4]
   b69f4:	bd08      	pop	{r3, pc}
   b69f6:	0000      	.short	0x0000
   b69f8:	00030278 	.word	0x00030278

000b69fc <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b03      	ldr	r3, [pc, #12]	; (b6a0c <hal_ble_gap_disconnect+0x10>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6a06:	9301      	str	r3, [sp, #4]
   b6a08:	bd08      	pop	{r3, pc}
   b6a0a:	0000      	.short	0x0000
   b6a0c:	00030278 	.word	0x00030278

000b6a10 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b03      	ldr	r3, [pc, #12]	; (b6a20 <hal_ble_gatt_client_discover_all_services+0x10>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b6a1a:	9301      	str	r3, [sp, #4]
   b6a1c:	bd08      	pop	{r3, pc}
   b6a1e:	0000      	.short	0x0000
   b6a20:	00030278 	.word	0x00030278

000b6a24 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b03      	ldr	r3, [pc, #12]	; (b6a34 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b6a2e:	9301      	str	r3, [sp, #4]
   b6a30:	bd08      	pop	{r3, pc}
   b6a32:	0000      	.short	0x0000
   b6a34:	00030278 	.word	0x00030278

000b6a38 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b6a38:	b508      	push	{r3, lr}
   b6a3a:	4b03      	ldr	r3, [pc, #12]	; (b6a48 <hal_ble_gatt_client_read+0x10>)
   b6a3c:	681b      	ldr	r3, [r3, #0]
   b6a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b6a42:	9301      	str	r3, [sp, #4]
   b6a44:	bd08      	pop	{r3, pc}
   b6a46:	0000      	.short	0x0000
   b6a48:	00030278 	.word	0x00030278

000b6a4c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b03      	ldr	r3, [pc, #12]	; (b6a5c <hal_ble_gap_connect+0x10>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b6a56:	9301      	str	r3, [sp, #4]
   b6a58:	bd08      	pop	{r3, pc}
   b6a5a:	0000      	.short	0x0000
   b6a5c:	00030278 	.word	0x00030278

000b6a60 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b03      	ldr	r3, [pc, #12]	; (b6a70 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6a6a:	9301      	str	r3, [sp, #4]
   b6a6c:	bd08      	pop	{r3, pc}
   b6a6e:	0000      	.short	0x0000
   b6a70:	00030278 	.word	0x00030278

000b6a74 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b6a74:	b508      	push	{r3, lr}
   b6a76:	4b03      	ldr	r3, [pc, #12]	; (b6a84 <hal_ble_gatt_client_configure_cccd+0x10>)
   b6a78:	681b      	ldr	r3, [r3, #0]
   b6a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b6a7e:	9301      	str	r3, [sp, #4]
   b6a80:	bd08      	pop	{r3, pc}
   b6a82:	0000      	.short	0x0000
   b6a84:	00030278 	.word	0x00030278

000b6a88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6a88:	b508      	push	{r3, lr}
   b6a8a:	4b02      	ldr	r3, [pc, #8]	; (b6a94 <HAL_RNG_GetRandomNumber+0xc>)
   b6a8c:	681b      	ldr	r3, [r3, #0]
   b6a8e:	685b      	ldr	r3, [r3, #4]
   b6a90:	9301      	str	r3, [sp, #4]
   b6a92:	bd08      	pop	{r3, pc}
   b6a94:	00030218 	.word	0x00030218

000b6a98 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6a98:	b508      	push	{r3, lr}
   b6a9a:	4b02      	ldr	r3, [pc, #8]	; (b6aa4 <HAL_Delay_Microseconds+0xc>)
   b6a9c:	681b      	ldr	r3, [r3, #0]
   b6a9e:	68db      	ldr	r3, [r3, #12]
   b6aa0:	9301      	str	r3, [sp, #4]
   b6aa2:	bd08      	pop	{r3, pc}
   b6aa4:	00030218 	.word	0x00030218

000b6aa8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6aa8:	b508      	push	{r3, lr}
   b6aaa:	4b02      	ldr	r3, [pc, #8]	; (b6ab4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6aac:	681b      	ldr	r3, [r3, #0]
   b6aae:	691b      	ldr	r3, [r3, #16]
   b6ab0:	9301      	str	r3, [sp, #4]
   b6ab2:	bd08      	pop	{r3, pc}
   b6ab4:	00030218 	.word	0x00030218

000b6ab8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6ab8:	b508      	push	{r3, lr}
   b6aba:	4b02      	ldr	r3, [pc, #8]	; (b6ac4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6abc:	681b      	ldr	r3, [r3, #0]
   b6abe:	695b      	ldr	r3, [r3, #20]
   b6ac0:	9301      	str	r3, [sp, #4]
   b6ac2:	bd08      	pop	{r3, pc}
   b6ac4:	00030218 	.word	0x00030218

000b6ac8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6ac8:	b508      	push	{r3, lr}
   b6aca:	4b02      	ldr	r3, [pc, #8]	; (b6ad4 <if_index_to_name+0xc>)
   b6acc:	681b      	ldr	r3, [r3, #0]
   b6ace:	695b      	ldr	r3, [r3, #20]
   b6ad0:	9301      	str	r3, [sp, #4]
   b6ad2:	bd08      	pop	{r3, pc}
   b6ad4:	0003026c 	.word	0x0003026c

000b6ad8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6ad8:	b508      	push	{r3, lr}
   b6ada:	4b02      	ldr	r3, [pc, #8]	; (b6ae4 <HAL_Pin_Map+0xc>)
   b6adc:	681b      	ldr	r3, [r3, #0]
   b6ade:	681b      	ldr	r3, [r3, #0]
   b6ae0:	9301      	str	r3, [sp, #4]
   b6ae2:	bd08      	pop	{r3, pc}
   b6ae4:	0003022c 	.word	0x0003022c

000b6ae8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6ae8:	b508      	push	{r3, lr}
   b6aea:	4b02      	ldr	r3, [pc, #8]	; (b6af4 <HAL_Pin_Mode+0xc>)
   b6aec:	681b      	ldr	r3, [r3, #0]
   b6aee:	689b      	ldr	r3, [r3, #8]
   b6af0:	9301      	str	r3, [sp, #4]
   b6af2:	bd08      	pop	{r3, pc}
   b6af4:	0003022c 	.word	0x0003022c

000b6af8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6af8:	b508      	push	{r3, lr}
   b6afa:	4b02      	ldr	r3, [pc, #8]	; (b6b04 <HAL_Get_Pin_Mode+0xc>)
   b6afc:	681b      	ldr	r3, [r3, #0]
   b6afe:	68db      	ldr	r3, [r3, #12]
   b6b00:	9301      	str	r3, [sp, #4]
   b6b02:	bd08      	pop	{r3, pc}
   b6b04:	0003022c 	.word	0x0003022c

000b6b08 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6b08:	b508      	push	{r3, lr}
   b6b0a:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <HAL_GPIO_Write+0xc>)
   b6b0c:	681b      	ldr	r3, [r3, #0]
   b6b0e:	691b      	ldr	r3, [r3, #16]
   b6b10:	9301      	str	r3, [sp, #4]
   b6b12:	bd08      	pop	{r3, pc}
   b6b14:	0003022c 	.word	0x0003022c

000b6b18 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6b18:	b508      	push	{r3, lr}
   b6b1a:	4b02      	ldr	r3, [pc, #8]	; (b6b24 <netdb_freeaddrinfo+0xc>)
   b6b1c:	681b      	ldr	r3, [r3, #0]
   b6b1e:	689b      	ldr	r3, [r3, #8]
   b6b20:	9301      	str	r3, [sp, #4]
   b6b22:	bd08      	pop	{r3, pc}
   b6b24:	00030268 	.word	0x00030268

000b6b28 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6b28:	b508      	push	{r3, lr}
   b6b2a:	4b02      	ldr	r3, [pc, #8]	; (b6b34 <netdb_getaddrinfo+0xc>)
   b6b2c:	681b      	ldr	r3, [r3, #0]
   b6b2e:	68db      	ldr	r3, [r3, #12]
   b6b30:	9301      	str	r3, [sp, #4]
   b6b32:	bd08      	pop	{r3, pc}
   b6b34:	00030268 	.word	0x00030268

000b6b38 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6b38:	b508      	push	{r3, lr}
   b6b3a:	4b02      	ldr	r3, [pc, #8]	; (b6b44 <panic_+0xc>)
   b6b3c:	681b      	ldr	r3, [r3, #0]
   b6b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b40:	9301      	str	r3, [sp, #4]
   b6b42:	bd08      	pop	{r3, pc}
   b6b44:	00030260 	.word	0x00030260

000b6b48 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6b48:	b508      	push	{r3, lr}
   b6b4a:	4b02      	ldr	r3, [pc, #8]	; (b6b54 <log_message+0xc>)
   b6b4c:	681b      	ldr	r3, [r3, #0]
   b6b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6b50:	9301      	str	r3, [sp, #4]
   b6b52:	bd08      	pop	{r3, pc}
   b6b54:	00030260 	.word	0x00030260

000b6b58 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6b58:	b508      	push	{r3, lr}
   b6b5a:	4b02      	ldr	r3, [pc, #8]	; (b6b64 <log_message_v+0xc>)
   b6b5c:	681b      	ldr	r3, [r3, #0]
   b6b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6b60:	9301      	str	r3, [sp, #4]
   b6b62:	bd08      	pop	{r3, pc}
   b6b64:	00030260 	.word	0x00030260

000b6b68 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6b68:	b508      	push	{r3, lr}
   b6b6a:	4b02      	ldr	r3, [pc, #8]	; (b6b74 <log_level_name+0xc>)
   b6b6c:	681b      	ldr	r3, [r3, #0]
   b6b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6b70:	9301      	str	r3, [sp, #4]
   b6b72:	bd08      	pop	{r3, pc}
   b6b74:	00030260 	.word	0x00030260

000b6b78 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6b78:	b508      	push	{r3, lr}
   b6b7a:	4b02      	ldr	r3, [pc, #8]	; (b6b84 <log_set_callbacks+0xc>)
   b6b7c:	681b      	ldr	r3, [r3, #0]
   b6b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6b80:	9301      	str	r3, [sp, #4]
   b6b82:	bd08      	pop	{r3, pc}
   b6b84:	00030260 	.word	0x00030260

000b6b88 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6b88:	b508      	push	{r3, lr}
   b6b8a:	4b02      	ldr	r3, [pc, #8]	; (b6b94 <spark_deviceID+0xc>)
   b6b8c:	681b      	ldr	r3, [r3, #0]
   b6b8e:	69db      	ldr	r3, [r3, #28]
   b6b90:	9301      	str	r3, [sp, #4]
   b6b92:	bd08      	pop	{r3, pc}
   b6b94:	00030244 	.word	0x00030244

000b6b98 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6b98:	b508      	push	{r3, lr}
   b6b9a:	4b02      	ldr	r3, [pc, #8]	; (b6ba4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6b9c:	681b      	ldr	r3, [r3, #0]
   b6b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ba0:	9301      	str	r3, [sp, #4]
   b6ba2:	bd08      	pop	{r3, pc}
   b6ba4:	00030244 	.word	0x00030244

000b6ba8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ba8:	b508      	push	{r3, lr}
   b6baa:	4b02      	ldr	r3, [pc, #8]	; (b6bb4 <network_connect+0xc>)
   b6bac:	681b      	ldr	r3, [r3, #0]
   b6bae:	685b      	ldr	r3, [r3, #4]
   b6bb0:	9301      	str	r3, [sp, #4]
   b6bb2:	bd08      	pop	{r3, pc}
   b6bb4:	00030240 	.word	0x00030240

000b6bb8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6bb8:	b508      	push	{r3, lr}
   b6bba:	4b02      	ldr	r3, [pc, #8]	; (b6bc4 <network_connecting+0xc>)
   b6bbc:	681b      	ldr	r3, [r3, #0]
   b6bbe:	689b      	ldr	r3, [r3, #8]
   b6bc0:	9301      	str	r3, [sp, #4]
   b6bc2:	bd08      	pop	{r3, pc}
   b6bc4:	00030240 	.word	0x00030240

000b6bc8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6bc8:	b508      	push	{r3, lr}
   b6bca:	4b02      	ldr	r3, [pc, #8]	; (b6bd4 <network_disconnect+0xc>)
   b6bcc:	681b      	ldr	r3, [r3, #0]
   b6bce:	68db      	ldr	r3, [r3, #12]
   b6bd0:	9301      	str	r3, [sp, #4]
   b6bd2:	bd08      	pop	{r3, pc}
   b6bd4:	00030240 	.word	0x00030240

000b6bd8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6bd8:	b508      	push	{r3, lr}
   b6bda:	4b02      	ldr	r3, [pc, #8]	; (b6be4 <network_ready+0xc>)
   b6bdc:	681b      	ldr	r3, [r3, #0]
   b6bde:	691b      	ldr	r3, [r3, #16]
   b6be0:	9301      	str	r3, [sp, #4]
   b6be2:	bd08      	pop	{r3, pc}
   b6be4:	00030240 	.word	0x00030240

000b6be8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6be8:	b508      	push	{r3, lr}
   b6bea:	4b02      	ldr	r3, [pc, #8]	; (b6bf4 <network_on+0xc>)
   b6bec:	681b      	ldr	r3, [r3, #0]
   b6bee:	695b      	ldr	r3, [r3, #20]
   b6bf0:	9301      	str	r3, [sp, #4]
   b6bf2:	bd08      	pop	{r3, pc}
   b6bf4:	00030240 	.word	0x00030240

000b6bf8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bf8:	b508      	push	{r3, lr}
   b6bfa:	4b02      	ldr	r3, [pc, #8]	; (b6c04 <network_off+0xc>)
   b6bfc:	681b      	ldr	r3, [r3, #0]
   b6bfe:	699b      	ldr	r3, [r3, #24]
   b6c00:	9301      	str	r3, [sp, #4]
   b6c02:	bd08      	pop	{r3, pc}
   b6c04:	00030240 	.word	0x00030240

000b6c08 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6c08:	b508      	push	{r3, lr}
   b6c0a:	4b02      	ldr	r3, [pc, #8]	; (b6c14 <network_listen+0xc>)
   b6c0c:	681b      	ldr	r3, [r3, #0]
   b6c0e:	69db      	ldr	r3, [r3, #28]
   b6c10:	9301      	str	r3, [sp, #4]
   b6c12:	bd08      	pop	{r3, pc}
   b6c14:	00030240 	.word	0x00030240

000b6c18 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6c18:	b508      	push	{r3, lr}
   b6c1a:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <network_listening+0xc>)
   b6c1c:	681b      	ldr	r3, [r3, #0]
   b6c1e:	6a1b      	ldr	r3, [r3, #32]
   b6c20:	9301      	str	r3, [sp, #4]
   b6c22:	bd08      	pop	{r3, pc}
   b6c24:	00030240 	.word	0x00030240

000b6c28 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6c28:	b508      	push	{r3, lr}
   b6c2a:	4b02      	ldr	r3, [pc, #8]	; (b6c34 <network_set_listen_timeout+0xc>)
   b6c2c:	681b      	ldr	r3, [r3, #0]
   b6c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c30:	9301      	str	r3, [sp, #4]
   b6c32:	bd08      	pop	{r3, pc}
   b6c34:	00030240 	.word	0x00030240

000b6c38 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6c38:	b508      	push	{r3, lr}
   b6c3a:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <network_get_listen_timeout+0xc>)
   b6c3c:	681b      	ldr	r3, [r3, #0]
   b6c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c40:	9301      	str	r3, [sp, #4]
   b6c42:	bd08      	pop	{r3, pc}
   b6c44:	00030240 	.word	0x00030240

000b6c48 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b02      	ldr	r3, [pc, #8]	; (b6c54 <network_is_on+0xc>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c50:	9301      	str	r3, [sp, #4]
   b6c52:	bd08      	pop	{r3, pc}
   b6c54:	00030240 	.word	0x00030240

000b6c58 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6c58:	b508      	push	{r3, lr}
   b6c5a:	4b02      	ldr	r3, [pc, #8]	; (b6c64 <network_is_off+0xc>)
   b6c5c:	681b      	ldr	r3, [r3, #0]
   b6c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	bd08      	pop	{r3, pc}
   b6c64:	00030240 	.word	0x00030240

000b6c68 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6c68:	b508      	push	{r3, lr}
   b6c6a:	4b02      	ldr	r3, [pc, #8]	; (b6c74 <set_system_mode+0xc>)
   b6c6c:	681b      	ldr	r3, [r3, #0]
   b6c6e:	685b      	ldr	r3, [r3, #4]
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	bd08      	pop	{r3, pc}
   b6c74:	00030220 	.word	0x00030220

000b6c78 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6c78:	b508      	push	{r3, lr}
   b6c7a:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <system_delay_ms+0xc>)
   b6c7c:	681b      	ldr	r3, [r3, #0]
   b6c7e:	695b      	ldr	r3, [r3, #20]
   b6c80:	9301      	str	r3, [sp, #4]
   b6c82:	bd08      	pop	{r3, pc}
   b6c84:	00030220 	.word	0x00030220

000b6c88 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6c88:	b508      	push	{r3, lr}
   b6c8a:	4b03      	ldr	r3, [pc, #12]	; (b6c98 <system_ctrl_set_app_request_handler+0x10>)
   b6c8c:	681b      	ldr	r3, [r3, #0]
   b6c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6c92:	9301      	str	r3, [sp, #4]
   b6c94:	bd08      	pop	{r3, pc}
   b6c96:	0000      	.short	0x0000
   b6c98:	00030220 	.word	0x00030220

000b6c9c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b03      	ldr	r3, [pc, #12]	; (b6cac <system_ctrl_set_result+0x10>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6ca6:	9301      	str	r3, [sp, #4]
   b6ca8:	bd08      	pop	{r3, pc}
   b6caa:	0000      	.short	0x0000
   b6cac:	00030220 	.word	0x00030220

000b6cb0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <malloc+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	681b      	ldr	r3, [r3, #0]
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	0003021c 	.word	0x0003021c

000b6cc0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <free+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	685b      	ldr	r3, [r3, #4]
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	0003021c 	.word	0x0003021c

000b6cd0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <realloc+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	689b      	ldr	r3, [r3, #8]
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	0003021c 	.word	0x0003021c

000b6ce0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b02      	ldr	r3, [pc, #8]	; (b6cec <vsnprintf+0xc>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ce8:	9301      	str	r3, [sp, #4]
   b6cea:	bd08      	pop	{r3, pc}
   b6cec:	0003021c 	.word	0x0003021c

000b6cf0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6cf0:	b508      	push	{r3, lr}
   b6cf2:	4b02      	ldr	r3, [pc, #8]	; (b6cfc <abort+0xc>)
   b6cf4:	681b      	ldr	r3, [r3, #0]
   b6cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cf8:	9301      	str	r3, [sp, #4]
   b6cfa:	bd08      	pop	{r3, pc}
   b6cfc:	0003021c 	.word	0x0003021c

000b6d00 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6d00:	b508      	push	{r3, lr}
   b6d02:	4b02      	ldr	r3, [pc, #8]	; (b6d0c <__errno+0xc>)
   b6d04:	681b      	ldr	r3, [r3, #0]
   b6d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d08:	9301      	str	r3, [sp, #4]
   b6d0a:	bd08      	pop	{r3, pc}
   b6d0c:	0003021c 	.word	0x0003021c

000b6d10 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6d10:	b508      	push	{r3, lr}
   b6d12:	4b02      	ldr	r3, [pc, #8]	; (b6d1c <__assert_func+0xc>)
   b6d14:	681b      	ldr	r3, [r3, #0]
   b6d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d18:	9301      	str	r3, [sp, #4]
   b6d1a:	bd08      	pop	{r3, pc}
   b6d1c:	0003021c 	.word	0x0003021c

000b6d20 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6d20:	b508      	push	{r3, lr}
   b6d22:	4b02      	ldr	r3, [pc, #8]	; (b6d2c <newlib_impure_ptr_callback+0xc>)
   b6d24:	681b      	ldr	r3, [r3, #0]
   b6d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d28:	9301      	str	r3, [sp, #4]
   b6d2a:	bd08      	pop	{r3, pc}
   b6d2c:	0003021c 	.word	0x0003021c

000b6d30 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6d30:	f100 0310 	add.w	r3, r0, #16
   b6d34:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6d36:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6d3a:	2901      	cmp	r1, #1
   b6d3c:	4618      	mov	r0, r3
   b6d3e:	d108      	bne.n	b6d52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6d40:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6d44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6d48:	3a01      	subs	r2, #1
   b6d4a:	f103 0310 	add.w	r3, r3, #16
   b6d4e:	d1f2      	bne.n	b6d36 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6d50:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6d52:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6d54:	bf04      	itt	eq
   b6d56:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6d5a:	1852      	addeq	r2, r2, r1
   b6d5c:	e7f4      	b.n	b6d48 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6d5e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6d5e:	b40e      	push	{r1, r2, r3}
   b6d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d62:	b088      	sub	sp, #32
   b6d64:	af00      	add	r7, sp, #0
   b6d66:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d6a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6d6c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d70:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6d72:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d74:	462b      	mov	r3, r5
   b6d76:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6d78:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d7a:	f7ff ffb1 	bl	b6ce0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6d7e:	280f      	cmp	r0, #15
   b6d80:	687a      	ldr	r2, [r7, #4]
   b6d82:	d91a      	bls.n	b6dba <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6d84:	f100 0308 	add.w	r3, r0, #8
   b6d88:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6d8c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6d8e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d92:	1c41      	adds	r1, r0, #1
   b6d94:	462b      	mov	r3, r5
   b6d96:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6d98:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d9a:	f7ff ffa1 	bl	b6ce0 <vsnprintf>
        if (n > 0) {
   b6d9e:	1e02      	subs	r2, r0, #0
   b6da0:	dd04      	ble.n	b6dac <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6da2:	6823      	ldr	r3, [r4, #0]
   b6da4:	4669      	mov	r1, sp
   b6da6:	689b      	ldr	r3, [r3, #8]
   b6da8:	4620      	mov	r0, r4
   b6daa:	4798      	blx	r3
   b6dac:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6dae:	3720      	adds	r7, #32
   b6db0:	46bd      	mov	sp, r7
   b6db2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6db6:	b003      	add	sp, #12
   b6db8:	4770      	bx	lr
    } else if (n > 0) {
   b6dba:	2800      	cmp	r0, #0
   b6dbc:	d0f7      	beq.n	b6dae <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6dbe:	6823      	ldr	r3, [r4, #0]
   b6dc0:	4602      	mov	r2, r0
   b6dc2:	689b      	ldr	r3, [r3, #8]
   b6dc4:	f107 0110 	add.w	r1, r7, #16
   b6dc8:	4620      	mov	r0, r4
   b6dca:	4798      	blx	r3
}
   b6dcc:	e7ef      	b.n	b6dae <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6dce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6dce:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6dd0:	6843      	ldr	r3, [r0, #4]
   b6dd2:	3b01      	subs	r3, #1
    {
   b6dd4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6dd6:	6043      	str	r3, [r0, #4]
   b6dd8:	b963      	cbnz	r3, b6df4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6dda:	6803      	ldr	r3, [r0, #0]
   b6ddc:	689b      	ldr	r3, [r3, #8]
   b6dde:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6de0:	68a3      	ldr	r3, [r4, #8]
   b6de2:	3b01      	subs	r3, #1
   b6de4:	60a3      	str	r3, [r4, #8]
   b6de6:	b92b      	cbnz	r3, b6df4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6de8:	6823      	ldr	r3, [r4, #0]
   b6dea:	4620      	mov	r0, r4
   b6dec:	68db      	ldr	r3, [r3, #12]
    }
   b6dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6df2:	4718      	bx	r3
    }
   b6df4:	bd10      	pop	{r4, pc}

000b6df6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6df6:	b538      	push	{r3, r4, r5, lr}
   b6df8:	680b      	ldr	r3, [r1, #0]
   b6dfa:	6003      	str	r3, [r0, #0]
   b6dfc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6dfe:	6843      	ldr	r3, [r0, #4]
   b6e00:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6e02:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6e04:	d008      	beq.n	b6e18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6e06:	b115      	cbz	r5, b6e0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6e08:	686b      	ldr	r3, [r5, #4]
   b6e0a:	3301      	adds	r3, #1
   b6e0c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6e0e:	6860      	ldr	r0, [r4, #4]
   b6e10:	b108      	cbz	r0, b6e16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6e12:	f7ff ffdc 	bl	b6dce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6e16:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6e18:	bd38      	pop	{r3, r4, r5, pc}

000b6e1a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b6e1a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6e1c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6e1e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6e22:	689b      	ldr	r3, [r3, #8]
   b6e24:	2201      	movs	r2, #1
   b6e26:	f10d 0107 	add.w	r1, sp, #7
   b6e2a:	4798      	blx	r3
}
   b6e2c:	b003      	add	sp, #12
   b6e2e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6e32:	460b      	mov	r3, r1
   b6e34:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6e36:	2200      	movs	r2, #0
   b6e38:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6e3a:	e9c0 2200 	strd	r2, r2, [r0]
   b6e3e:	4604      	mov	r4, r0
        t_ = t;
   b6e40:	6083      	str	r3, [r0, #8]
    if (t) {
   b6e42:	b90b      	cbnz	r3, b6e48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6e44:	4620      	mov	r0, r4
   b6e46:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6e48:	f7ff ffd5 	bl	b6df6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6e4c:	e7fa      	b.n	b6e44 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6e4e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6e4e:	6883      	ldr	r3, [r0, #8]
   b6e50:	b1eb      	cbz	r3, b6e8e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6e52:	781a      	ldrb	r2, [r3, #0]
   b6e54:	2a03      	cmp	r2, #3
   b6e56:	d81a      	bhi.n	b6e8e <_ZNK5spark9JSONValue4typeEv+0x40>
   b6e58:	e8df f002 	tbb	[pc, r2]
   b6e5c:	1b021704 	.word	0x1b021704
   b6e60:	2005      	movs	r0, #5
   b6e62:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6e64:	6802      	ldr	r2, [r0, #0]
   b6e66:	685b      	ldr	r3, [r3, #4]
   b6e68:	6852      	ldr	r2, [r2, #4]
   b6e6a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6e6c:	282d      	cmp	r0, #45	; 0x2d
   b6e6e:	d012      	beq.n	b6e96 <_ZNK5spark9JSONValue4typeEv+0x48>
   b6e70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6e74:	2b09      	cmp	r3, #9
   b6e76:	d90e      	bls.n	b6e96 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6e78:	2874      	cmp	r0, #116	; 0x74
   b6e7a:	d00e      	beq.n	b6e9a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6e7c:	2866      	cmp	r0, #102	; 0x66
   b6e7e:	d00c      	beq.n	b6e9a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6e80:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6e84:	4258      	negs	r0, r3
   b6e86:	4158      	adcs	r0, r3
   b6e88:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6e8a:	2006      	movs	r0, #6
   b6e8c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6e8e:	2000      	movs	r0, #0
   b6e90:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6e92:	2004      	movs	r0, #4
   b6e94:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6e96:	2003      	movs	r0, #3
   b6e98:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6e9a:	2002      	movs	r0, #2
}
   b6e9c:	4770      	bx	lr

000b6e9e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6e9e:	b510      	push	{r4, lr}
   b6ea0:	4604      	mov	r4, r0
    switch (type()) {
   b6ea2:	f7ff ffd4 	bl	b6e4e <_ZNK5spark9JSONValue4typeEv>
   b6ea6:	2802      	cmp	r0, #2
   b6ea8:	d00e      	beq.n	b6ec8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6eaa:	1ec3      	subs	r3, r0, #3
   b6eac:	b2db      	uxtb	r3, r3
   b6eae:	2b01      	cmp	r3, #1
   b6eb0:	d814      	bhi.n	b6edc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6eb2:	6822      	ldr	r2, [r4, #0]
   b6eb4:	68a3      	ldr	r3, [r4, #8]
   b6eb6:	6850      	ldr	r0, [r2, #4]
   b6eb8:	685b      	ldr	r3, [r3, #4]
}
   b6eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6ebe:	220a      	movs	r2, #10
   b6ec0:	2100      	movs	r1, #0
   b6ec2:	4418      	add	r0, r3
   b6ec4:	f005 bca2 	b.w	bc80c <strtol>
        const char* const s = d_->json + t_->start;
   b6ec8:	6822      	ldr	r2, [r4, #0]
   b6eca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6ecc:	6852      	ldr	r2, [r2, #4]
   b6ece:	685b      	ldr	r3, [r3, #4]
   b6ed0:	5cd0      	ldrb	r0, [r2, r3]
   b6ed2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6ed6:	4258      	negs	r0, r3
   b6ed8:	4158      	adcs	r0, r3
}
   b6eda:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6edc:	2000      	movs	r0, #0
   b6ede:	e7fc      	b.n	b6eda <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6ee0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6ee0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6ee2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6ee4:	e9c0 3300 	strd	r3, r3, [r0]
   b6ee8:	4604      	mov	r4, r0
        n_(0) {
   b6eea:	480e      	ldr	r0, [pc, #56]	; (b6f24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6eec:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6ef0:	b1a9      	cbz	r1, b6f1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6ef2:	780b      	ldrb	r3, [r1, #0]
   b6ef4:	2b03      	cmp	r3, #3
   b6ef6:	d006      	beq.n	b6f06 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6ef8:	b98b      	cbnz	r3, b6f1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6efa:	6813      	ldr	r3, [r2, #0]
   b6efc:	6858      	ldr	r0, [r3, #4]
   b6efe:	684b      	ldr	r3, [r1, #4]
   b6f00:	5cc3      	ldrb	r3, [r0, r3]
   b6f02:	2b6e      	cmp	r3, #110	; 0x6e
   b6f04:	d007      	beq.n	b6f16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6f06:	6813      	ldr	r3, [r2, #0]
   b6f08:	684d      	ldr	r5, [r1, #4]
   b6f0a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6f0c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6f0e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6f10:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6f12:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6f14:	60e3      	str	r3, [r4, #12]
   b6f16:	4611      	mov	r1, r2
   b6f18:	4620      	mov	r0, r4
   b6f1a:	f7ff ff6c 	bl	b6df6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6f1e:	4620      	mov	r0, r4
   b6f20:	bd38      	pop	{r3, r4, r5, pc}
   b6f22:	bf00      	nop
   b6f24:	000be05f 	.word	0x000be05f

000b6f28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6f28:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6f2a:	2500      	movs	r5, #0
   b6f2c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6f2e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6f32:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6f36:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6f3a:	4604      	mov	r4, r0
   b6f3c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6f3e:	b14b      	cbz	r3, b6f54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6f40:	781a      	ldrb	r2, [r3, #0]
   b6f42:	2a01      	cmp	r2, #1
   b6f44:	d106      	bne.n	b6f54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6f46:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6f4a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6f4c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6f4e:	6143      	str	r3, [r0, #20]
   b6f50:	f7ff ff51 	bl	b6df6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6f54:	4620      	mov	r0, r4
   b6f56:	bd38      	pop	{r3, r4, r5, pc}

000b6f58 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6f58:	b510      	push	{r4, lr}
    if (!n_) {
   b6f5a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6f5c:	4604      	mov	r4, r0
    if (!n_) {
   b6f5e:	b163      	cbz	r3, b6f7a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6f60:	6880      	ldr	r0, [r0, #8]
   b6f62:	60e0      	str	r0, [r4, #12]
    --n_;
   b6f64:	3b01      	subs	r3, #1
    ++t_;
   b6f66:	3010      	adds	r0, #16
   b6f68:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6f6a:	6120      	str	r0, [r4, #16]
    --n_;
   b6f6c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6f6e:	b113      	cbz	r3, b6f76 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6f70:	f7ff fede 	bl	b6d30 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6f74:	60a0      	str	r0, [r4, #8]
    return true;
   b6f76:	2001      	movs	r0, #1
   b6f78:	e000      	b.n	b6f7c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6f7a:	4618      	mov	r0, r3
}
   b6f7c:	bd10      	pop	{r4, pc}

000b6f7e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6f7e:	b510      	push	{r4, lr}
    write('}');
   b6f80:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6f82:	4604      	mov	r4, r0
    write('}');
   b6f84:	f7ff ff49 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6f88:	2301      	movs	r3, #1
   b6f8a:	7123      	strb	r3, [r4, #4]
}
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	bd10      	pop	{r4, pc}

000b6f90 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6f90:	b508      	push	{r3, lr}
    switch (state_) {
   b6f92:	7903      	ldrb	r3, [r0, #4]
   b6f94:	2b01      	cmp	r3, #1
   b6f96:	d002      	beq.n	b6f9e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6f98:	2b02      	cmp	r3, #2
   b6f9a:	d004      	beq.n	b6fa6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6f9c:	bd08      	pop	{r3, pc}
        write(',');
   b6f9e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6fa0:	f7ff ff3b 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
}
   b6fa4:	e7fa      	b.n	b6f9c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6fa6:	213a      	movs	r1, #58	; 0x3a
   b6fa8:	e7fa      	b.n	b6fa0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6faa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6faa:	b510      	push	{r4, lr}
   b6fac:	4604      	mov	r4, r0
    writeSeparator();
   b6fae:	f7ff ffef 	bl	b6f90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	217b      	movs	r1, #123	; 0x7b
   b6fb6:	f7ff ff30 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6fba:	2300      	movs	r3, #0
   b6fbc:	7123      	strb	r3, [r4, #4]
}
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	bd10      	pop	{r4, pc}
	...

000b6fc4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6fc4:	b513      	push	{r0, r1, r4, lr}
   b6fc6:	4604      	mov	r4, r0
   b6fc8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6fca:	f7ff ffe1 	bl	b6f90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6fce:	6823      	ldr	r3, [r4, #0]
   b6fd0:	9a01      	ldr	r2, [sp, #4]
   b6fd2:	68db      	ldr	r3, [r3, #12]
   b6fd4:	4903      	ldr	r1, [pc, #12]	; (b6fe4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	4798      	blx	r3
    state_ = NEXT;
   b6fda:	2301      	movs	r3, #1
}
   b6fdc:	4620      	mov	r0, r4
    state_ = NEXT;
   b6fde:	7123      	strb	r3, [r4, #4]
}
   b6fe0:	b002      	add	sp, #8
   b6fe2:	bd10      	pop	{r4, pc}
   b6fe4:	000bdedc 	.word	0x000bdedc

000b6fe8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6fe8:	b513      	push	{r0, r1, r4, lr}
   b6fea:	4604      	mov	r4, r0
   b6fec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6fee:	f7ff ffcf 	bl	b6f90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6ff2:	6823      	ldr	r3, [r4, #0]
   b6ff4:	9a01      	ldr	r2, [sp, #4]
   b6ff6:	68db      	ldr	r3, [r3, #12]
   b6ff8:	4903      	ldr	r1, [pc, #12]	; (b7008 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6ffa:	4620      	mov	r0, r4
   b6ffc:	4798      	blx	r3
    state_ = NEXT;
   b6ffe:	2301      	movs	r3, #1
}
   b7000:	4620      	mov	r0, r4
    state_ = NEXT;
   b7002:	7123      	strb	r3, [r4, #4]
}
   b7004:	b002      	add	sp, #8
   b7006:	bd10      	pop	{r4, pc}
   b7008:	000bde44 	.word	0x000bde44

000b700c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7010:	460d      	mov	r5, r1
    write('"');
   b7012:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7014:	4690      	mov	r8, r2
   b7016:	4604      	mov	r4, r0
    write('"');
   b7018:	f7ff feff 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b701c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b70c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7020:	44a8      	add	r8, r5
    const char *s = str;
   b7022:	462f      	mov	r7, r5
    while (s != end) {
   b7024:	4547      	cmp	r7, r8
   b7026:	46ba      	mov	sl, r7
   b7028:	d03d      	beq.n	b70a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b702a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b702e:	2e22      	cmp	r6, #34	; 0x22
   b7030:	d006      	beq.n	b7040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7032:	2e5c      	cmp	r6, #92	; 0x5c
   b7034:	d004      	beq.n	b7040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7036:	4630      	mov	r0, r6
   b7038:	f005 fa74 	bl	bc524 <isprint>
   b703c:	2800      	cmp	r0, #0
   b703e:	d1f1      	bne.n	b7024 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7040:	6823      	ldr	r3, [r4, #0]
   b7042:	ebaa 0205 	sub.w	r2, sl, r5
   b7046:	689b      	ldr	r3, [r3, #8]
   b7048:	4629      	mov	r1, r5
   b704a:	4620      	mov	r0, r4
   b704c:	4798      	blx	r3
            write('\\');
   b704e:	215c      	movs	r1, #92	; 0x5c
   b7050:	4620      	mov	r0, r4
   b7052:	f7ff fee2 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7056:	2e0d      	cmp	r6, #13
   b7058:	d80a      	bhi.n	b7070 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b705a:	2e07      	cmp	r6, #7
   b705c:	d91c      	bls.n	b7098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b705e:	f1a6 0308 	sub.w	r3, r6, #8
   b7062:	2b05      	cmp	r3, #5
   b7064:	d818      	bhi.n	b7098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7066:	e8df f003 	tbb	[pc, r3]
   b706a:	0f0d      	.short	0x0f0d
   b706c:	15131711 	.word	0x15131711
   b7070:	2e22      	cmp	r6, #34	; 0x22
   b7072:	d001      	beq.n	b7078 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7074:	2e5c      	cmp	r6, #92	; 0x5c
   b7076:	d10f      	bne.n	b7098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7078:	4631      	mov	r1, r6
                write('b');
   b707a:	4620      	mov	r0, r4
   b707c:	f7ff fecd 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7080:	463d      	mov	r5, r7
    while (s != end) {
   b7082:	e7cf      	b.n	b7024 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7084:	2162      	movs	r1, #98	; 0x62
   b7086:	e7f8      	b.n	b707a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7088:	2174      	movs	r1, #116	; 0x74
   b708a:	e7f6      	b.n	b707a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b708c:	216e      	movs	r1, #110	; 0x6e
   b708e:	e7f4      	b.n	b707a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7090:	2166      	movs	r1, #102	; 0x66
   b7092:	e7f2      	b.n	b707a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7094:	2172      	movs	r1, #114	; 0x72
   b7096:	e7f0      	b.n	b707a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7098:	6823      	ldr	r3, [r4, #0]
   b709a:	4632      	mov	r2, r6
   b709c:	68db      	ldr	r3, [r3, #12]
   b709e:	4649      	mov	r1, r9
   b70a0:	4620      	mov	r0, r4
   b70a2:	4798      	blx	r3
                break;
   b70a4:	e7ec      	b.n	b7080 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b70a6:	42bd      	cmp	r5, r7
   b70a8:	d005      	beq.n	b70b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b70aa:	6823      	ldr	r3, [r4, #0]
   b70ac:	1b7a      	subs	r2, r7, r5
   b70ae:	689b      	ldr	r3, [r3, #8]
   b70b0:	4629      	mov	r1, r5
   b70b2:	4620      	mov	r0, r4
   b70b4:	4798      	blx	r3
    }
    write('"');
   b70b6:	2122      	movs	r1, #34	; 0x22
   b70b8:	4620      	mov	r0, r4
   b70ba:	f7ff feae 	bl	b6e1a <_ZN5spark10JSONWriter5writeEc>
}
   b70be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b70c2:	bf00      	nop
   b70c4:	000bde47 	.word	0x000bde47

000b70c8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b70c8:	b513      	push	{r0, r1, r4, lr}
   b70ca:	4604      	mov	r4, r0
   b70cc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b70d0:	f7ff ff5e 	bl	b6f90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b70d4:	4620      	mov	r0, r4
   b70d6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b70da:	f7ff ff97 	bl	b700c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b70de:	2302      	movs	r3, #2
}
   b70e0:	4620      	mov	r0, r4
    state_ = VALUE;
   b70e2:	7123      	strb	r3, [r4, #4]
}
   b70e4:	b002      	add	sp, #8
   b70e6:	bd10      	pop	{r4, pc}

000b70e8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b70e8:	b513      	push	{r0, r1, r4, lr}
   b70ea:	4604      	mov	r4, r0
   b70ec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b70f0:	f7ff ff4e 	bl	b6f90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b70f4:	4620      	mov	r0, r4
   b70f6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b70fa:	f7ff ff87 	bl	b700c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b70fe:	2301      	movs	r3, #1
}
   b7100:	4620      	mov	r0, r4
    state_ = NEXT;
   b7102:	7123      	strb	r3, [r4, #4]
}
   b7104:	b002      	add	sp, #8
   b7106:	bd10      	pop	{r4, pc}

000b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7108:	b510      	push	{r4, lr}
   b710a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b710c:	6800      	ldr	r0, [r0, #0]
   b710e:	b108      	cbz	r0, b7114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7110:	f7ff fe5d 	bl	b6dce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7114:	4620      	mov	r0, r4
   b7116:	bd10      	pop	{r4, pc}

000b7118 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7118:	2300      	movs	r3, #0
   b711a:	6840      	ldr	r0, [r0, #4]
   b711c:	461a      	mov	r2, r3
   b711e:	f7ff bd43 	b.w	b6ba8 <network_connect>

000b7122 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7122:	6840      	ldr	r0, [r0, #4]
   b7124:	2200      	movs	r2, #0
   b7126:	2102      	movs	r1, #2
   b7128:	f7ff bd4e 	b.w	b6bc8 <network_disconnect>

000b712c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b712c:	2200      	movs	r2, #0
   b712e:	6840      	ldr	r0, [r0, #4]
   b7130:	4611      	mov	r1, r2
   b7132:	f7ff bd41 	b.w	b6bb8 <network_connecting>

000b7136 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7136:	2200      	movs	r2, #0
   b7138:	6840      	ldr	r0, [r0, #4]
   b713a:	4611      	mov	r1, r2
   b713c:	f7ff bd4c 	b.w	b6bd8 <network_ready>

000b7140 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7140:	2300      	movs	r3, #0
   b7142:	6840      	ldr	r0, [r0, #4]
   b7144:	461a      	mov	r2, r3
   b7146:	4619      	mov	r1, r3
   b7148:	f7ff bd4e 	b.w	b6be8 <network_on>

000b714c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b714c:	2300      	movs	r3, #0
   b714e:	6840      	ldr	r0, [r0, #4]
   b7150:	461a      	mov	r2, r3
   b7152:	4619      	mov	r1, r3
   b7154:	f7ff bd50 	b.w	b6bf8 <network_off>

000b7158 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7158:	6840      	ldr	r0, [r0, #4]
   b715a:	2100      	movs	r1, #0
   b715c:	f7ff bd74 	b.w	b6c48 <network_is_on>

000b7160 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7160:	6840      	ldr	r0, [r0, #4]
   b7162:	2100      	movs	r1, #0
   b7164:	f7ff bd78 	b.w	b6c58 <network_is_off>

000b7168 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7168:	6840      	ldr	r0, [r0, #4]
   b716a:	2200      	movs	r2, #0
   b716c:	f081 0101 	eor.w	r1, r1, #1
   b7170:	f7ff bd4a 	b.w	b6c08 <network_listen>

000b7174 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7174:	6840      	ldr	r0, [r0, #4]
   b7176:	2200      	movs	r2, #0
   b7178:	f7ff bd56 	b.w	b6c28 <network_set_listen_timeout>

000b717c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b717c:	2200      	movs	r2, #0
   b717e:	6840      	ldr	r0, [r0, #4]
   b7180:	4611      	mov	r1, r2
   b7182:	f7ff bd59 	b.w	b6c38 <network_get_listen_timeout>

000b7186 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7186:	2200      	movs	r2, #0
   b7188:	6840      	ldr	r0, [r0, #4]
   b718a:	4611      	mov	r1, r2
   b718c:	f7ff bd44 	b.w	b6c18 <network_listening>

000b7190 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7194:	b095      	sub	sp, #84	; 0x54
   b7196:	4614      	mov	r4, r2
   b7198:	460d      	mov	r5, r1
   b719a:	4607      	mov	r7, r0
    IPAddress addr;
   b719c:	f000 fd3a 	bl	b7c14 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b71a0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b71a2:	221c      	movs	r2, #28
   b71a4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b71a6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b71a8:	f005 f9fc 	bl	bc5a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b71ac:	2340      	movs	r3, #64	; 0x40
   b71ae:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b71b0:	4620      	mov	r0, r4
   b71b2:	466b      	mov	r3, sp
   b71b4:	aa0c      	add	r2, sp, #48	; 0x30
   b71b6:	2100      	movs	r1, #0
   b71b8:	f7ff fcb6 	bl	b6b28 <netdb_getaddrinfo>
    if (!r) {
   b71bc:	4604      	mov	r4, r0
   b71be:	2800      	cmp	r0, #0
   b71c0:	d14b      	bne.n	b725a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71c2:	4602      	mov	r2, r0
   b71c4:	2101      	movs	r1, #1
   b71c6:	6868      	ldr	r0, [r5, #4]
   b71c8:	f7ff fd06 	bl	b6bd8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71cc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71ce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71d0:	4622      	mov	r2, r4
   b71d2:	6868      	ldr	r0, [r5, #4]
   b71d4:	f7ff fd00 	bl	b6bd8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71d8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71da:	4681      	mov	r9, r0
        bool ok = false;
   b71dc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71de:	2e00      	cmp	r6, #0
   b71e0:	d03b      	beq.n	b725a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b71e2:	2900      	cmp	r1, #0
   b71e4:	d139      	bne.n	b725a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b71e6:	6873      	ldr	r3, [r6, #4]
   b71e8:	2b02      	cmp	r3, #2
   b71ea:	d003      	beq.n	b71f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b71ec:	2b0a      	cmp	r3, #10
   b71ee:	d011      	beq.n	b7214 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71f0:	69f6      	ldr	r6, [r6, #28]
   b71f2:	e7f4      	b.n	b71de <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b71f4:	f1b8 0f00 	cmp.w	r8, #0
   b71f8:	d0fa      	beq.n	b71f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b71fa:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b71fc:	a806      	add	r0, sp, #24
   b71fe:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7200:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7202:	f000 fd4b 	bl	b7c9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7208:	1d3c      	adds	r4, r7, #4
   b720a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b720c:	682b      	ldr	r3, [r5, #0]
   b720e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7210:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7212:	e7ed      	b.n	b71f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7214:	f1b9 0f00 	cmp.w	r9, #0
   b7218:	d0ea      	beq.n	b71f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b721a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b721c:	2210      	movs	r2, #16
   b721e:	a801      	add	r0, sp, #4
   b7220:	f005 f9c0 	bl	bc5a4 <memset>
                    a.v = 6;
   b7224:	2306      	movs	r3, #6
   b7226:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b722a:	ad01      	add	r5, sp, #4
   b722c:	f104 0308 	add.w	r3, r4, #8
   b7230:	3418      	adds	r4, #24
   b7232:	6818      	ldr	r0, [r3, #0]
   b7234:	6859      	ldr	r1, [r3, #4]
   b7236:	462a      	mov	r2, r5
   b7238:	c203      	stmia	r2!, {r0, r1}
   b723a:	3308      	adds	r3, #8
   b723c:	42a3      	cmp	r3, r4
   b723e:	4615      	mov	r5, r2
   b7240:	d1f7      	bne.n	b7232 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7242:	a901      	add	r1, sp, #4
   b7244:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7246:	ad07      	add	r5, sp, #28
   b7248:	f000 fcf2 	bl	b7c30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b724c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b724e:	1d3c      	adds	r4, r7, #4
   b7250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7252:	682b      	ldr	r3, [r5, #0]
   b7254:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7256:	4649      	mov	r1, r9
   b7258:	e7ca      	b.n	b71f0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b725a:	9800      	ldr	r0, [sp, #0]
   b725c:	f7ff fc5c 	bl	b6b18 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7260:	4638      	mov	r0, r7
   b7262:	b015      	add	sp, #84	; 0x54
   b7264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7268 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7268:	4b02      	ldr	r3, [pc, #8]	; (b7274 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b726a:	4a03      	ldr	r2, [pc, #12]	; (b7278 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b726c:	601a      	str	r2, [r3, #0]
   b726e:	2200      	movs	r2, #0
   b7270:	605a      	str	r2, [r3, #4]

} // spark
   b7272:	4770      	bx	lr
   b7274:	2003e680 	.word	0x2003e680
   b7278:	000bde58 	.word	0x000bde58

000b727c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b727c:	2200      	movs	r2, #0
   b727e:	6840      	ldr	r0, [r0, #4]
   b7280:	4611      	mov	r1, r2
   b7282:	f7ff bca9 	b.w	b6bd8 <network_ready>

000b7286 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7286:	2200      	movs	r2, #0
   b7288:	6840      	ldr	r0, [r0, #4]
   b728a:	4611      	mov	r1, r2
   b728c:	f7ff bcc4 	b.w	b6c18 <network_listening>

000b7290 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7290:	2200      	movs	r2, #0
   b7292:	6840      	ldr	r0, [r0, #4]
   b7294:	4611      	mov	r1, r2
   b7296:	f7ff bccf 	b.w	b6c38 <network_get_listen_timeout>

000b729a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b729a:	6840      	ldr	r0, [r0, #4]
   b729c:	2200      	movs	r2, #0
   b729e:	f7ff bcc3 	b.w	b6c28 <network_set_listen_timeout>

000b72a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b72a2:	6840      	ldr	r0, [r0, #4]
   b72a4:	2200      	movs	r2, #0
   b72a6:	f081 0101 	eor.w	r1, r1, #1
   b72aa:	f7ff bcad 	b.w	b6c08 <network_listen>

000b72ae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b72ae:	2300      	movs	r3, #0
   b72b0:	6840      	ldr	r0, [r0, #4]
   b72b2:	461a      	mov	r2, r3
   b72b4:	4619      	mov	r1, r3
   b72b6:	f7ff bc9f 	b.w	b6bf8 <network_off>

000b72ba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b72ba:	2300      	movs	r3, #0
   b72bc:	6840      	ldr	r0, [r0, #4]
   b72be:	461a      	mov	r2, r3
   b72c0:	4619      	mov	r1, r3
   b72c2:	f7ff bc91 	b.w	b6be8 <network_on>

000b72c6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b72c6:	2200      	movs	r2, #0
   b72c8:	6840      	ldr	r0, [r0, #4]
   b72ca:	4611      	mov	r1, r2
   b72cc:	f7ff bc74 	b.w	b6bb8 <network_connecting>

000b72d0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b72d0:	6840      	ldr	r0, [r0, #4]
   b72d2:	2200      	movs	r2, #0
   b72d4:	2102      	movs	r1, #2
   b72d6:	f7ff bc77 	b.w	b6bc8 <network_disconnect>

000b72da <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b72da:	2300      	movs	r3, #0
   b72dc:	6840      	ldr	r0, [r0, #4]
   b72de:	461a      	mov	r2, r3
   b72e0:	f7ff bc62 	b.w	b6ba8 <network_connect>

000b72e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b72e4:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b72e6:	2204      	movs	r2, #4
   b72e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b72ea:	4a02      	ldr	r2, [pc, #8]	; (b72f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b72ec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b72ee:	4770      	bx	lr
   b72f0:	2003e688 	.word	0x2003e688
   b72f4:	000bde94 	.word	0x000bde94

000b72f8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b72f8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b72fa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b72fc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7300:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7302:	2201      	movs	r2, #1
   b7304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7308:	f10d 0107 	add.w	r1, sp, #7
   b730c:	47a0      	blx	r4
}
   b730e:	b002      	add	sp, #8
   b7310:	bd10      	pop	{r4, pc}

000b7312 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7312:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7314:	6803      	ldr	r3, [r0, #0]
   b7316:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b731c:	46a4      	mov	ip, r4
}
   b731e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7322:	4760      	bx	ip

000b7324 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7324:	b513      	push	{r0, r1, r4, lr}
   b7326:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7328:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b732a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b732e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7330:	f10d 0107 	add.w	r1, sp, #7
   b7334:	2201      	movs	r2, #1
   b7336:	47a0      	blx	r4
}
   b7338:	b002      	add	sp, #8
   b733a:	bd10      	pop	{r4, pc}

000b733c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b733c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b733e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7340:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7344:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7348:	429a      	cmp	r2, r3
int TCPClient::read() {
   b734a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b734c:	d008      	beq.n	b7360 <_ZN9TCPClient4readEv+0x24>
   b734e:	6963      	ldr	r3, [r4, #20]
   b7350:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7354:	1c51      	adds	r1, r2, #1
   b7356:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b735a:	4413      	add	r3, r2
   b735c:	7918      	ldrb	r0, [r3, #4]
}
   b735e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7360:	6803      	ldr	r3, [r0, #0]
   b7362:	691b      	ldr	r3, [r3, #16]
   b7364:	4798      	blx	r3
   b7366:	2800      	cmp	r0, #0
   b7368:	d1f1      	bne.n	b734e <_ZN9TCPClient4readEv+0x12>
   b736a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b736e:	e7f6      	b.n	b735e <_ZN9TCPClient4readEv+0x22>

000b7370 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7370:	4770      	bx	lr

000b7372 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7372:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7374:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7376:	43c0      	mvns	r0, r0
   b7378:	0fc0      	lsrs	r0, r0, #31
   b737a:	4770      	bx	lr

000b737c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b737c:	4770      	bx	lr
	...

000b7380 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7380:	4b06      	ldr	r3, [pc, #24]	; (b739c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7382:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7384:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7386:	f100 040c 	add.w	r4, r0, #12
	    ||
   b738a:	d005      	beq.n	b7398 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b738c:	4608      	mov	r0, r1
   b738e:	f004 fadf 	bl	bb950 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7392:	2800      	cmp	r0, #0
   b7394:	bf08      	it	eq
   b7396:	2400      	moveq	r4, #0
      }
   b7398:	4620      	mov	r0, r4
   b739a:	bd10      	pop	{r4, pc}
   b739c:	000bdefc 	.word	0x000bdefc

000b73a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b73a0:	b510      	push	{r4, lr}
   b73a2:	21ac      	movs	r1, #172	; 0xac
   b73a4:	4604      	mov	r4, r0
   b73a6:	f7fc fe7c 	bl	b40a2 <_ZdlPvj>
   b73aa:	4620      	mov	r0, r4
   b73ac:	bd10      	pop	{r4, pc}

000b73ae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b73ae:	21ac      	movs	r1, #172	; 0xac
   b73b0:	f7fc be77 	b.w	b40a2 <_ZdlPvj>

000b73b4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b73b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b73b8:	f04f 0800 	mov.w	r8, #0
   b73bc:	b086      	sub	sp, #24
   b73be:	461c      	mov	r4, r3
   b73c0:	f8c0 8004 	str.w	r8, [r0, #4]
   b73c4:	4605      	mov	r5, r0
   b73c6:	460e      	mov	r6, r1
   b73c8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b73ca:	4641      	mov	r1, r8
   b73cc:	2210      	movs	r2, #16
   b73ce:	a802      	add	r0, sp, #8
   b73d0:	f005 f8e8 	bl	bc5a4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b73d4:	1c63      	adds	r3, r4, #1
   b73d6:	d009      	beq.n	b73ec <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b73d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73dc:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b73e0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b73e4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b73e8:	435c      	muls	r4, r3
   b73ea:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b73ec:	6968      	ldr	r0, [r5, #20]
   b73ee:	2310      	movs	r3, #16
   b73f0:	9300      	str	r3, [sp, #0]
   b73f2:	6800      	ldr	r0, [r0, #0]
   b73f4:	ab02      	add	r3, sp, #8
   b73f6:	f241 0205 	movw	r2, #4101	; 0x1005
   b73fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b73fe:	f7ff fa13 	bl	b6828 <sock_setsockopt>
    if (ret < 0) {
   b7402:	2800      	cmp	r0, #0
   b7404:	da07      	bge.n	b7416 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7406:	f7ff fc7b 	bl	b6d00 <__errno>
   b740a:	6803      	ldr	r3, [r0, #0]
   b740c:	606b      	str	r3, [r5, #4]
        return 0;
   b740e:	2000      	movs	r0, #0
}
   b7410:	b006      	add	sp, #24
   b7412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7416:	6968      	ldr	r0, [r5, #20]
   b7418:	2300      	movs	r3, #0
   b741a:	6800      	ldr	r0, [r0, #0]
   b741c:	463a      	mov	r2, r7
   b741e:	4631      	mov	r1, r6
   b7420:	f7ff fa22 	bl	b6868 <sock_send>
    if (ret < 0) {
   b7424:	1e03      	subs	r3, r0, #0
   b7426:	dbee      	blt.n	b7406 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7428:	4618      	mov	r0, r3
   b742a:	e7f1      	b.n	b7410 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b742c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b742c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b742e:	6984      	ldr	r4, [r0, #24]
   b7430:	4b0a      	ldr	r3, [pc, #40]	; (b745c <_ZN9TCPClientD1Ev+0x30>)
   b7432:	6003      	str	r3, [r0, #0]
   b7434:	4605      	mov	r5, r0
   b7436:	b17c      	cbz	r4, b7458 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7438:	6863      	ldr	r3, [r4, #4]
   b743a:	3b01      	subs	r3, #1
   b743c:	6063      	str	r3, [r4, #4]
   b743e:	b95b      	cbnz	r3, b7458 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7440:	6823      	ldr	r3, [r4, #0]
   b7442:	4620      	mov	r0, r4
   b7444:	689b      	ldr	r3, [r3, #8]
   b7446:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7448:	68a3      	ldr	r3, [r4, #8]
   b744a:	3b01      	subs	r3, #1
   b744c:	60a3      	str	r3, [r4, #8]
   b744e:	b91b      	cbnz	r3, b7458 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7450:	6823      	ldr	r3, [r4, #0]
   b7452:	4620      	mov	r0, r4
   b7454:	68db      	ldr	r3, [r3, #12]
   b7456:	4798      	blx	r3
   b7458:	4628      	mov	r0, r5
   b745a:	bd38      	pop	{r3, r4, r5, pc}
   b745c:	000bdf0c 	.word	0x000bdf0c

000b7460 <_ZN9TCPClientD0Ev>:
   b7460:	b510      	push	{r4, lr}
   b7462:	4604      	mov	r4, r0
   b7464:	f7ff ffe2 	bl	b742c <_ZN9TCPClientD1Ev>
   b7468:	4620      	mov	r0, r4
   b746a:	211c      	movs	r1, #28
   b746c:	f7fc fe19 	bl	b40a2 <_ZdlPvj>
   b7470:	4620      	mov	r0, r4
   b7472:	bd10      	pop	{r4, pc}

000b7474 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7474:	b530      	push	{r4, r5, lr}
   b7476:	b087      	sub	sp, #28
   b7478:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b747a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b747c:	4668      	mov	r0, sp
   b747e:	f000 fc0d 	bl	b7c9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7484:	3404      	adds	r4, #4
   b7486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7488:	682b      	ldr	r3, [r5, #0]
   b748a:	7023      	strb	r3, [r4, #0]
    }
   b748c:	b007      	add	sp, #28
   b748e:	bd30      	pop	{r4, r5, pc}

000b7490 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7490:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7492:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7494:	4b05      	ldr	r3, [pc, #20]	; (b74ac <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7496:	4604      	mov	r4, r0
   b7498:	358c      	adds	r5, #140	; 0x8c
   b749a:	f844 3b04 	str.w	r3, [r4], #4
   b749e:	4606      	mov	r6, r0
   b74a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74a4:	682b      	ldr	r3, [r5, #0]
   b74a6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b74a8:	4630      	mov	r0, r6
   b74aa:	bd70      	pop	{r4, r5, r6, pc}
   b74ac:	000bdfe0 	.word	0x000bdfe0

000b74b0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b74b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74b4:	4698      	mov	r8, r3
    stop();
   b74b6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b74b8:	b093      	sub	sp, #76	; 0x4c
   b74ba:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b74bc:	2400      	movs	r4, #0
    stop();
   b74be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b74c0:	4606      	mov	r6, r0
   b74c2:	4617      	mov	r7, r2
    stop();
   b74c4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b74c6:	4628      	mov	r0, r5
   b74c8:	466b      	mov	r3, sp
   b74ca:	4622      	mov	r2, r4
   b74cc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b74ce:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b74d0:	f7ff fb2a 	bl	b6b28 <netdb_getaddrinfo>
   b74d4:	4605      	mov	r5, r0
   b74d6:	2800      	cmp	r0, #0
   b74d8:	d163      	bne.n	b75a2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b74da:	9b00      	ldr	r3, [sp, #0]
   b74dc:	2b00      	cmp	r3, #0
   b74de:	d04b      	beq.n	b7578 <_ZN9TCPClient7connectEPKctm+0xc8>
   b74e0:	695b      	ldr	r3, [r3, #20]
   b74e2:	2b00      	cmp	r3, #0
   b74e4:	d048      	beq.n	b7578 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b74e6:	a806      	add	r0, sp, #24
   b74e8:	f000 fb94 	bl	b7c14 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b74ec:	9b00      	ldr	r3, [sp, #0]
   b74ee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b74f0:	7863      	ldrb	r3, [r4, #1]
   b74f2:	2b02      	cmp	r3, #2
   b74f4:	d104      	bne.n	b7500 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b74f6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b74f8:	a806      	add	r0, sp, #24
   b74fa:	f7ff ffbb 	bl	b7474 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b74fe:	e026      	b.n	b754e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7500:	2b0a      	cmp	r3, #10
   b7502:	d124      	bne.n	b754e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7504:	2211      	movs	r2, #17
   b7506:	4629      	mov	r1, r5
   b7508:	a801      	add	r0, sp, #4
   b750a:	f005 f84b 	bl	bc5a4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b750e:	68a3      	ldr	r3, [r4, #8]
   b7510:	2b00      	cmp	r3, #0
   b7512:	d038      	beq.n	b7586 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7514:	f104 0308 	add.w	r3, r4, #8
   b7518:	f10d 0c04 	add.w	ip, sp, #4
   b751c:	3418      	adds	r4, #24
   b751e:	6818      	ldr	r0, [r3, #0]
   b7520:	6859      	ldr	r1, [r3, #4]
   b7522:	4662      	mov	r2, ip
   b7524:	c203      	stmia	r2!, {r0, r1}
   b7526:	3308      	adds	r3, #8
   b7528:	42a3      	cmp	r3, r4
   b752a:	4694      	mov	ip, r2
   b752c:	d1f7      	bne.n	b751e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b752e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7530:	a901      	add	r1, sp, #4
   b7532:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7534:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7538:	f000 fb7a 	bl	b7c30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b753c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7540:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7544:	ac07      	add	r4, sp, #28
   b7546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7548:	f8dc 3000 	ldr.w	r3, [ip]
   b754c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b754e:	a806      	add	r0, sp, #24
   b7550:	f000 fb80 	bl	b7c54 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7554:	b180      	cbz	r0, b7578 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7556:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7558:	ad07      	add	r5, sp, #28
   b755a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b755e:	4b12      	ldr	r3, [pc, #72]	; (b75a8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7560:	930c      	str	r3, [sp, #48]	; 0x30
   b7562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7564:	ac0d      	add	r4, sp, #52	; 0x34
   b7566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7568:	682b      	ldr	r3, [r5, #0]
   b756a:	7023      	strb	r3, [r4, #0]
   b756c:	463a      	mov	r2, r7
   b756e:	4643      	mov	r3, r8
   b7570:	a90c      	add	r1, sp, #48	; 0x30
   b7572:	4630      	mov	r0, r6
   b7574:	47c8      	blx	r9
   b7576:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7578:	9800      	ldr	r0, [sp, #0]
   b757a:	f7ff facd 	bl	b6b18 <netdb_freeaddrinfo>
}
   b757e:	4628      	mov	r0, r5
   b7580:	b013      	add	sp, #76	; 0x4c
   b7582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7586:	68e3      	ldr	r3, [r4, #12]
   b7588:	2b00      	cmp	r3, #0
   b758a:	d1c3      	bne.n	b7514 <_ZN9TCPClient7connectEPKctm+0x64>
   b758c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7590:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7594:	f7ff f9d0 	bl	b6938 <inet_htonl>
   b7598:	4581      	cmp	r9, r0
   b759a:	d1bb      	bne.n	b7514 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b759c:	f104 0114 	add.w	r1, r4, #20
   b75a0:	e7aa      	b.n	b74f8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b75a2:	4625      	mov	r5, r4
   b75a4:	e7e8      	b.n	b7578 <_ZN9TCPClient7connectEPKctm+0xc8>
   b75a6:	bf00      	nop
   b75a8:	000bdfe0 	.word	0x000bdfe0

000b75ac <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b75ac:	b538      	push	{r3, r4, r5, lr}
   b75ae:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b75b0:	681a      	ldr	r2, [r3, #0]
   b75b2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b75b4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b75b6:	da10      	bge.n	b75da <_ZN9TCPClient9connectedEv+0x2e>
   b75b8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75c0:	429a      	cmp	r2, r3
   b75c2:	d10a      	bne.n	b75da <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b75c4:	6803      	ldr	r3, [r0, #0]
   b75c6:	691b      	ldr	r3, [r3, #16]
   b75c8:	4798      	blx	r3
        if (!rv) {
   b75ca:	4604      	mov	r4, r0
   b75cc:	b928      	cbnz	r0, b75da <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b75ce:	682b      	ldr	r3, [r5, #0]
   b75d0:	4628      	mov	r0, r5
   b75d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b75d4:	4798      	blx	r3
        rv = available();
   b75d6:	4620      	mov	r0, r4
}
   b75d8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b75da:	2001      	movs	r0, #1
   b75dc:	e7fc      	b.n	b75d8 <_ZN9TCPClient9connectedEv+0x2c>

000b75de <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b75de:	b510      	push	{r4, lr}
   b75e0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b75e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75ea:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b75ec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b75ee:	d005      	beq.n	b75fc <_ZN9TCPClient4peekEv+0x1e>
   b75f0:	6963      	ldr	r3, [r4, #20]
   b75f2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b75f6:	4413      	add	r3, r2
   b75f8:	7918      	ldrb	r0, [r3, #4]
}
   b75fa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b75fc:	6803      	ldr	r3, [r0, #0]
   b75fe:	691b      	ldr	r3, [r3, #16]
   b7600:	4798      	blx	r3
   b7602:	2800      	cmp	r0, #0
   b7604:	d1f4      	bne.n	b75f0 <_ZN9TCPClient4peekEv+0x12>
   b7606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b760a:	e7f6      	b.n	b75fa <_ZN9TCPClient4peekEv+0x1c>

000b760c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b760e:	6943      	ldr	r3, [r0, #20]
   b7610:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7612:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7616:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b761a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b761c:	4605      	mov	r5, r0
   b761e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7620:	d016      	beq.n	b7650 <_ZN9TCPClient4readEPhj+0x44>
   b7622:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7624:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7628:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b762c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b762e:	42bc      	cmp	r4, r7
   b7630:	bf28      	it	cs
   b7632:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7634:	3304      	adds	r3, #4
   b7636:	4622      	mov	r2, r4
   b7638:	4419      	add	r1, r3
   b763a:	4630      	mov	r0, r6
   b763c:	f004 ff8a 	bl	bc554 <memcpy>
   b7640:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7642:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7646:	4423      	add	r3, r4
   b7648:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b764c:	4620      	mov	r0, r4
   b764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7650:	6803      	ldr	r3, [r0, #0]
   b7652:	691b      	ldr	r3, [r3, #16]
   b7654:	4798      	blx	r3
   b7656:	2800      	cmp	r0, #0
   b7658:	d1e3      	bne.n	b7622 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b765a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b765e:	e7f5      	b.n	b764c <_ZN9TCPClient4readEPhj+0x40>

000b7660 <_ZN9TCPClient12flush_bufferEv>:
   b7660:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7662:	2300      	movs	r3, #0
   b7664:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7668:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b766a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b766e:	4770      	bx	lr

000b7670 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7674:	461f      	mov	r7, r3
    stop();
   b7676:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7678:	460c      	mov	r4, r1
    stop();
   b767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b767c:	b08a      	sub	sp, #40	; 0x28
   b767e:	4605      	mov	r5, r0
   b7680:	4616      	mov	r6, r2
    stop();
   b7682:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7684:	7d23      	ldrb	r3, [r4, #20]
   b7686:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b768a:	2b04      	cmp	r3, #4
   b768c:	bf0c      	ite	eq
   b768e:	2002      	moveq	r0, #2
   b7690:	200a      	movne	r0, #10
   b7692:	2206      	movs	r2, #6
   b7694:	2101      	movs	r1, #1
   b7696:	f7ff f8ef 	bl	b6878 <sock_socket>
   b769a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b769e:	696b      	ldr	r3, [r5, #20]
   b76a0:	681b      	ldr	r3, [r3, #0]
   b76a2:	2b00      	cmp	r3, #0
   b76a4:	da08      	bge.n	b76b8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b76a6:	682b      	ldr	r3, [r5, #0]
   b76a8:	4628      	mov	r0, r5
   b76aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b76ac:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b76ae:	4798      	blx	r3
}
   b76b0:	4620      	mov	r0, r4
   b76b2:	b00a      	add	sp, #40	; 0x28
   b76b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b76b8:	4628      	mov	r0, r5
   b76ba:	f7ff ffd1 	bl	b7660 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b76be:	b1b7      	cbz	r7, b76ee <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b76c0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b76c2:	a903      	add	r1, sp, #12
   b76c4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b76c6:	9303      	str	r3, [sp, #12]
   b76c8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b76cc:	f7ff f9fc 	bl	b6ac8 <if_index_to_name>
   b76d0:	2800      	cmp	r0, #0
   b76d2:	d1e8      	bne.n	b76a6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b76d4:	6968      	ldr	r0, [r5, #20]
   b76d6:	2306      	movs	r3, #6
   b76d8:	9300      	str	r3, [sp, #0]
   b76da:	6800      	ldr	r0, [r0, #0]
   b76dc:	ab03      	add	r3, sp, #12
   b76de:	f241 020b 	movw	r2, #4107	; 0x100b
   b76e2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b76e6:	f7ff f89f 	bl	b6828 <sock_setsockopt>
   b76ea:	2800      	cmp	r0, #0
   b76ec:	d1db      	bne.n	b76a6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b76ee:	221c      	movs	r2, #28
   b76f0:	2100      	movs	r1, #0
   b76f2:	a803      	add	r0, sp, #12
   b76f4:	f004 ff56 	bl	bc5a4 <memset>
    if (ip.version() == 4) {
   b76f8:	7d23      	ldrb	r3, [r4, #20]
   b76fa:	2b04      	cmp	r3, #4
   b76fc:	d11d      	bne.n	b773a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b76fe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7702:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7704:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7708:	f7ff f91e 	bl	b6948 <inet_htons>
   b770c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7710:	6860      	ldr	r0, [r4, #4]
   b7712:	f7ff f911 	bl	b6938 <inet_htonl>
   b7716:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7718:	696b      	ldr	r3, [r5, #20]
   b771a:	221c      	movs	r2, #28
   b771c:	6818      	ldr	r0, [r3, #0]
   b771e:	a903      	add	r1, sp, #12
   b7720:	f7ff f892 	bl	b6848 <sock_connect>
   b7724:	2800      	cmp	r0, #0
   b7726:	d1be      	bne.n	b76a6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7728:	3404      	adds	r4, #4
   b772a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b772c:	696d      	ldr	r5, [r5, #20]
   b772e:	358c      	adds	r5, #140	; 0x8c
   b7730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7732:	6823      	ldr	r3, [r4, #0]
   b7734:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7736:	2401      	movs	r4, #1
   b7738:	e7ba      	b.n	b76b0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b773a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b773e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7740:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7744:	f7ff f900 	bl	b6948 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7748:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b774a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b774e:	1d23      	adds	r3, r4, #4
   b7750:	f104 0714 	add.w	r7, r4, #20
   b7754:	6818      	ldr	r0, [r3, #0]
   b7756:	6859      	ldr	r1, [r3, #4]
   b7758:	4632      	mov	r2, r6
   b775a:	c203      	stmia	r2!, {r0, r1}
   b775c:	3308      	adds	r3, #8
   b775e:	42bb      	cmp	r3, r7
   b7760:	4616      	mov	r6, r2
   b7762:	d1f7      	bne.n	b7754 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7764:	e7d8      	b.n	b7718 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7768 <_ZN9TCPClient9availableEv>:
{
   b7768:	b530      	push	{r4, r5, lr}
   b776a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b776c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7770:	b08b      	sub	sp, #44	; 0x2c
   b7772:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7774:	b12b      	cbz	r3, b7782 <_ZN9TCPClient9availableEv+0x1a>
   b7776:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b777a:	429a      	cmp	r2, r3
   b777c:	d101      	bne.n	b7782 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b777e:	f7ff ff6f 	bl	b7660 <_ZN9TCPClient12flush_bufferEv>
   b7782:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7784:	6808      	ldr	r0, [r1, #0]
   b7786:	2800      	cmp	r0, #0
   b7788:	db18      	blt.n	b77bc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b778a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b778e:	2d7f      	cmp	r5, #127	; 0x7f
   b7790:	d814      	bhi.n	b77bc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7792:	3104      	adds	r1, #4
   b7794:	2308      	movs	r3, #8
   b7796:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b779a:	4429      	add	r1, r5
   b779c:	f7ff f85c 	bl	b6858 <sock_recv>
            if (ret > 0) {
   b77a0:	2800      	cmp	r0, #0
   b77a2:	dd13      	ble.n	b77cc <_ZN9TCPClient9availableEv+0x64>
   b77a4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b77a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b77aa:	b90a      	cbnz	r2, b77b0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b77ac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b77b0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b77b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b77b6:	4410      	add	r0, r2
   b77b8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b77bc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b77be:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b77c2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b77c6:	1ac0      	subs	r0, r0, r3
   b77c8:	b00b      	add	sp, #44	; 0x2c
   b77ca:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b77cc:	f7ff fa98 	bl	b6d00 <__errno>
   b77d0:	6803      	ldr	r3, [r0, #0]
   b77d2:	2b0b      	cmp	r3, #11
   b77d4:	d0f2      	beq.n	b77bc <_ZN9TCPClient9availableEv+0x54>
   b77d6:	f7ff fa93 	bl	b6d00 <__errno>
   b77da:	6803      	ldr	r3, [r0, #0]
   b77dc:	2b0b      	cmp	r3, #11
   b77de:	d0ed      	beq.n	b77bc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b77e0:	2320      	movs	r3, #32
   b77e2:	2500      	movs	r5, #0
   b77e4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b77e8:	f7ff fa8a 	bl	b6d00 <__errno>
   b77ec:	6803      	ldr	r3, [r0, #0]
   b77ee:	9301      	str	r3, [sp, #4]
   b77f0:	4b08      	ldr	r3, [pc, #32]	; (b7814 <_ZN9TCPClient9availableEv+0xac>)
   b77f2:	4909      	ldr	r1, [pc, #36]	; (b7818 <_ZN9TCPClient9availableEv+0xb0>)
   b77f4:	9300      	str	r3, [sp, #0]
   b77f6:	aa02      	add	r2, sp, #8
   b77f8:	462b      	mov	r3, r5
   b77fa:	2032      	movs	r0, #50	; 0x32
   b77fc:	f7ff f9a4 	bl	b6b48 <log_message>
                    sock_close(d_->sock);
   b7800:	6963      	ldr	r3, [r4, #20]
   b7802:	6818      	ldr	r0, [r3, #0]
   b7804:	f7ff f818 	bl	b6838 <sock_close>
   b7808:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b780a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b780e:	601a      	str	r2, [r3, #0]
   b7810:	e7d4      	b.n	b77bc <_ZN9TCPClient9availableEv+0x54>
   b7812:	bf00      	nop
   b7814:	000bdecf 	.word	0x000bdecf
   b7818:	000bdec8 	.word	0x000bdec8

000b781c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b781c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b781e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7820:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7822:	6818      	ldr	r0, [r3, #0]
   b7824:	2800      	cmp	r0, #0
   b7826:	db01      	blt.n	b782c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7828:	f7ff f806 	bl	b6838 <sock_close>
   b782c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b782e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7832:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7834:	6960      	ldr	r0, [r4, #20]
   b7836:	2211      	movs	r2, #17
   b7838:	2100      	movs	r1, #0
   b783a:	308c      	adds	r0, #140	; 0x8c
   b783c:	f004 feb2 	bl	bc5a4 <memset>
    flush_buffer();
   b7840:	4620      	mov	r0, r4
}
   b7842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7846:	f7ff bf0b 	b.w	b7660 <_ZN9TCPClient12flush_bufferEv>

000b784a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b784a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b784c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b784e:	4604      	mov	r4, r0
          total(0) {
   b7850:	6001      	str	r1, [r0, #0]
   b7852:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7856:	3088      	adds	r0, #136	; 0x88
   b7858:	f000 f9dc 	bl	b7c14 <_ZN9IPAddressC1Ev>
}
   b785c:	4620      	mov	r0, r4
   b785e:	bd10      	pop	{r4, pc}

000b7860 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7860:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7862:	2300      	movs	r3, #0
   b7864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7868:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b786c:	4a0e      	ldr	r2, [pc, #56]	; (b78a8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b786e:	6103      	str	r3, [r0, #16]
   b7870:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7872:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7874:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7876:	20ac      	movs	r0, #172	; 0xac
   b7878:	9101      	str	r1, [sp, #4]
   b787a:	f7fc fc0c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b787e:	1e05      	subs	r5, r0, #0
   b7880:	f105 060c 	add.w	r6, r5, #12
   b7884:	d008      	beq.n	b7898 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7886:	2301      	movs	r3, #1
   b7888:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b788c:	4b07      	ldr	r3, [pc, #28]	; (b78ac <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b788e:	9901      	ldr	r1, [sp, #4]
   b7890:	602b      	str	r3, [r5, #0]
   b7892:	4630      	mov	r0, r6
   b7894:	f7ff ffd9 	bl	b784a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7898:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b789a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b789e:	f7ff fedf 	bl	b7660 <_ZN9TCPClient12flush_bufferEv>
}
   b78a2:	b002      	add	sp, #8
   b78a4:	bd70      	pop	{r4, r5, r6, pc}
   b78a6:	bf00      	nop
   b78a8:	000bdf0c 	.word	0x000bdf0c
   b78ac:	000bdee8 	.word	0x000bdee8

000b78b0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b78b0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b78b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b78b6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b78b8:	f7ff ffd2 	bl	b7860 <_ZN9TCPClientC1Ei>
}
   b78bc:	4620      	mov	r0, r4
   b78be:	bd10      	pop	{r4, pc}

000b78c0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b78c0:	b510      	push	{r4, lr}
   b78c2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b78c4:	6800      	ldr	r0, [r0, #0]
   b78c6:	2800      	cmp	r0, #0
   b78c8:	db01      	blt.n	b78ce <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b78ca:	f7fe ffb5 	bl	b6838 <sock_close>
    }
}
   b78ce:	4620      	mov	r0, r4
   b78d0:	bd10      	pop	{r4, pc}

000b78d2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b78d2:	300c      	adds	r0, #12
   b78d4:	f7ff bff4 	b.w	b78c0 <_ZN9TCPClient4DataD1Ev>

000b78d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b78d8:	4770      	bx	lr

000b78da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b78da:	7441      	strb	r1, [r0, #17]
}
   b78dc:	4770      	bx	lr

000b78de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b78de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b78e0:	7c00      	ldrb	r0, [r0, #16]
   b78e2:	f7ff f809 	bl	b68f8 <hal_usart_available_data_for_write>
}
   b78e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b78ea:	bd08      	pop	{r3, pc}

000b78ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b78ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b78ee:	7c00      	ldrb	r0, [r0, #16]
   b78f0:	f7fe ffda 	bl	b68a8 <hal_usart_available>
}
   b78f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b78f8:	bd08      	pop	{r3, pc}

000b78fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b78fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b78fc:	7c00      	ldrb	r0, [r0, #16]
   b78fe:	f7fe ffe3 	bl	b68c8 <hal_usart_peek>
}
   b7902:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7906:	bd08      	pop	{r3, pc}

000b7908 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7908:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b790a:	7c00      	ldrb	r0, [r0, #16]
   b790c:	f7fe ffd4 	bl	b68b8 <hal_usart_read>
}
   b7910:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7914:	bd08      	pop	{r3, pc}

000b7916 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7916:	7c00      	ldrb	r0, [r0, #16]
   b7918:	f7fe bfde 	b.w	b68d8 <hal_usart_flush>

000b791c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b791e:	7c45      	ldrb	r5, [r0, #17]
{
   b7920:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7922:	b12d      	cbz	r5, b7930 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7924:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7926:	b003      	add	sp, #12
   b7928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b792c:	f7fe bfb4 	b.w	b6898 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7930:	7c00      	ldrb	r0, [r0, #16]
   b7932:	9101      	str	r1, [sp, #4]
   b7934:	f7fe ffe0 	bl	b68f8 <hal_usart_available_data_for_write>
   b7938:	2800      	cmp	r0, #0
   b793a:	9901      	ldr	r1, [sp, #4]
   b793c:	dcf2      	bgt.n	b7924 <_ZN11USARTSerial5writeEh+0x8>
}
   b793e:	4628      	mov	r0, r5
   b7940:	b003      	add	sp, #12
   b7942:	bd30      	pop	{r4, r5, pc}

000b7944 <_ZN11USARTSerialD0Ev>:
   b7944:	b510      	push	{r4, lr}
   b7946:	2114      	movs	r1, #20
   b7948:	4604      	mov	r4, r0
   b794a:	f7fc fbaa 	bl	b40a2 <_ZdlPvj>
   b794e:	4620      	mov	r0, r4
   b7950:	bd10      	pop	{r4, pc}
	...

000b7954 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7954:	b510      	push	{r4, lr}
   b7956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b795a:	4604      	mov	r4, r0
   b795c:	4608      	mov	r0, r1
   b795e:	4611      	mov	r1, r2
   b7960:	2200      	movs	r2, #0
   b7962:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7966:	4b04      	ldr	r3, [pc, #16]	; (b7978 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7968:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b796a:	2301      	movs	r3, #1
  _serial = serial;
   b796c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b796e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7970:	f7fe ffd2 	bl	b6918 <hal_usart_init_ex>
}
   b7974:	4620      	mov	r0, r4
   b7976:	bd10      	pop	{r4, pc}
   b7978:	000bdf58 	.word	0x000bdf58

000b797c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b797c:	7c00      	ldrb	r0, [r0, #16]
   b797e:	2300      	movs	r3, #0
   b7980:	f7fe bfc2 	b.w	b6908 <hal_usart_begin_config>

000b7984 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7984:	2200      	movs	r2, #0
   b7986:	f7ff bff9 	b.w	b797c <_ZN11USARTSerial5beginEmm>

000b798a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b798a:	7c00      	ldrb	r0, [r0, #16]
   b798c:	f7fe bf7c 	b.w	b6888 <hal_usart_end>

000b7990 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7990:	4770      	bx	lr

000b7992 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7994:	4606      	mov	r6, r0
   b7996:	4615      	mov	r5, r2
   b7998:	460c      	mov	r4, r1
   b799a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b799c:	42bc      	cmp	r4, r7
   b799e:	d006      	beq.n	b79ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b79a0:	6833      	ldr	r3, [r6, #0]
   b79a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b79a6:	689b      	ldr	r3, [r3, #8]
   b79a8:	4630      	mov	r0, r6
   b79aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b79ac:	e7f6      	b.n	b799c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b79ae:	4628      	mov	r0, r5
   b79b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b79b2:	7c00      	ldrb	r0, [r0, #16]
   b79b4:	2200      	movs	r2, #0
   b79b6:	f7fe beef 	b.w	b6798 <hal_i2c_write>

000b79ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b79ba:	7c00      	ldrb	r0, [r0, #16]
   b79bc:	2100      	movs	r1, #0
   b79be:	f7fe bef3 	b.w	b67a8 <hal_i2c_available>

000b79c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b79c2:	7c00      	ldrb	r0, [r0, #16]
   b79c4:	2100      	movs	r1, #0
   b79c6:	f7fe bef7 	b.w	b67b8 <hal_i2c_read>

000b79ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b79ca:	7c00      	ldrb	r0, [r0, #16]
   b79cc:	2100      	movs	r1, #0
   b79ce:	f7fe befb 	b.w	b67c8 <hal_i2c_peek>

000b79d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b79d2:	7c00      	ldrb	r0, [r0, #16]
   b79d4:	2100      	movs	r1, #0
   b79d6:	f7fe beff 	b.w	b67d8 <hal_i2c_flush>

000b79da <_ZN7TwoWireD0Ev>:
   b79da:	b510      	push	{r4, lr}
   b79dc:	2114      	movs	r1, #20
   b79de:	4604      	mov	r4, r0
   b79e0:	f7fc fb5f 	bl	b40a2 <_ZdlPvj>
   b79e4:	4620      	mov	r0, r4
   b79e6:	bd10      	pop	{r4, pc}

000b79e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b79e8:	b510      	push	{r4, lr}
   b79ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b79ee:	4604      	mov	r4, r0
   b79f0:	4608      	mov	r0, r1
   b79f2:	2100      	movs	r1, #0
   b79f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b79f8:	4b03      	ldr	r3, [pc, #12]	; (b7a08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b79fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b79fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b79fe:	4611      	mov	r1, r2
   b7a00:	f7fe fefa 	bl	b67f8 <hal_i2c_init>
}
   b7a04:	4620      	mov	r0, r4
   b7a06:	bd10      	pop	{r4, pc}
   b7a08:	000bdf88 	.word	0x000bdf88

000b7a0c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7a0c:	7c00      	ldrb	r0, [r0, #16]
   b7a0e:	2200      	movs	r2, #0
   b7a10:	f7fe bea2 	b.w	b6758 <hal_i2c_set_speed>

000b7a14 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7a14:	2300      	movs	r3, #0
   b7a16:	7c00      	ldrb	r0, [r0, #16]
   b7a18:	461a      	mov	r2, r3
   b7a1a:	4619      	mov	r1, r3
   b7a1c:	f7fe bea4 	b.w	b6768 <hal_i2c_begin>

000b7a20 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7a20:	7c00      	ldrb	r0, [r0, #16]
   b7a22:	2200      	movs	r2, #0
   b7a24:	f7fe bea8 	b.w	b6778 <hal_i2c_begin_transmission>

000b7a28 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7a28:	7c00      	ldrb	r0, [r0, #16]
   b7a2a:	2200      	movs	r2, #0
   b7a2c:	f7fe beac 	b.w	b6788 <hal_i2c_end_transmission>

000b7a30 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7a30:	2101      	movs	r1, #1
   b7a32:	f7ff bff9 	b.w	b7a28 <_ZN7TwoWire15endTransmissionEh>

000b7a36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b7a36:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b7a38:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7a3a:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7a3c:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7a3e:	dd03      	ble.n	b7a48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b7a40:	f7ff f946 	bl	b6cd0 <realloc>
            if (!d) {
   b7a44:	b918      	cbnz	r0, b7a4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7a46:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b7a48:	f7ff f93a 	bl	b6cc0 <free>
        T* d = nullptr;
   b7a4c:	2000      	movs	r0, #0
        data_ = d;
   b7a4e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7a50:	60a5      	str	r5, [r4, #8]
        return true;
   b7a52:	2001      	movs	r0, #1
   b7a54:	e7f7      	b.n	b7a46 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a56:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b7a58:	2300      	movs	r3, #0
   b7a5a:	e9c0 3300 	strd	r3, r3, [r0]
   b7a5e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a60:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7a62:	6849      	ldr	r1, [r1, #4]
   b7a64:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a66:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7a68:	dd10      	ble.n	b7a8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b7a6a:	f7ff ffe4 	bl	b7a36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7a6e:	b168      	cbz	r0, b7a8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7a70:	e9d5 3100 	ldrd	r3, r1, [r5]
   b7a74:	6822      	ldr	r2, [r4, #0]
   b7a76:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b7a78:	4299      	cmp	r1, r3
   b7a7a:	d005      	beq.n	b7a88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b7a7c:	b10a      	cbz	r2, b7a82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b7a7e:	7818      	ldrb	r0, [r3, #0]
   b7a80:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b7a82:	3301      	adds	r3, #1
   b7a84:	3201      	adds	r2, #1
   b7a86:	e7f7      	b.n	b7a78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b7a88:	686b      	ldr	r3, [r5, #4]
   b7a8a:	6063      	str	r3, [r4, #4]
    }
}
   b7a8c:	4620      	mov	r0, r4
   b7a8e:	bd38      	pop	{r3, r4, r5, pc}

000b7a90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a90:	7441      	strb	r1, [r0, #17]
}
   b7a92:	4770      	bx	lr

000b7a94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7a94:	4770      	bx	lr

000b7a96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7a96:	4770      	bx	lr

000b7a98 <_ZN9USBSerial4readEv>:
{
   b7a98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7a9a:	2100      	movs	r1, #0
   b7a9c:	7c00      	ldrb	r0, [r0, #16]
   b7a9e:	f7fe fe43 	bl	b6728 <HAL_USB_USART_Receive_Data>
}
   b7aa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aa6:	bd08      	pop	{r3, pc}

000b7aa8 <_ZN9USBSerial4peekEv>:
{
   b7aa8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7aaa:	2101      	movs	r1, #1
   b7aac:	7c00      	ldrb	r0, [r0, #16]
   b7aae:	f7fe fe3b 	bl	b6728 <HAL_USB_USART_Receive_Data>
}
   b7ab2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ab6:	bd08      	pop	{r3, pc}

000b7ab8 <_ZN9USBSerial17availableForWriteEv>:
{
   b7ab8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7aba:	7c00      	ldrb	r0, [r0, #16]
   b7abc:	f7fe fe2c 	bl	b6718 <HAL_USB_USART_Available_Data_For_Write>
}
   b7ac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ac4:	bd08      	pop	{r3, pc}

000b7ac6 <_ZN9USBSerial9availableEv>:
{
   b7ac6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7ac8:	7c00      	ldrb	r0, [r0, #16]
   b7aca:	f7fe fe1d 	bl	b6708 <HAL_USB_USART_Available_Data>
}
   b7ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ad2:	bd08      	pop	{r3, pc}

000b7ad4 <_ZN9USBSerial5writeEh>:
{
   b7ad4:	b513      	push	{r0, r1, r4, lr}
   b7ad6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ad8:	7c00      	ldrb	r0, [r0, #16]
{
   b7ada:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7adc:	f7fe fe1c 	bl	b6718 <HAL_USB_USART_Available_Data_For_Write>
   b7ae0:	2800      	cmp	r0, #0
   b7ae2:	9901      	ldr	r1, [sp, #4]
   b7ae4:	dc01      	bgt.n	b7aea <_ZN9USBSerial5writeEh+0x16>
   b7ae6:	7c60      	ldrb	r0, [r4, #17]
   b7ae8:	b120      	cbz	r0, b7af4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7aea:	7c20      	ldrb	r0, [r4, #16]
   b7aec:	f7fe fe24 	bl	b6738 <HAL_USB_USART_Send_Data>
   b7af0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7af4:	b002      	add	sp, #8
   b7af6:	bd10      	pop	{r4, pc}

000b7af8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7af8:	7c00      	ldrb	r0, [r0, #16]
   b7afa:	f7fe be25 	b.w	b6748 <HAL_USB_USART_Flush_Data>

000b7afe <_ZN9USBSerialD0Ev>:
   b7afe:	b510      	push	{r4, lr}
   b7b00:	2114      	movs	r1, #20
   b7b02:	4604      	mov	r4, r0
   b7b04:	f7fc facd 	bl	b40a2 <_ZdlPvj>
   b7b08:	4620      	mov	r0, r4
   b7b0a:	bd10      	pop	{r4, pc}

000b7b0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b0c:	b510      	push	{r4, lr}
   b7b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b12:	4604      	mov	r4, r0
   b7b14:	4608      	mov	r0, r1
   b7b16:	2100      	movs	r1, #0
   b7b18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b1c:	4b04      	ldr	r3, [pc, #16]	; (b7b30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b1e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b20:	2301      	movs	r3, #1
  _serial = serial;
   b7b22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b24:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b26:	4611      	mov	r1, r2
   b7b28:	f7fe fdd6 	bl	b66d8 <HAL_USB_USART_Init>
}
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	bd10      	pop	{r4, pc}
   b7b30:	000bdfb0 	.word	0x000bdfb0

000b7b34 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7b34:	7c00      	ldrb	r0, [r0, #16]
   b7b36:	2200      	movs	r2, #0
   b7b38:	f7fe bdd6 	b.w	b66e8 <HAL_USB_USART_Begin>

000b7b3c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7b3c:	7c00      	ldrb	r0, [r0, #16]
   b7b3e:	f7fe bddb 	b.w	b66f8 <HAL_USB_USART_End>

000b7b42 <_Z19acquireSerialBufferv>:
{
   b7b42:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7b44:	2214      	movs	r2, #20
{
   b7b46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7b48:	2100      	movs	r1, #0
   b7b4a:	f004 fd2b 	bl	bc5a4 <memset>
}
   b7b4e:	4620      	mov	r0, r4
   b7b50:	bd10      	pop	{r4, pc}
	...

000b7b54 <_Z16_fetch_usbserialv>:
{
   b7b54:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b56:	4c0f      	ldr	r4, [pc, #60]	; (b7b94 <_Z16_fetch_usbserialv+0x40>)
{
   b7b58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7b5a:	a803      	add	r0, sp, #12
   b7b5c:	f7ff fff1 	bl	b7b42 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b60:	7821      	ldrb	r1, [r4, #0]
   b7b62:	f3bf 8f5b 	dmb	ish
   b7b66:	f011 0101 	ands.w	r1, r1, #1
   b7b6a:	d10f      	bne.n	b7b8c <_Z16_fetch_usbserialv+0x38>
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	9101      	str	r1, [sp, #4]
   b7b70:	f7fc faa6 	bl	b40c0 <__cxa_guard_acquire>
   b7b74:	9901      	ldr	r1, [sp, #4]
   b7b76:	b148      	cbz	r0, b7b8c <_Z16_fetch_usbserialv+0x38>
   b7b78:	aa03      	add	r2, sp, #12
   b7b7a:	4807      	ldr	r0, [pc, #28]	; (b7b98 <_Z16_fetch_usbserialv+0x44>)
   b7b7c:	f7ff ffc6 	bl	b7b0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7b80:	4620      	mov	r0, r4
   b7b82:	f7fc faa2 	bl	b40ca <__cxa_guard_release>
   b7b86:	4805      	ldr	r0, [pc, #20]	; (b7b9c <_Z16_fetch_usbserialv+0x48>)
   b7b88:	f004 fcc2 	bl	bc510 <atexit>
	return _usbserial;
}
   b7b8c:	4802      	ldr	r0, [pc, #8]	; (b7b98 <_Z16_fetch_usbserialv+0x44>)
   b7b8e:	b008      	add	sp, #32
   b7b90:	bd10      	pop	{r4, pc}
   b7b92:	bf00      	nop
   b7b94:	2003e690 	.word	0x2003e690
   b7b98:	2003e694 	.word	0x2003e694
   b7b9c:	000b7a95 	.word	0x000b7a95

000b7ba0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b7ba0:	4770      	bx	lr

000b7ba2 <_ZN9IPAddressD0Ev>:
   b7ba2:	b510      	push	{r4, lr}
   b7ba4:	2118      	movs	r1, #24
   b7ba6:	4604      	mov	r4, r0
   b7ba8:	f7fc fa7b 	bl	b40a2 <_ZdlPvj>
   b7bac:	4620      	mov	r0, r4
   b7bae:	bd10      	pop	{r4, pc}

000b7bb0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7bb2:	7d03      	ldrb	r3, [r0, #20]
   b7bb4:	2b06      	cmp	r3, #6
{
   b7bb6:	b08d      	sub	sp, #52	; 0x34
   b7bb8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7bba:	f100 0704 	add.w	r7, r0, #4
   b7bbe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7bc2:	d012      	beq.n	b7bea <_ZNK9IPAddress7printToER5Print+0x3a>
   b7bc4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7bc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7bcc:	220a      	movs	r2, #10
   b7bce:	4630      	mov	r0, r6
   b7bd0:	f001 f94d 	bl	b8e6e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7bd4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7bd6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7bd8:	d019      	beq.n	b7c0e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7bda:	2c00      	cmp	r4, #0
   b7bdc:	d0f4      	beq.n	b7bc8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7bde:	212e      	movs	r1, #46	; 0x2e
   b7be0:	4630      	mov	r0, r6
   b7be2:	f001 f92b 	bl	b8e3c <_ZN5Print5printEc>
   b7be6:	4404      	add	r4, r0
   b7be8:	e7ee      	b.n	b7bc8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7bea:	232f      	movs	r3, #47	; 0x2f
   b7bec:	466a      	mov	r2, sp
   b7bee:	4639      	mov	r1, r7
   b7bf0:	200a      	movs	r0, #10
		buf[0] = 0;
   b7bf2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7bf6:	f7fe fe97 	bl	b6928 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7bfa:	4668      	mov	r0, sp
   b7bfc:	f004 fd31 	bl	bc662 <strlen>
   b7c00:	6833      	ldr	r3, [r6, #0]
   b7c02:	4602      	mov	r2, r0
   b7c04:	68db      	ldr	r3, [r3, #12]
   b7c06:	4669      	mov	r1, sp
   b7c08:	4630      	mov	r0, r6
   b7c0a:	4798      	blx	r3
   b7c0c:	4604      	mov	r4, r0
    }
    return n;
}
   b7c0e:	4620      	mov	r0, r4
   b7c10:	b00d      	add	sp, #52	; 0x34
   b7c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7c14 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7c14:	b510      	push	{r4, lr}
   b7c16:	4b05      	ldr	r3, [pc, #20]	; (b7c2c <_ZN9IPAddressC1Ev+0x18>)
   b7c18:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b7c1a:	2211      	movs	r2, #17
   b7c1c:	f840 3b04 	str.w	r3, [r0], #4
   b7c20:	2100      	movs	r1, #0
   b7c22:	f004 fcbf 	bl	bc5a4 <memset>
}
   b7c26:	4620      	mov	r0, r4
   b7c28:	bd10      	pop	{r4, pc}
   b7c2a:	bf00      	nop
   b7c2c:	000bdfe0 	.word	0x000bdfe0

000b7c30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7c30:	4603      	mov	r3, r0
   b7c32:	4a07      	ldr	r2, [pc, #28]	; (b7c50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7c34:	b510      	push	{r4, lr}
   b7c36:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7c3a:	f101 0210 	add.w	r2, r1, #16
   b7c3e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7c42:	f843 4b04 	str.w	r4, [r3], #4
   b7c46:	4291      	cmp	r1, r2
   b7c48:	d1f9      	bne.n	b7c3e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7c4a:	780a      	ldrb	r2, [r1, #0]
   b7c4c:	701a      	strb	r2, [r3, #0]
}
   b7c4e:	bd10      	pop	{r4, pc}
   b7c50:	000bdfe0 	.word	0x000bdfe0

000b7c54 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7c54:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7c56:	2b04      	cmp	r3, #4
   b7c58:	d104      	bne.n	b7c64 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7c5a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7c5c:	3800      	subs	r0, #0
   b7c5e:	bf18      	it	ne
   b7c60:	2001      	movne	r0, #1
   b7c62:	4770      	bx	lr
    } else if (version() == 6) {
   b7c64:	2b06      	cmp	r3, #6
   b7c66:	d107      	bne.n	b7c78 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7c68:	6843      	ldr	r3, [r0, #4]
   b7c6a:	b93b      	cbnz	r3, b7c7c <_ZNK9IPAddresscvbEv+0x28>
   b7c6c:	6883      	ldr	r3, [r0, #8]
   b7c6e:	b92b      	cbnz	r3, b7c7c <_ZNK9IPAddresscvbEv+0x28>
   b7c70:	68c3      	ldr	r3, [r0, #12]
   b7c72:	b91b      	cbnz	r3, b7c7c <_ZNK9IPAddresscvbEv+0x28>
   b7c74:	6900      	ldr	r0, [r0, #16]
   b7c76:	e7f1      	b.n	b7c5c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7c78:	2000      	movs	r0, #0
   b7c7a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7c7c:	2001      	movs	r0, #1
}
   b7c7e:	4770      	bx	lr

000b7c80 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7c80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7c82:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7c86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7c8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7c8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7c92:	2304      	movs	r3, #4
   b7c94:	6041      	str	r1, [r0, #4]
   b7c96:	7503      	strb	r3, [r0, #20]
}
   b7c98:	bd10      	pop	{r4, pc}
	...

000b7c9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7c9c:	b507      	push	{r0, r1, r2, lr}
   b7c9e:	4b06      	ldr	r3, [pc, #24]	; (b7cb8 <_ZN9IPAddressC1EPKh+0x1c>)
   b7ca0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7ca2:	78cb      	ldrb	r3, [r1, #3]
   b7ca4:	9300      	str	r3, [sp, #0]
   b7ca6:	788b      	ldrb	r3, [r1, #2]
   b7ca8:	784a      	ldrb	r2, [r1, #1]
   b7caa:	7809      	ldrb	r1, [r1, #0]
   b7cac:	f7ff ffe8 	bl	b7c80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7cb0:	b003      	add	sp, #12
   b7cb2:	f85d fb04 	ldr.w	pc, [sp], #4
   b7cb6:	bf00      	nop
   b7cb8:	000bdfe0 	.word	0x000bdfe0

000b7cbc <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b7cbc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b7cbe:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7cc0:	4604      	mov	r4, r0
      if (_M_manager)
   b7cc2:	b113      	cbz	r3, b7cca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7cc4:	2203      	movs	r2, #3
   b7cc6:	4601      	mov	r1, r0
   b7cc8:	4798      	blx	r3
    }
   b7cca:	4620      	mov	r0, r4
   b7ccc:	bd10      	pop	{r4, pc}

000b7cce <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b7cce:	b513      	push	{r0, r1, r4, lr}
   b7cd0:	460b      	mov	r3, r1
   b7cd2:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cd4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7cd8:	466c      	mov	r4, sp
   b7cda:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7cde:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7ce2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7ce6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7cea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7cee:	b002      	add	sp, #8
   b7cf0:	bd10      	pop	{r4, pc}

000b7cf2 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b7cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cf6:	ec55 4b11 	vmov	r4, r5, d1
   b7cfa:	ec57 6b12 	vmov	r6, r7, d2
   b7cfe:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b7d00:	ee11 2a10 	vmov	r2, s2
   b7d04:	ee12 0a10 	vmov	r0, s4
   b7d08:	462b      	mov	r3, r5
   b7d0a:	4639      	mov	r1, r7
{
   b7d0c:	ed8d 0b02 	vstr	d0, [sp, #8]
   b7d10:	ed8d 4b00 	vstr	d4, [sp]
   b7d14:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b7d18:	f004 fb50 	bl	bc3bc <__aeabi_dcmpeq>
   b7d1c:	ed9d 0b02 	vldr	d0, [sp, #8]
   b7d20:	bb38      	cbnz	r0, b7d72 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b7d22:	ec51 0b10 	vmov	r0, r1, d0
   b7d26:	4622      	mov	r2, r4
   b7d28:	462b      	mov	r3, r5
   b7d2a:	f003 ff27 	bl	bbb7c <__aeabi_dsub>
   b7d2e:	4652      	mov	r2, sl
   b7d30:	4680      	mov	r8, r0
   b7d32:	4689      	mov	r9, r1
   b7d34:	465b      	mov	r3, fp
   b7d36:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7d3a:	f003 ff1f 	bl	bbb7c <__aeabi_dsub>
   b7d3e:	4602      	mov	r2, r0
   b7d40:	460b      	mov	r3, r1
   b7d42:	4640      	mov	r0, r8
   b7d44:	4649      	mov	r1, r9
   b7d46:	f004 f8d1 	bl	bbeec <__aeabi_dmul>
   b7d4a:	4622      	mov	r2, r4
   b7d4c:	4680      	mov	r8, r0
   b7d4e:	4689      	mov	r9, r1
   b7d50:	462b      	mov	r3, r5
   b7d52:	4630      	mov	r0, r6
   b7d54:	4639      	mov	r1, r7
   b7d56:	f003 ff11 	bl	bbb7c <__aeabi_dsub>
   b7d5a:	4602      	mov	r2, r0
   b7d5c:	460b      	mov	r3, r1
   b7d5e:	4640      	mov	r0, r8
   b7d60:	4649      	mov	r1, r9
   b7d62:	f004 f9ed 	bl	bc140 <__aeabi_ddiv>
   b7d66:	4652      	mov	r2, sl
   b7d68:	465b      	mov	r3, fp
   b7d6a:	f003 ff09 	bl	bbb80 <__adddf3>
   b7d6e:	ec41 0b10 	vmov	d0, r0, r1
}
   b7d72:	b005      	add	sp, #20
   b7d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7d78 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7d78:	2100      	movs	r1, #0
   b7d7a:	f7fe bf7d 	b.w	b6c78 <system_delay_ms>
	...

000b7d80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7d80:	4b01      	ldr	r3, [pc, #4]	; (b7d88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7d82:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7d84:	4770      	bx	lr
   b7d86:	bf00      	nop
   b7d88:	2003e484 	.word	0x2003e484

000b7d8c <serialEventRun>:
{
   b7d8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7d8e:	4b0b      	ldr	r3, [pc, #44]	; (b7dbc <serialEventRun+0x30>)
   b7d90:	b143      	cbz	r3, b7da4 <serialEventRun+0x18>
   b7d92:	f7ff fedf 	bl	b7b54 <_Z16_fetch_usbserialv>
   b7d96:	6803      	ldr	r3, [r0, #0]
   b7d98:	691b      	ldr	r3, [r3, #16]
   b7d9a:	4798      	blx	r3
   b7d9c:	2800      	cmp	r0, #0
   b7d9e:	dd01      	ble.n	b7da4 <serialEventRun+0x18>
        serialEvent();
   b7da0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7da4:	4b06      	ldr	r3, [pc, #24]	; (b7dc0 <serialEventRun+0x34>)
   b7da6:	b143      	cbz	r3, b7dba <serialEventRun+0x2e>
   b7da8:	f003 fd3e 	bl	bb828 <_Z22__fetch_global_Serial1v>
   b7dac:	6803      	ldr	r3, [r0, #0]
   b7dae:	691b      	ldr	r3, [r3, #16]
   b7db0:	4798      	blx	r3
   b7db2:	2800      	cmp	r0, #0
   b7db4:	dd01      	ble.n	b7dba <serialEventRun+0x2e>
        serialEvent1();
   b7db6:	f3af 8000 	nop.w
}
   b7dba:	bd08      	pop	{r3, pc}
	...

000b7dc4 <_post_loop>:
{
   b7dc4:	b508      	push	{r3, lr}
	serialEventRun();
   b7dc6:	f7ff ffe1 	bl	b7d8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7dca:	f7fe fe75 	bl	b6ab8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7dce:	4b01      	ldr	r3, [pc, #4]	; (b7dd4 <_post_loop+0x10>)
   b7dd0:	6018      	str	r0, [r3, #0]
}
   b7dd2:	bd08      	pop	{r3, pc}
   b7dd4:	2003e738 	.word	0x2003e738

000b7dd8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7dd8:	4805      	ldr	r0, [pc, #20]	; (b7df0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7dda:	4a06      	ldr	r2, [pc, #24]	; (b7df4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7ddc:	4906      	ldr	r1, [pc, #24]	; (b7df8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7dde:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7de0:	1a12      	subs	r2, r2, r0
   b7de2:	f004 fbb7 	bl	bc554 <memcpy>
    __backup_sram_signature = signature;
   b7de6:	4b05      	ldr	r3, [pc, #20]	; (b7dfc <_Z33system_initialize_user_backup_ramv+0x24>)
   b7de8:	4a05      	ldr	r2, [pc, #20]	; (b7e00 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7dea:	601a      	str	r2, [r3, #0]
}
   b7dec:	bd08      	pop	{r3, pc}
   b7dee:	bf00      	nop
   b7df0:	2003f400 	.word	0x2003f400
   b7df4:	2003f404 	.word	0x2003f404
   b7df8:	000be694 	.word	0x000be694
   b7dfc:	2003f400 	.word	0x2003f400
   b7e00:	9a271c1e 	.word	0x9a271c1e

000b7e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7e04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e06:	2300      	movs	r3, #0
   b7e08:	9300      	str	r3, [sp, #0]
   b7e0a:	461a      	mov	r2, r3
   b7e0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e10:	f7fe ff44 	bl	b6c9c <system_ctrl_set_result>
}
   b7e14:	b003      	add	sp, #12
   b7e16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7e1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7e1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7e1e:	8843      	ldrh	r3, [r0, #2]
   b7e20:	2b0a      	cmp	r3, #10
   b7e22:	d008      	beq.n	b7e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7e24:	2b50      	cmp	r3, #80	; 0x50
   b7e26:	d10b      	bne.n	b7e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7e28:	4b09      	ldr	r3, [pc, #36]	; (b7e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7e2a:	681b      	ldr	r3, [r3, #0]
   b7e2c:	b14b      	cbz	r3, b7e42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7e2e:	b003      	add	sp, #12
   b7e30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7e34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7e36:	f7ff ffe5 	bl	b7e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7e3a:	b003      	add	sp, #12
   b7e3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e40:	2300      	movs	r3, #0
   b7e42:	9300      	str	r3, [sp, #0]
   b7e44:	461a      	mov	r2, r3
   b7e46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e4a:	f7fe ff27 	bl	b6c9c <system_ctrl_set_result>
}
   b7e4e:	e7f4      	b.n	b7e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7e50:	2003e6ac 	.word	0x2003e6ac

000b7e54 <module_user_init_hook>:
{
   b7e54:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7e56:	4812      	ldr	r0, [pc, #72]	; (b7ea0 <module_user_init_hook+0x4c>)
   b7e58:	2100      	movs	r1, #0
   b7e5a:	f7fe ff61 	bl	b6d20 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7e5e:	4b11      	ldr	r3, [pc, #68]	; (b7ea4 <module_user_init_hook+0x50>)
   b7e60:	681a      	ldr	r2, [r3, #0]
   b7e62:	4b11      	ldr	r3, [pc, #68]	; (b7ea8 <module_user_init_hook+0x54>)
   b7e64:	429a      	cmp	r2, r3
   b7e66:	4b11      	ldr	r3, [pc, #68]	; (b7eac <module_user_init_hook+0x58>)
   b7e68:	bf0c      	ite	eq
   b7e6a:	2201      	moveq	r2, #1
   b7e6c:	2200      	movne	r2, #0
   b7e6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7e70:	d001      	beq.n	b7e76 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7e72:	f7ff ffb1 	bl	b7dd8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7e76:	f7fe fe07 	bl	b6a88 <HAL_RNG_GetRandomNumber>
   b7e7a:	4604      	mov	r4, r0
    srand(seed);
   b7e7c:	f004 fb9a 	bl	bc5b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7e80:	4b0b      	ldr	r3, [pc, #44]	; (b7eb0 <module_user_init_hook+0x5c>)
   b7e82:	b113      	cbz	r3, b7e8a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7e84:	4620      	mov	r0, r4
   b7e86:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7e8a:	2100      	movs	r1, #0
   b7e8c:	4808      	ldr	r0, [pc, #32]	; (b7eb0 <module_user_init_hook+0x5c>)
   b7e8e:	f7fe fe83 	bl	b6b98 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7e96:	4807      	ldr	r0, [pc, #28]	; (b7eb4 <module_user_init_hook+0x60>)
   b7e98:	2100      	movs	r1, #0
   b7e9a:	f7fe bef5 	b.w	b6c88 <system_ctrl_set_app_request_handler>
   b7e9e:	bf00      	nop
   b7ea0:	000b7d81 	.word	0x000b7d81
   b7ea4:	2003f400 	.word	0x2003f400
   b7ea8:	9a271c1e 	.word	0x9a271c1e
   b7eac:	2003e6a8 	.word	0x2003e6a8
   b7eb0:	00000000 	.word	0x00000000
   b7eb4:	000b7e1d 	.word	0x000b7e1d

000b7eb8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7eb8:	4b01      	ldr	r3, [pc, #4]	; (b7ec0 <_GLOBAL__sub_I_RGB+0x8>)
   b7eba:	2200      	movs	r2, #0
   b7ebc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7ebe:	4770      	bx	lr
   b7ec0:	2003e6b0 	.word	0x2003e6b0

000b7ec4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7ec4:	4b02      	ldr	r3, [pc, #8]	; (b7ed0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7ec6:	681a      	ldr	r2, [r3, #0]
   b7ec8:	4b02      	ldr	r3, [pc, #8]	; (b7ed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7eca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7ecc:	4770      	bx	lr
   b7ece:	bf00      	nop
   b7ed0:	2003e478 	.word	0x2003e478
   b7ed4:	2003e6c0 	.word	0x2003e6c0

000b7ed8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b7ed8:	6880      	ldr	r0, [r0, #8]
   b7eda:	6803      	ldr	r3, [r0, #0]
   b7edc:	68db      	ldr	r3, [r3, #12]
   b7ede:	4718      	bx	r3

000b7ee0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b7ee0:	4770      	bx	lr

000b7ee2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b7ee2:	4608      	mov	r0, r1
   b7ee4:	b111      	cbz	r1, b7eec <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b7ee6:	680b      	ldr	r3, [r1, #0]
   b7ee8:	685b      	ldr	r3, [r3, #4]
   b7eea:	4718      	bx	r3
}
   b7eec:	4770      	bx	lr

000b7eee <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b7eee:	4770      	bx	lr

000b7ef0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7ef0:	4770      	bx	lr

000b7ef2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b7ef2:	4770      	bx	lr

000b7ef4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7ef4:	4770      	bx	lr

000b7ef6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b7ef6:	b538      	push	{r3, r4, r5, lr}
   b7ef8:	4604      	mov	r4, r0
   b7efa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b7efc:	6800      	ldr	r0, [r0, #0]
   b7efe:	212e      	movs	r1, #46	; 0x2e
   b7f00:	f004 fb93 	bl	bc62a <strchrnul>
    size = s - category;
   b7f04:	6823      	ldr	r3, [r4, #0]
   b7f06:	1ac3      	subs	r3, r0, r3
   b7f08:	602b      	str	r3, [r5, #0]
    if (size) {
   b7f0a:	b123      	cbz	r3, b7f16 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7f0c:	7803      	ldrb	r3, [r0, #0]
   b7f0e:	b103      	cbz	r3, b7f12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7f10:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b7f12:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f14:	6020      	str	r0, [r4, #0]
}
   b7f16:	4618      	mov	r0, r3
   b7f18:	bd38      	pop	{r3, r4, r5, pc}

000b7f1a <_ZN5spark16JSONStreamWriterD0Ev>:
   b7f1a:	b510      	push	{r4, lr}
   b7f1c:	210c      	movs	r1, #12
   b7f1e:	4604      	mov	r4, r0
   b7f20:	f7fc f8bf 	bl	b40a2 <_ZdlPvj>
   b7f24:	4620      	mov	r0, r4
   b7f26:	bd10      	pop	{r4, pc}

000b7f28 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b7f28:	b510      	push	{r4, lr}
   b7f2a:	2104      	movs	r1, #4
   b7f2c:	4604      	mov	r4, r0
   b7f2e:	f7fc f8b8 	bl	b40a2 <_ZdlPvj>
   b7f32:	4620      	mov	r0, r4
   b7f34:	bd10      	pop	{r4, pc}

000b7f36 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7f36:	b510      	push	{r4, lr}
   b7f38:	2104      	movs	r1, #4
   b7f3a:	4604      	mov	r4, r0
   b7f3c:	f7fc f8b1 	bl	b40a2 <_ZdlPvj>
   b7f40:	4620      	mov	r0, r4
   b7f42:	bd10      	pop	{r4, pc}

000b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7f44:	f7fe bd30 	b.w	b69a8 <os_mutex_recursive_lock>

000b7f48 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7f48:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7f4a:	f004 fb78 	bl	bc63e <strcmp>
}
   b7f4e:	fab0 f080 	clz	r0, r0
   b7f52:	0940      	lsrs	r0, r0, #5
   b7f54:	bd08      	pop	{r3, pc}

000b7f56 <__tcf_1>:
   b7f56:	4770      	bx	lr

000b7f58 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7f58:	b510      	push	{r4, lr}
   b7f5a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b7f5c:	f7ff fdfa 	bl	b7b54 <_Z16_fetch_usbserialv>
   b7f60:	4284      	cmp	r4, r0
   b7f62:	d010      	beq.n	b7f86 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b7f64:	f003 fc60 	bl	bb828 <_Z22__fetch_global_Serial1v>
   b7f68:	4284      	cmp	r4, r0
   b7f6a:	d105      	bne.n	b7f78 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7f6c:	f003 fc5c 	bl	bb828 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b7f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b7f74:	f7ff bd09 	b.w	b798a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b7f78:	b12c      	cbz	r4, b7f86 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b7f7a:	6823      	ldr	r3, [r4, #0]
   b7f7c:	4620      	mov	r0, r4
   b7f7e:	685b      	ldr	r3, [r3, #4]
}
   b7f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7f84:	4718      	bx	r3
   b7f86:	bd10      	pop	{r4, pc}

000b7f88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7f88:	680b      	ldr	r3, [r1, #0]
   b7f8a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7f8c:	684b      	ldr	r3, [r1, #4]
   b7f8e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7f90:	b113      	cbz	r3, b7f98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7f92:	685a      	ldr	r2, [r3, #4]
   b7f94:	3201      	adds	r2, #1
   b7f96:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7f98:	4770      	bx	lr

000b7f9a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b7f9a:	b513      	push	{r0, r1, r4, lr}
   b7f9c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b7f9e:	4608      	mov	r0, r1
   b7fa0:	9101      	str	r1, [sp, #4]
   b7fa2:	f004 fb5e 	bl	bc662 <strlen>
   b7fa6:	9901      	ldr	r1, [sp, #4]
   b7fa8:	4602      	mov	r2, r0
   b7faa:	4620      	mov	r0, r4
}
   b7fac:	b002      	add	sp, #8
   b7fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b7fb2:	f7ff b899 	b.w	b70e8 <_ZN5spark10JSONWriter5valueEPKcj>

000b7fb6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b7fb6:	b513      	push	{r0, r1, r4, lr}
   b7fb8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b7fba:	4608      	mov	r0, r1
   b7fbc:	9101      	str	r1, [sp, #4]
   b7fbe:	f004 fb50 	bl	bc662 <strlen>
   b7fc2:	6823      	ldr	r3, [r4, #0]
   b7fc4:	9901      	ldr	r1, [sp, #4]
   b7fc6:	68db      	ldr	r3, [r3, #12]
   b7fc8:	4602      	mov	r2, r0
   b7fca:	4620      	mov	r0, r4
}
   b7fcc:	b002      	add	sp, #8
   b7fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b7fd2:	4718      	bx	r3

000b7fd4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b7fd4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7fd6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b7fd8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7fdc:	68db      	ldr	r3, [r3, #12]
   b7fde:	2201      	movs	r2, #1
   b7fe0:	f10d 0107 	add.w	r1, sp, #7
   b7fe4:	4798      	blx	r3
}
   b7fe6:	b003      	add	sp, #12
   b7fe8:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fec <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7fec:	b40e      	push	{r1, r2, r3}
   b7fee:	b503      	push	{r0, r1, lr}
   b7ff0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b7ff2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7ff4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b7ff8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b7ffa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b7ffc:	f000 ff55 	bl	b8eaa <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b8000:	b002      	add	sp, #8
   b8002:	f85d eb04 	ldr.w	lr, [sp], #4
   b8006:	b003      	add	sp, #12
   b8008:	4770      	bx	lr

000b800a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b800a:	680a      	ldr	r2, [r1, #0]
   b800c:	6002      	str	r2, [r0, #0]
   b800e:	684a      	ldr	r2, [r1, #4]
   b8010:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b8012:	2200      	movs	r2, #0
   b8014:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8018:	b510      	push	{r4, lr}
   b801a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b801c:	688c      	ldr	r4, [r1, #8]
   b801e:	6084      	str	r4, [r0, #8]
   b8020:	68cc      	ldr	r4, [r1, #12]
   b8022:	60c4      	str	r4, [r0, #12]
   b8024:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8026:	608a      	str	r2, [r1, #8]
   b8028:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b802a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b802c:	610a      	str	r2, [r1, #16]
   b802e:	bd10      	pop	{r4, pc}

000b8030 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b8034:	e9d0 8400 	ldrd	r8, r4, [r0]
   b8038:	f04f 0a14 	mov.w	sl, #20
   b803c:	9300      	str	r3, [sp, #0]
   b803e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b8042:	4b18      	ldr	r3, [pc, #96]	; (b80a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8044:	10a4      	asrs	r4, r4, #2
   b8046:	4617      	mov	r7, r2
   b8048:	435c      	muls	r4, r3
   b804a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b804c:	2c00      	cmp	r4, #0
   b804e:	dd21      	ble.n	b8094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b8050:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b8052:	fb0a f006 	mul.w	r0, sl, r6
   b8056:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b805a:	463a      	mov	r2, r7
   b805c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8060:	5828      	ldr	r0, [r5, r0]
   b8062:	9101      	str	r1, [sp, #4]
   b8064:	455f      	cmp	r7, fp
   b8066:	bf28      	it	cs
   b8068:	465a      	movcs	r2, fp
   b806a:	f004 fb02 	bl	bc672 <strncmp>
                if (cmp == 0) {
   b806e:	2800      	cmp	r0, #0
   b8070:	9901      	ldr	r1, [sp, #4]
   b8072:	f04f 0301 	mov.w	r3, #1
   b8076:	d10b      	bne.n	b8090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8078:	455f      	cmp	r7, fp
   b807a:	d103      	bne.n	b8084 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b807c:	9a00      	ldr	r2, [sp, #0]
   b807e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8080:	4634      	mov	r4, r6
   b8082:	e7e3      	b.n	b804c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8084:	d9fc      	bls.n	b8080 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8086:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8088:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b808c:	3e01      	subs	r6, #1
   b808e:	e7f7      	b.n	b8080 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8090:	dbf9      	blt.n	b8086 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8092:	e7f5      	b.n	b8080 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8094:	eba5 0508 	sub.w	r5, r5, r8
}
   b8098:	4802      	ldr	r0, [pc, #8]	; (b80a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b809a:	10ad      	asrs	r5, r5, #2
   b809c:	4368      	muls	r0, r5
   b809e:	b003      	add	sp, #12
   b80a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b80a4:	cccccccd 	.word	0xcccccccd

000b80a8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b80a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b80aa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b80ac:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b80ae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b80b0:	b303      	cbz	r3, b80f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b80b2:	b1f9      	cbz	r1, b80f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b80b4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b80b6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b80ba:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b80bc:	a903      	add	r1, sp, #12
   b80be:	a801      	add	r0, sp, #4
   b80c0:	f7ff ff19 	bl	b7ef6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b80c4:	4601      	mov	r1, r0
   b80c6:	b1a8      	cbz	r0, b80f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b80c8:	f10d 030b 	add.w	r3, sp, #11
   b80cc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b80ce:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b80d2:	4620      	mov	r0, r4
   b80d4:	f7ff ffac 	bl	b8030 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b80d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b80dc:	b153      	cbz	r3, b80f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b80de:	6823      	ldr	r3, [r4, #0]
   b80e0:	2414      	movs	r4, #20
   b80e2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b80e6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b80e8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b80ec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b80ee:	bfa8      	it	ge
   b80f0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b80f2:	e7e3      	b.n	b80bc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b80f4:	4628      	mov	r0, r5
   b80f6:	b004      	add	sp, #16
   b80f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b80fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b80fc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b80fe:	4c09      	ldr	r4, [pc, #36]	; (b8124 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8100:	7823      	ldrb	r3, [r4, #0]
   b8102:	f3bf 8f5b 	dmb	ish
   b8106:	07db      	lsls	r3, r3, #31
   b8108:	d409      	bmi.n	b811e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b810a:	4620      	mov	r0, r4
   b810c:	f7fb ffd8 	bl	b40c0 <__cxa_guard_acquire>
   b8110:	b128      	cbz	r0, b811e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8112:	4620      	mov	r0, r4
   b8114:	f7fb ffd9 	bl	b40ca <__cxa_guard_release>
   b8118:	4803      	ldr	r0, [pc, #12]	; (b8128 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b811a:	f004 f9f9 	bl	bc510 <atexit>
}
   b811e:	4803      	ldr	r0, [pc, #12]	; (b812c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8120:	bd10      	pop	{r4, pc}
   b8122:	bf00      	nop
   b8124:	2003e6c8 	.word	0x2003e6c8
   b8128:	000b7eef 	.word	0x000b7eef
   b812c:	2003e47c 	.word	0x2003e47c

000b8130 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b8130:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b8132:	4c09      	ldr	r4, [pc, #36]	; (b8158 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8134:	7823      	ldrb	r3, [r4, #0]
   b8136:	f3bf 8f5b 	dmb	ish
   b813a:	07db      	lsls	r3, r3, #31
   b813c:	d409      	bmi.n	b8152 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b813e:	4620      	mov	r0, r4
   b8140:	f7fb ffbe 	bl	b40c0 <__cxa_guard_acquire>
   b8144:	b128      	cbz	r0, b8152 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8146:	4620      	mov	r0, r4
   b8148:	f7fb ffbf 	bl	b40ca <__cxa_guard_release>
   b814c:	4803      	ldr	r0, [pc, #12]	; (b815c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b814e:	f004 f9df 	bl	bc510 <atexit>
    return &factory;
}
   b8152:	4803      	ldr	r0, [pc, #12]	; (b8160 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b8154:	bd10      	pop	{r4, pc}
   b8156:	bf00      	nop
   b8158:	2003e6cc 	.word	0x2003e6cc
   b815c:	000b7f57 	.word	0x000b7f57
   b8160:	2003e480 	.word	0x2003e480

000b8164 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8164:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8166:	2500      	movs	r5, #0
   b8168:	4604      	mov	r4, r0
   b816a:	e9c0 5500 	strd	r5, r5, [r0]
   b816e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8172:	6085      	str	r5, [r0, #8]
   b8174:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8176:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b817a:	f7fe fc05 	bl	b6988 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b817e:	f7ff ffbd 	bl	b80fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b8182:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8184:	f7ff ffd4 	bl	b8130 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b8188:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b818a:	6220      	str	r0, [r4, #32]
}
   b818c:	4620      	mov	r0, r4
   b818e:	bd38      	pop	{r3, r4, r5, pc}

000b8190 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b8190:	b510      	push	{r4, lr}
    static LogManager mgr;
   b8192:	4c0a      	ldr	r4, [pc, #40]	; (b81bc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b8194:	7823      	ldrb	r3, [r4, #0]
   b8196:	f3bf 8f5b 	dmb	ish
   b819a:	07db      	lsls	r3, r3, #31
   b819c:	d40c      	bmi.n	b81b8 <_ZN5spark10LogManager8instanceEv+0x28>
   b819e:	4620      	mov	r0, r4
   b81a0:	f7fb ff8e 	bl	b40c0 <__cxa_guard_acquire>
   b81a4:	b140      	cbz	r0, b81b8 <_ZN5spark10LogManager8instanceEv+0x28>
   b81a6:	4806      	ldr	r0, [pc, #24]	; (b81c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b81a8:	f7ff ffdc 	bl	b8164 <_ZN5spark10LogManagerC1Ev>
   b81ac:	4620      	mov	r0, r4
   b81ae:	f7fb ff8c 	bl	b40ca <__cxa_guard_release>
   b81b2:	4804      	ldr	r0, [pc, #16]	; (b81c4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b81b4:	f004 f9ac 	bl	bc510 <atexit>
    return &mgr;
}
   b81b8:	4801      	ldr	r0, [pc, #4]	; (b81c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b81ba:	bd10      	pop	{r4, pc}
   b81bc:	2003e6c4 	.word	0x2003e6c4
   b81c0:	2003e6d4 	.word	0x2003e6d4
   b81c4:	000b8709 	.word	0x000b8709

000b81c8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b81c8:	4a02      	ldr	r2, [pc, #8]	; (b81d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b81ca:	4903      	ldr	r1, [pc, #12]	; (b81d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b81cc:	4803      	ldr	r0, [pc, #12]	; (b81dc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b81ce:	2300      	movs	r3, #0
   b81d0:	f7fe bcd2 	b.w	b6b78 <log_set_callbacks>
   b81d4:	000b84ed 	.word	0x000b84ed
   b81d8:	000b8479 	.word	0x000b8479
   b81dc:	000b83f9 	.word	0x000b83f9

000b81e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b81e0:	2300      	movs	r3, #0
   b81e2:	461a      	mov	r2, r3
   b81e4:	4619      	mov	r1, r3
   b81e6:	4618      	mov	r0, r3
   b81e8:	f7fe bcc6 	b.w	b6b78 <log_set_callbacks>

000b81ec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b81ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b81ee:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b81f0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b81f2:	4668      	mov	r0, sp
   b81f4:	f7ff fec8 	bl	b7f88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b81f8:	466a      	mov	r2, sp
   b81fa:	4629      	mov	r1, r5
   b81fc:	4620      	mov	r0, r4
   b81fe:	f7fe fe93 	bl	b6f28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8202:	a801      	add	r0, sp, #4
   b8204:	f7fe ff80 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8208:	4620      	mov	r0, r4
   b820a:	b003      	add	sp, #12
   b820c:	bd30      	pop	{r4, r5, pc}

000b820e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b820e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8210:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8212:	4604      	mov	r4, r0
   b8214:	4668      	mov	r0, sp
   b8216:	f7ff feb7 	bl	b7f88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b821a:	466a      	mov	r2, sp
   b821c:	4629      	mov	r1, r5
   b821e:	4620      	mov	r0, r4
   b8220:	f7fe fe5e 	bl	b6ee0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8224:	a801      	add	r0, sp, #4
   b8226:	f7fe ff6f 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b822a:	4620      	mov	r0, r4
   b822c:	b003      	add	sp, #12
   b822e:	bd30      	pop	{r4, r5, pc}

000b8230 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8230:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8232:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8234:	4604      	mov	r4, r0
   b8236:	4668      	mov	r0, sp
   b8238:	f7ff fea6 	bl	b7f88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b823c:	466a      	mov	r2, sp
   b823e:	4629      	mov	r1, r5
   b8240:	4620      	mov	r0, r4
   b8242:	f7fe fdf6 	bl	b6e32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8246:	a801      	add	r0, sp, #4
   b8248:	f7fe ff5e 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b824c:	4620      	mov	r0, r4
   b824e:	b003      	add	sp, #12
   b8250:	bd30      	pop	{r4, r5, pc}
	...

000b8254 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b8254:	b570      	push	{r4, r5, r6, lr}
   b8256:	b08a      	sub	sp, #40	; 0x28
   b8258:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b825a:	4601      	mov	r1, r0
   b825c:	a804      	add	r0, sp, #16
   b825e:	f7ff ffc5 	bl	b81ec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8262:	4e14      	ldr	r6, [pc, #80]	; (b82b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8264:	a804      	add	r0, sp, #16
   b8266:	f7fe fe77 	bl	b6f58 <_ZN5spark18JSONObjectIterator4nextEv>
   b826a:	b1e8      	cbz	r0, b82a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b826c:	a904      	add	r1, sp, #16
   b826e:	4668      	mov	r0, sp
   b8270:	f7ff ffcd 	bl	b820e <_ZNK5spark18JSONObjectIterator4nameEv>
   b8274:	9802      	ldr	r0, [sp, #8]
   b8276:	4631      	mov	r1, r6
   b8278:	f7ff fe66 	bl	b7f48 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b827c:	4604      	mov	r4, r0
   b827e:	b110      	cbz	r0, b8286 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b8280:	1e2c      	subs	r4, r5, #0
   b8282:	bf18      	it	ne
   b8284:	2401      	movne	r4, #1
   b8286:	a801      	add	r0, sp, #4
   b8288:	f7fe ff3e 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b828c:	2c00      	cmp	r4, #0
   b828e:	d0e9      	beq.n	b8264 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b8290:	a904      	add	r1, sp, #16
   b8292:	4668      	mov	r0, sp
   b8294:	f7ff ffcc 	bl	b8230 <_ZNK5spark18JSONObjectIterator5valueEv>
   b8298:	4668      	mov	r0, sp
   b829a:	f7fe fe00 	bl	b6e9e <_ZNK5spark9JSONValue5toIntEv>
   b829e:	6028      	str	r0, [r5, #0]
   b82a0:	a801      	add	r0, sp, #4
   b82a2:	f7fe ff31 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82a6:	e7dd      	b.n	b8264 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b82a8:	a805      	add	r0, sp, #20
   b82aa:	f7fe ff2d 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82ae:	b00a      	add	sp, #40	; 0x28
   b82b0:	bd70      	pop	{r4, r5, r6, pc}
   b82b2:	bf00      	nop
   b82b4:	000be008 	.word	0x000be008

000b82b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b82b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82ba:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b82bc:	4620      	mov	r0, r4
   b82be:	4913      	ldr	r1, [pc, #76]	; (b830c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b82c0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b82c2:	f004 f9bc 	bl	bc63e <strcmp>
   b82c6:	b950      	cbnz	r0, b82de <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b82c8:	f7ff fc44 	bl	b7b54 <_Z16_fetch_usbserialv>
   b82cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b82d0:	f7ff fc30 	bl	b7b34 <_ZN9USBSerial5beginEl>
}
   b82d4:	b003      	add	sp, #12
   b82d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b82da:	f7ff bc3b 	b.w	b7b54 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b82de:	490c      	ldr	r1, [pc, #48]	; (b8310 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b82e0:	4620      	mov	r0, r4
   b82e2:	f004 f9ac 	bl	bc63e <strcmp>
   b82e6:	b978      	cbnz	r0, b8308 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b82e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b82ec:	a901      	add	r1, sp, #4
   b82ee:	4628      	mov	r0, r5
        int baud = 9600;
   b82f0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b82f2:	f7ff ffaf 	bl	b8254 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b82f6:	f003 fa97 	bl	bb828 <_Z22__fetch_global_Serial1v>
   b82fa:	9901      	ldr	r1, [sp, #4]
   b82fc:	f7ff fb42 	bl	b7984 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8300:	f003 fa92 	bl	bb828 <_Z22__fetch_global_Serial1v>
}
   b8304:	b003      	add	sp, #12
   b8306:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8308:	2000      	movs	r0, #0
   b830a:	e7fb      	b.n	b8304 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b830c:	000be00d 	.word	0x000be00d
   b8310:	000be014 	.word	0x000be014

000b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8314:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8316:	e9d0 5300 	ldrd	r5, r3, [r0]
   b831a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b831c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b831e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8322:	42ae      	cmp	r6, r5
   b8324:	d005      	beq.n	b8332 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8326:	f105 0008 	add.w	r0, r5, #8
   b832a:	f7ff fff3 	bl	b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b832e:	3514      	adds	r5, #20
   b8330:	e7f7      	b.n	b8322 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8332:	6820      	ldr	r0, [r4, #0]
   b8334:	f7fe fcc4 	bl	b6cc0 <free>
}
   b8338:	4620      	mov	r0, r4
   b833a:	bd70      	pop	{r4, r5, r6, pc}

000b833c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b833c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b833e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8342:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8344:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8348:	42ae      	cmp	r6, r5
   b834a:	d004      	beq.n	b8356 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b834c:	4628      	mov	r0, r5
   b834e:	f002 fffb 	bl	bb348 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8352:	3510      	adds	r5, #16
   b8354:	e7f8      	b.n	b8348 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8356:	6820      	ldr	r0, [r4, #0]
   b8358:	f7fe fcb2 	bl	b6cc0 <free>
}
   b835c:	4620      	mov	r0, r4
   b835e:	bd70      	pop	{r4, r5, r6, pc}

000b8360 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b8360:	b510      	push	{r4, lr}
   b8362:	4604      	mov	r4, r0
   b8364:	300c      	adds	r0, #12
   b8366:	f7ff ffd5 	bl	b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b836a:	4620      	mov	r0, r4
   b836c:	f7ff ffe6 	bl	b833c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8370:	4620      	mov	r0, r4
   b8372:	bd10      	pop	{r4, pc}

000b8374 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b8374:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b8376:	4b04      	ldr	r3, [pc, #16]	; (b8388 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b8378:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b837a:	f840 3b04 	str.w	r3, [r0], #4
   b837e:	f7ff ffef 	bl	b8360 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b8382:	4620      	mov	r0, r4
   b8384:	bd10      	pop	{r4, pc}
   b8386:	bf00      	nop
   b8388:	000bca2c 	.word	0x000bca2c

000b838c <_ZN5spark16StreamLogHandlerD0Ev>:
   b838c:	b510      	push	{r4, lr}
   b838e:	4604      	mov	r4, r0
   b8390:	f7ff fff0 	bl	b8374 <_ZN5spark16StreamLogHandlerD1Ev>
   b8394:	4620      	mov	r0, r4
   b8396:	2124      	movs	r1, #36	; 0x24
   b8398:	f7fb fe83 	bl	b40a2 <_ZdlPvj>
   b839c:	4620      	mov	r0, r4
   b839e:	bd10      	pop	{r4, pc}

000b83a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b83a0:	b510      	push	{r4, lr}
   b83a2:	4b03      	ldr	r3, [pc, #12]	; (b83b0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b83a4:	6003      	str	r3, [r0, #0]
   b83a6:	4604      	mov	r4, r0
   b83a8:	f7ff ffe4 	bl	b8374 <_ZN5spark16StreamLogHandlerD1Ev>
   b83ac:	4620      	mov	r0, r4
   b83ae:	bd10      	pop	{r4, pc}
   b83b0:	000be0ac 	.word	0x000be0ac

000b83b4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b83b4:	b510      	push	{r4, lr}
   b83b6:	4604      	mov	r4, r0
   b83b8:	f7ff fff2 	bl	b83a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b83bc:	4620      	mov	r0, r4
   b83be:	2124      	movs	r1, #36	; 0x24
   b83c0:	f7fb fe6f 	bl	b40a2 <_ZdlPvj>
   b83c4:	4620      	mov	r0, r4
   b83c6:	bd10      	pop	{r4, pc}

000b83c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b83c8:	2200      	movs	r2, #0
   b83ca:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b83ce:	b510      	push	{r4, lr}
        capacity_(0) {
   b83d0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b83d2:	680c      	ldr	r4, [r1, #0]
   b83d4:	6004      	str	r4, [r0, #0]
   b83d6:	684c      	ldr	r4, [r1, #4]
   b83d8:	6044      	str	r4, [r0, #4]
   b83da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b83dc:	600a      	str	r2, [r1, #0]
   b83de:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b83e0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b83e2:	608a      	str	r2, [r1, #8]
}
   b83e4:	bd10      	pop	{r4, pc}

000b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b83e6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b83e8:	6803      	ldr	r3, [r0, #0]
   b83ea:	4604      	mov	r4, r0
   b83ec:	6818      	ldr	r0, [r3, #0]
   b83ee:	f7fe fae3 	bl	b69b8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b83f2:	4620      	mov	r0, r4
   b83f4:	bd10      	pop	{r4, pc}
	...

000b83f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b83f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83fc:	b087      	sub	sp, #28
   b83fe:	4680      	mov	r8, r0
   b8400:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b8402:	4b1c      	ldr	r3, [pc, #112]	; (b8474 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8404:	685b      	ldr	r3, [r3, #4]
   b8406:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b840a:	4689      	mov	r9, r1
   b840c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b840e:	b96b      	cbnz	r3, b842c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b8410:	f7ff febe 	bl	b8190 <_ZN5spark10LogManager8instanceEv>
   b8414:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8416:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b841a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b841c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b841e:	f7ff fd91 	bl	b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b8422:	7b23      	ldrb	r3, [r4, #12]
   b8424:	b12b      	cbz	r3, b8432 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8426:	a805      	add	r0, sp, #20
   b8428:	f7ff ffdd 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b842c:	b007      	add	sp, #28
   b842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b8432:	2301      	movs	r3, #1
   b8434:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8436:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b843a:	fa5f f989 	uxtb.w	r9, r9
   b843e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8442:	45aa      	cmp	sl, r5
   b8444:	d012      	beq.n	b846c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8446:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b844a:	4631      	mov	r1, r6
   b844c:	1d38      	adds	r0, r7, #4
   b844e:	f7ff fe2b 	bl	b80a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8452:	4581      	cmp	r9, r0
   b8454:	d3f5      	bcc.n	b8442 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8456:	683b      	ldr	r3, [r7, #0]
   b8458:	9a03      	ldr	r2, [sp, #12]
   b845a:	9200      	str	r2, [sp, #0]
   b845c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b8460:	464a      	mov	r2, r9
   b8462:	4633      	mov	r3, r6
   b8464:	4641      	mov	r1, r8
   b8466:	4638      	mov	r0, r7
   b8468:	47d8      	blx	fp
   b846a:	e7ea      	b.n	b8442 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b846c:	2300      	movs	r3, #0
   b846e:	7323      	strb	r3, [r4, #12]
   b8470:	e7d9      	b.n	b8426 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b8472:	bf00      	nop
   b8474:	e000ed00 	.word	0xe000ed00

000b8478 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b847c:	469b      	mov	fp, r3
   b847e:	4b1a      	ldr	r3, [pc, #104]	; (b84e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b8480:	685b      	ldr	r3, [r3, #4]
   b8482:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8486:	4680      	mov	r8, r0
   b8488:	4689      	mov	r9, r1
   b848a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b848c:	b96b      	cbnz	r3, b84aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b848e:	f7ff fe7f 	bl	b8190 <_ZN5spark10LogManager8instanceEv>
   b8492:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8494:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8498:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b849a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b849c:	f7ff fd52 	bl	b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b84a0:	7b23      	ldrb	r3, [r4, #12]
   b84a2:	b12b      	cbz	r3, b84b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b84a4:	a801      	add	r0, sp, #4
   b84a6:	f7ff ff9e 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b84aa:	b003      	add	sp, #12
   b84ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b84b0:	2301      	movs	r3, #1
   b84b2:	7323      	strb	r3, [r4, #12]
   b84b4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b84b8:	b2f6      	uxtb	r6, r6
   b84ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b84be:	4555      	cmp	r5, sl
   b84c0:	d00e      	beq.n	b84e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b84c2:	f855 7b04 	ldr.w	r7, [r5], #4
   b84c6:	4659      	mov	r1, fp
   b84c8:	1d38      	adds	r0, r7, #4
   b84ca:	f7ff fded 	bl	b80a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b84ce:	4286      	cmp	r6, r0
   b84d0:	d3f5      	bcc.n	b84be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b84d2:	683b      	ldr	r3, [r7, #0]
   b84d4:	464a      	mov	r2, r9
   b84d6:	68db      	ldr	r3, [r3, #12]
   b84d8:	4641      	mov	r1, r8
   b84da:	4638      	mov	r0, r7
   b84dc:	4798      	blx	r3
   b84de:	e7ee      	b.n	b84be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b84e0:	2300      	movs	r3, #0
   b84e2:	7323      	strb	r3, [r4, #12]
   b84e4:	e7de      	b.n	b84a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b84e6:	bf00      	nop
   b84e8:	e000ed00 	.word	0xe000ed00

000b84ec <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b84ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b84f0:	4b16      	ldr	r3, [pc, #88]	; (b854c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b84f2:	685b      	ldr	r3, [r3, #4]
   b84f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b84f8:	4605      	mov	r5, r0
   b84fa:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b84fc:	bb1b      	cbnz	r3, b8546 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b84fe:	f7ff fe47 	bl	b8190 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b8502:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8506:	4604      	mov	r4, r0
   b8508:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b850a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b850c:	f7ff fd1a 	bl	b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>
   b8510:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8514:	2446      	movs	r4, #70	; 0x46
   b8516:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b851a:	45b0      	cmp	r8, r6
   b851c:	d109      	bne.n	b8532 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b851e:	a801      	add	r0, sp, #4
   b8520:	f7ff ff61 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8524:	42a5      	cmp	r5, r4
   b8526:	bfb4      	ite	lt
   b8528:	2000      	movlt	r0, #0
   b852a:	2001      	movge	r0, #1
}
   b852c:	b002      	add	sp, #8
   b852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b8532:	f856 0b04 	ldr.w	r0, [r6], #4
   b8536:	4639      	mov	r1, r7
   b8538:	3004      	adds	r0, #4
   b853a:	f7ff fdb5 	bl	b80a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b853e:	4284      	cmp	r4, r0
   b8540:	bfa8      	it	ge
   b8542:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8544:	e7e9      	b.n	b851a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8546:	2000      	movs	r0, #0
   b8548:	e7f0      	b.n	b852c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b854a:	bf00      	nop
   b854c:	e000ed00 	.word	0xe000ed00

000b8550 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8552:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8556:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8558:	4604      	mov	r4, r0
   b855a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b855c:	db0d      	blt.n	b857a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b855e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b8560:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8562:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8564:	dd04      	ble.n	b8570 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8566:	00b9      	lsls	r1, r7, #2
   b8568:	f7fe fbb2 	bl	b6cd0 <realloc>
            if (!d) {
   b856c:	b918      	cbnz	r0, b8576 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b8570:	f7fe fba6 	bl	b6cc0 <free>
        T* d = nullptr;
   b8574:	2000      	movs	r0, #0
        data_ = d;
   b8576:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8578:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b857a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b857c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b857e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b8582:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8584:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8588:	1d08      	adds	r0, r1, #4
   b858a:	f003 fff1 	bl	bc570 <memmove>
    new(p) T(std::move(value));
   b858e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b8592:	6863      	ldr	r3, [r4, #4]
   b8594:	3301      	adds	r3, #1
   b8596:	6063      	str	r3, [r4, #4]
    return true;
   b8598:	2001      	movs	r0, #1
   b859a:	e7e8      	b.n	b856e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b859c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b859c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b859e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b85a2:	4604      	mov	r4, r0
   b85a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b85a6:	9301      	str	r3, [sp, #4]
   b85a8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b85aa:	f7ff fccb 	bl	b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b85ae:	e9d4 3200 	ldrd	r3, r2, [r4]
   b85b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b85b6:	4293      	cmp	r3, r2
   b85b8:	4619      	mov	r1, r3
   b85ba:	d00b      	beq.n	b85d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b85bc:	6809      	ldr	r1, [r1, #0]
   b85be:	42a9      	cmp	r1, r5
   b85c0:	f103 0304 	add.w	r3, r3, #4
   b85c4:	d1f7      	bne.n	b85b6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b85c6:	a801      	add	r0, sp, #4
   b85c8:	f7ff ff0d 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b85cc:	2500      	movs	r5, #0
}
   b85ce:	4628      	mov	r0, r5
   b85d0:	b003      	add	sp, #12
   b85d2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b85d4:	4629      	mov	r1, r5
   b85d6:	4620      	mov	r0, r4
   b85d8:	f7ff ffba 	bl	b8550 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b85dc:	4605      	mov	r5, r0
   b85de:	2800      	cmp	r0, #0
   b85e0:	d0f1      	beq.n	b85c6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b85e2:	6863      	ldr	r3, [r4, #4]
   b85e4:	2b01      	cmp	r3, #1
   b85e6:	d101      	bne.n	b85ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b85e8:	f7ff fdee 	bl	b81c8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b85ec:	a801      	add	r0, sp, #4
   b85ee:	f7ff fefa 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b85f2:	e7ec      	b.n	b85ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b85f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b85f4:	b570      	push	{r4, r5, r6, lr}
   b85f6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b85f8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b85fc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b85fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b8602:	4282      	cmp	r2, r0
   b8604:	d00f      	beq.n	b8626 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8606:	4601      	mov	r1, r0
            if (*p == value) {
   b8608:	681d      	ldr	r5, [r3, #0]
   b860a:	f851 6b04 	ldr.w	r6, [r1], #4
   b860e:	42ae      	cmp	r6, r5
   b8610:	d107      	bne.n	b8622 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8612:	1a52      	subs	r2, r2, r1
   b8614:	f003 ffac 	bl	bc570 <memmove>
    --size_;
   b8618:	6863      	ldr	r3, [r4, #4]
   b861a:	3b01      	subs	r3, #1
   b861c:	6063      	str	r3, [r4, #4]
    return true;
   b861e:	2001      	movs	r0, #1
}
   b8620:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b8622:	4608      	mov	r0, r1
   b8624:	e7ed      	b.n	b8602 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8626:	2000      	movs	r0, #0
   b8628:	e7fa      	b.n	b8620 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b862a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b862a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b862c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8630:	4604      	mov	r4, r0
   b8632:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8634:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8636:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8638:	f7ff fc84 	bl	b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b863c:	a901      	add	r1, sp, #4
   b863e:	4620      	mov	r0, r4
   b8640:	f7ff ffd8 	bl	b85f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8644:	b118      	cbz	r0, b864e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8646:	6863      	ldr	r3, [r4, #4]
   b8648:	b90b      	cbnz	r3, b864e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b864a:	f7ff fdc9 	bl	b81e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b864e:	a803      	add	r0, sp, #12
   b8650:	f7ff fec9 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8654:	b004      	add	sp, #16
   b8656:	bd10      	pop	{r4, pc}

000b8658 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b8658:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b865a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b865e:	2318      	movs	r3, #24
   b8660:	4604      	mov	r4, r0
   b8662:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b8666:	42ae      	cmp	r6, r5
   b8668:	d015      	beq.n	b8696 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b866a:	f105 0110 	add.w	r1, r5, #16
   b866e:	4620      	mov	r0, r4
   b8670:	f7ff ffc0 	bl	b85f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b8674:	6863      	ldr	r3, [r4, #4]
   b8676:	b90b      	cbnz	r3, b867c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b8678:	f7ff fdb2 	bl	b81e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b867c:	69e0      	ldr	r0, [r4, #28]
   b867e:	6929      	ldr	r1, [r5, #16]
   b8680:	6803      	ldr	r3, [r0, #0]
   b8682:	68db      	ldr	r3, [r3, #12]
   b8684:	4798      	blx	r3
        if (h.stream) {
   b8686:	6969      	ldr	r1, [r5, #20]
   b8688:	b119      	cbz	r1, b8692 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b868a:	6a20      	ldr	r0, [r4, #32]
   b868c:	6803      	ldr	r3, [r0, #0]
   b868e:	68db      	ldr	r3, [r3, #12]
   b8690:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b8692:	3518      	adds	r5, #24
   b8694:	e7e7      	b.n	b8666 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b8696:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b869a:	2618      	movs	r6, #24
   b869c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b86a0:	42ae      	cmp	r6, r5
   b86a2:	d004      	beq.n	b86ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b86a4:	4628      	mov	r0, r5
   b86a6:	f002 fe4f 	bl	bb348 <_ZN6StringD1Ev>
   b86aa:	3518      	adds	r5, #24
   b86ac:	e7f8      	b.n	b86a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b86ae:	2300      	movs	r3, #0
   b86b0:	6163      	str	r3, [r4, #20]
}
   b86b2:	bd70      	pop	{r4, r5, r6, pc}

000b86b4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b86b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86b6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b86b8:	f7ff fd92 	bl	b81e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b86bc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b86c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b86c2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b86c4:	f7ff fc3e 	bl	b7f44 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b86c8:	4620      	mov	r0, r4
   b86ca:	f7ff ffc5 	bl	b8658 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b86ce:	a801      	add	r0, sp, #4
   b86d0:	f7ff fe89 	bl	b83e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b86d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b86d6:	b108      	cbz	r0, b86dc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b86d8:	f7fe f95e 	bl	b6998 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b86dc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b86e0:	2618      	movs	r6, #24
   b86e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b86e6:	42ae      	cmp	r6, r5
   b86e8:	d004      	beq.n	b86f4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b86ea:	4628      	mov	r0, r5
   b86ec:	f002 fe2c 	bl	bb348 <_ZN6StringD1Ev>
   b86f0:	3518      	adds	r5, #24
   b86f2:	e7f8      	b.n	b86e6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b86f4:	6920      	ldr	r0, [r4, #16]
   b86f6:	f7fe fae3 	bl	b6cc0 <free>
   b86fa:	6820      	ldr	r0, [r4, #0]
   b86fc:	f7fe fae0 	bl	b6cc0 <free>
}
   b8700:	4620      	mov	r0, r4
   b8702:	b002      	add	sp, #8
   b8704:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8708 <__tcf_2>:
    static LogManager mgr;
   b8708:	4801      	ldr	r0, [pc, #4]	; (b8710 <__tcf_2+0x8>)
   b870a:	f7ff bfd3 	b.w	b86b4 <_ZN5spark10LogManagerD1Ev>
   b870e:	bf00      	nop
   b8710:	2003e6d4 	.word	0x2003e6d4

000b8714 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8714:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8718:	4604      	mov	r4, r0
   b871a:	460d      	mov	r5, r1
   b871c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b871e:	d915      	bls.n	b874c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b8720:	4290      	cmp	r0, r2
   b8722:	d214      	bcs.n	b874e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8724:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8728:	1a75      	subs	r5, r6, r1
   b872a:	f1a1 0714 	sub.w	r7, r1, #20
   b872e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8730:	42b7      	cmp	r7, r6
   b8732:	d01a      	beq.n	b876a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8734:	b11c      	cbz	r4, b873e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8736:	4631      	mov	r1, r6
   b8738:	4620      	mov	r0, r4
   b873a:	f7ff fc66 	bl	b800a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b873e:	f106 0008 	add.w	r0, r6, #8
   b8742:	f7ff fde7 	bl	b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8746:	3e14      	subs	r6, #20
   b8748:	3c14      	subs	r4, #20
   b874a:	e7f1      	b.n	b8730 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b874c:	d00d      	beq.n	b876a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b874e:	42b5      	cmp	r5, r6
   b8750:	d00b      	beq.n	b876a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b8752:	b11c      	cbz	r4, b875c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b8754:	4629      	mov	r1, r5
   b8756:	4620      	mov	r0, r4
   b8758:	f7ff fc57 	bl	b800a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b875c:	f105 0008 	add.w	r0, r5, #8
   b8760:	f7ff fdd8 	bl	b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b8764:	3514      	adds	r5, #20
   b8766:	3414      	adds	r4, #20
   b8768:	e7f1      	b.n	b874e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b876c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b876c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b876e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8770:	4604      	mov	r4, r0
   b8772:	460d      	mov	r5, r1
   b8774:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8776:	d914      	bls.n	b87a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b8778:	4290      	cmp	r0, r2
   b877a:	d213      	bcs.n	b87a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b877c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b8780:	1a75      	subs	r5, r6, r1
   b8782:	f1a1 0710 	sub.w	r7, r1, #16
   b8786:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8788:	42b7      	cmp	r7, r6
   b878a:	d018      	beq.n	b87be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b878c:	b11c      	cbz	r4, b8796 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b878e:	4631      	mov	r1, r6
   b8790:	4620      	mov	r0, r4
   b8792:	f002 fe55 	bl	bb440 <_ZN6StringC1EOS_>
                end->~T();
   b8796:	4630      	mov	r0, r6
   b8798:	f002 fdd6 	bl	bb348 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b879c:	3e10      	subs	r6, #16
   b879e:	3c10      	subs	r4, #16
   b87a0:	e7f2      	b.n	b8788 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b87a2:	d00c      	beq.n	b87be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b87a4:	42b5      	cmp	r5, r6
   b87a6:	d00a      	beq.n	b87be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b87a8:	b11c      	cbz	r4, b87b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b87aa:	4629      	mov	r1, r5
   b87ac:	4620      	mov	r0, r4
   b87ae:	f002 fe47 	bl	bb440 <_ZN6StringC1EOS_>
                p->~T();
   b87b2:	4628      	mov	r0, r5
   b87b4:	f002 fdc8 	bl	bb348 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b87b8:	3510      	adds	r5, #16
   b87ba:	3410      	adds	r4, #16
   b87bc:	e7f2      	b.n	b87a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b87be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b87c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b87c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b87c4:	4605      	mov	r5, r0
        if (n > 0) {
   b87c6:	dd11      	ble.n	b87ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b87c8:	0130      	lsls	r0, r6, #4
   b87ca:	f7fe fa71 	bl	b6cb0 <malloc>
            if (!d) {
   b87ce:	4604      	mov	r4, r0
   b87d0:	b158      	cbz	r0, b87ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b87d2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b87d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b87da:	f7ff ffc7 	bl	b876c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b87de:	6828      	ldr	r0, [r5, #0]
   b87e0:	f7fe fa6e 	bl	b6cc0 <free>
        data_ = d;
   b87e4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b87e6:	60ae      	str	r6, [r5, #8]
        return true;
   b87e8:	2001      	movs	r0, #1
    }
   b87ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b87ec:	2400      	movs	r4, #0
   b87ee:	e7f6      	b.n	b87de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b87f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b87f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87f4:	4690      	mov	r8, r2
   b87f6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b87f8:	2300      	movs	r3, #0
   b87fa:	9103      	str	r1, [sp, #12]
    return size_;
   b87fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b8800:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8802:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8804:	4299      	cmp	r1, r3
        capacity_(0) {
   b8806:	e9c0 3300 	strd	r3, r3, [r0]
   b880a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b880e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8812:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8816:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8818:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b881a:	dc23      	bgt.n	b8864 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b881c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b8820:	2314      	movs	r3, #20
   b8822:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8826:	42af      	cmp	r7, r5
   b8828:	d03b      	beq.n	b88a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b882a:	4629      	mov	r1, r5
   b882c:	a80b      	add	r0, sp, #44	; 0x2c
   b882e:	f002 fe07 	bl	bb440 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b8832:	a90b      	add	r1, sp, #44	; 0x2c
   b8834:	a80f      	add	r0, sp, #60	; 0x3c
   b8836:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8838:	f002 fe02 	bl	bb440 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b883c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b8840:	4299      	cmp	r1, r3
   b8842:	da1b      	bge.n	b887c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8844:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8846:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8848:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b884c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8850:	4631      	mov	r1, r6
   b8852:	f106 0010 	add.w	r0, r6, #16
   b8856:	f7ff ff89 	bl	b876c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b885a:	b9ee      	cbnz	r6, b8898 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b885e:	3301      	adds	r3, #1
   b8860:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b8862:	e011      	b.n	b8888 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8864:	a808      	add	r0, sp, #32
   b8866:	f7ff ffab 	bl	b87c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b886a:	2800      	cmp	r0, #0
   b886c:	d1d6      	bne.n	b881c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b886e:	a808      	add	r0, sp, #32
   b8870:	f7ff fd64 	bl	b833c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8874:	4620      	mov	r0, r4
   b8876:	b015      	add	sp, #84	; 0x54
   b8878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b887c:	3101      	adds	r1, #1
   b887e:	a808      	add	r0, sp, #32
   b8880:	f7ff ff9e 	bl	b87c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8884:	2800      	cmp	r0, #0
   b8886:	d1dd      	bne.n	b8844 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b8888:	a80f      	add	r0, sp, #60	; 0x3c
   b888a:	f002 fd5d 	bl	bb348 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b888e:	a80b      	add	r0, sp, #44	; 0x2c
   b8890:	f002 fd5a 	bl	bb348 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8894:	3514      	adds	r5, #20
   b8896:	e7c6      	b.n	b8826 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b8898:	a90f      	add	r1, sp, #60	; 0x3c
   b889a:	4630      	mov	r0, r6
   b889c:	f002 fdd0 	bl	bb440 <_ZN6StringC1EOS_>
   b88a0:	e7dc      	b.n	b885c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b88a2:	2600      	movs	r6, #0
   b88a4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b88a8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b88aa:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b88ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b88b2:	429e      	cmp	r6, r3
   b88b4:	da7c      	bge.n	b89b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b88b6:	0133      	lsls	r3, r6, #4
   b88b8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b88ba:	9306      	str	r3, [sp, #24]
        if (!category) {
   b88bc:	b90b      	cbnz	r3, b88c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b88be:	3601      	adds	r6, #1
   b88c0:	e7f5      	b.n	b88ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b88c2:	2300      	movs	r3, #0
   b88c4:	9307      	str	r3, [sp, #28]
   b88c6:	fb09 f306 	mul.w	r3, r9, r6
   b88ca:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b88cc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b88ce:	a907      	add	r1, sp, #28
   b88d0:	a806      	add	r0, sp, #24
   b88d2:	f7ff fb10 	bl	b7ef6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b88d6:	4682      	mov	sl, r0
   b88d8:	2800      	cmp	r0, #0
   b88da:	d0f0      	beq.n	b88be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b88dc:	f04f 0300 	mov.w	r3, #0
   b88e0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b88e4:	4601      	mov	r1, r0
   b88e6:	9a07      	ldr	r2, [sp, #28]
   b88e8:	f10d 0317 	add.w	r3, sp, #23
   b88ec:	4628      	mov	r0, r5
   b88ee:	f7ff fb9f 	bl	b8030 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b88f2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b88f6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b88f8:	2f00      	cmp	r7, #0
   b88fa:	d14a      	bne.n	b8992 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b88fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b8900:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8904:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8908:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b890c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b8910:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8914:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8916:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b891a:	4293      	cmp	r3, r2
   b891c:	db17      	blt.n	b894e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b891e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b8922:	f1ba 0f00 	cmp.w	sl, #0
   b8926:	dd30      	ble.n	b898a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8928:	fb09 f00a 	mul.w	r0, r9, sl
   b892c:	f7fe f9c0 	bl	b6cb0 <malloc>
            if (!d) {
   b8930:	4683      	mov	fp, r0
   b8932:	b360      	cbz	r0, b898e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8934:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8938:	fb09 1202 	mla	r2, r9, r2, r1
   b893c:	f7ff feea 	bl	b8714 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b8940:	6828      	ldr	r0, [r5, #0]
   b8942:	f7fe f9bd 	bl	b6cc0 <free>
        data_ = d;
   b8946:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b894a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b894e:	682b      	ldr	r3, [r5, #0]
   b8950:	9a01      	ldr	r2, [sp, #4]
   b8952:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b8956:	686a      	ldr	r2, [r5, #4]
   b8958:	4651      	mov	r1, sl
   b895a:	fb09 3202 	mla	r2, r9, r2, r3
   b895e:	f10a 0014 	add.w	r0, sl, #20
   b8962:	f7ff fed7 	bl	b8714 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b8966:	f1ba 0f00 	cmp.w	sl, #0
   b896a:	d003      	beq.n	b8974 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b896c:	a90f      	add	r1, sp, #60	; 0x3c
   b896e:	4650      	mov	r0, sl
   b8970:	f7ff fb4b 	bl	b800a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b8974:	686b      	ldr	r3, [r5, #4]
   b8976:	3301      	adds	r3, #1
   b8978:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b897a:	a811      	add	r0, sp, #68	; 0x44
   b897c:	f7ff fcca 	bl	b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8980:	b13f      	cbz	r7, b8992 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b8982:	a80b      	add	r0, sp, #44	; 0x2c
   b8984:	f7ff fcc6 	bl	b8314 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8988:	e771      	b.n	b886e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b898a:	46bb      	mov	fp, r7
   b898c:	e7d8      	b.n	b8940 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b898e:	2701      	movs	r7, #1
   b8990:	e7f3      	b.n	b897a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b8992:	9b01      	ldr	r3, [sp, #4]
   b8994:	682d      	ldr	r5, [r5, #0]
   b8996:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b899a:	9b06      	ldr	r3, [sp, #24]
   b899c:	781b      	ldrb	r3, [r3, #0]
   b899e:	b92b      	cbnz	r3, b89ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b89a0:	f8d8 3000 	ldr.w	r3, [r8]
   b89a4:	9a02      	ldr	r2, [sp, #8]
   b89a6:	4413      	add	r3, r2
   b89a8:	7c1b      	ldrb	r3, [r3, #16]
   b89aa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b89ac:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b89ae:	e78e      	b.n	b88ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89b0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b89b2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89b4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b89b6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89b8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b89ba:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b89bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b89be:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89c0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b89c2:	60a2      	str	r2, [r4, #8]
   b89c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b89c6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89c8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b89ca:	60e2      	str	r2, [r4, #12]
   b89cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b89ce:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89d0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b89d2:	6122      	str	r2, [r4, #16]
   b89d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b89d6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b89d8:	9b03      	ldr	r3, [sp, #12]
   b89da:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b89dc:	6162      	str	r2, [r4, #20]
   b89de:	7623      	strb	r3, [r4, #24]
   b89e0:	e7cf      	b.n	b8982 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b89e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b89e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b89e6:	4604      	mov	r4, r0
   b89e8:	b087      	sub	sp, #28
   b89ea:	460d      	mov	r5, r1
        filter_(level, filters) {
   b89ec:	4626      	mov	r6, r4
        stream_(&stream) {
   b89ee:	4619      	mov	r1, r3
   b89f0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b89f2:	4617      	mov	r7, r2
        stream_(&stream) {
   b89f4:	f7fc fb3b 	bl	b506e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b89f8:	4b0b      	ldr	r3, [pc, #44]	; (b8a28 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b89fa:	f846 3b04 	str.w	r3, [r6], #4
   b89fe:	4669      	mov	r1, sp
   b8a00:	a803      	add	r0, sp, #12
   b8a02:	f7fc fb34 	bl	b506e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8a06:	aa03      	add	r2, sp, #12
   b8a08:	4639      	mov	r1, r7
   b8a0a:	4630      	mov	r0, r6
   b8a0c:	f7ff fef0 	bl	b87f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8a10:	a803      	add	r0, sp, #12
   b8a12:	f7fc faeb 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8a16:	4668      	mov	r0, sp
   b8a18:	f7fc fae8 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8a1c:	4b03      	ldr	r3, [pc, #12]	; (b8a2c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b8a1e:	6023      	str	r3, [r4, #0]
}
   b8a20:	4620      	mov	r0, r4
        stream_(&stream) {
   b8a22:	6225      	str	r5, [r4, #32]
}
   b8a24:	b007      	add	sp, #28
   b8a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8a28:	000bca2c 	.word	0x000bca2c
   b8a2c:	000be094 	.word	0x000be094

000b8a30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a32:	460f      	mov	r7, r1
   b8a34:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8a36:	491d      	ldr	r1, [pc, #116]	; (b8aac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8a38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8a3a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8a3c:	4616      	mov	r6, r2
   b8a3e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8a40:	f003 fdfd 	bl	bc63e <strcmp>
   b8a44:	b9c0      	cbnz	r0, b8a78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b8a46:	b1a4      	cbz	r4, b8a72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8a48:	4629      	mov	r1, r5
   b8a4a:	a801      	add	r0, sp, #4
   b8a4c:	f7ff fcbc 	bl	b83c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8a50:	4917      	ldr	r1, [pc, #92]	; (b8ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8a52:	2024      	movs	r0, #36	; 0x24
   b8a54:	f002 ff74 	bl	bb940 <_ZnwjRKSt9nothrow_t>
   b8a58:	4605      	mov	r5, r0
   b8a5a:	b130      	cbz	r0, b8a6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8a5c:	ab01      	add	r3, sp, #4
   b8a5e:	4632      	mov	r2, r6
   b8a60:	4621      	mov	r1, r4
   b8a62:	f7ff ffbf 	bl	b89e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8a66:	4b13      	ldr	r3, [pc, #76]	; (b8ab4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8a68:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8a6a:	a801      	add	r0, sp, #4
   b8a6c:	f7fc fabe 	bl	b4fec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8a70:	462c      	mov	r4, r5
}
   b8a72:	4620      	mov	r0, r4
   b8a74:	b005      	add	sp, #20
   b8a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8a78:	490f      	ldr	r1, [pc, #60]	; (b8ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8a7a:	4638      	mov	r0, r7
   b8a7c:	f003 fddf 	bl	bc63e <strcmp>
   b8a80:	b990      	cbnz	r0, b8aa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b8a82:	2c00      	cmp	r4, #0
   b8a84:	d0f5      	beq.n	b8a72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8a86:	4629      	mov	r1, r5
   b8a88:	a801      	add	r0, sp, #4
   b8a8a:	f7ff fc9d 	bl	b83c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8a8e:	4908      	ldr	r1, [pc, #32]	; (b8ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8a90:	2024      	movs	r0, #36	; 0x24
   b8a92:	f002 ff55 	bl	bb940 <_ZnwjRKSt9nothrow_t>
   b8a96:	4605      	mov	r5, r0
   b8a98:	2800      	cmp	r0, #0
   b8a9a:	d0e6      	beq.n	b8a6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8a9c:	ab01      	add	r3, sp, #4
   b8a9e:	4632      	mov	r2, r6
   b8aa0:	4621      	mov	r1, r4
   b8aa2:	f7ff ff9f 	bl	b89e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8aa6:	e7e0      	b.n	b8a6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8aa8:	2400      	movs	r4, #0
   b8aaa:	e7e2      	b.n	b8a72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8aac:	000be01c 	.word	0x000be01c
   b8ab0:	000be3b0 	.word	0x000be3b0
   b8ab4:	000be0ac 	.word	0x000be0ac
   b8ab8:	000be020 	.word	0x000be020

000b8abc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b8abc:	4b01      	ldr	r3, [pc, #4]	; (b8ac4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8abe:	4a02      	ldr	r2, [pc, #8]	; (b8ac8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8ac0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8ac2:	4770      	bx	lr
   b8ac4:	2003e6d0 	.word	0x2003e6d0
   b8ac8:	000be031 	.word	0x000be031

000b8acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8ad0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8ad2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8ad6:	4604      	mov	r4, r0
   b8ad8:	460e      	mov	r6, r1
   b8ada:	4617      	mov	r7, r2
   b8adc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b8ade:	f7ff f839 	bl	b7b54 <_Z16_fetch_usbserialv>
   b8ae2:	4581      	cmp	r9, r0
   b8ae4:	d04c      	beq.n	b8b80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b8ae6:	792b      	ldrb	r3, [r5, #4]
   b8ae8:	0719      	lsls	r1, r3, #28
   b8aea:	d504      	bpl.n	b8af6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b8aec:	696a      	ldr	r2, [r5, #20]
   b8aee:	4954      	ldr	r1, [pc, #336]	; (b8c40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b8af0:	4620      	mov	r0, r4
   b8af2:	f7ff fa7b 	bl	b7fec <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b8af6:	f1b8 0f00 	cmp.w	r8, #0
   b8afa:	d00d      	beq.n	b8b18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b8afc:	215b      	movs	r1, #91	; 0x5b
   b8afe:	4620      	mov	r0, r4
   b8b00:	f7ff fa68 	bl	b7fd4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8b04:	4641      	mov	r1, r8
   b8b06:	4620      	mov	r0, r4
   b8b08:	f7ff fa55 	bl	b7fb6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b8b0c:	6823      	ldr	r3, [r4, #0]
   b8b0e:	494d      	ldr	r1, [pc, #308]	; (b8c44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8b10:	68db      	ldr	r3, [r3, #12]
   b8b12:	2202      	movs	r2, #2
   b8b14:	4620      	mov	r0, r4
   b8b16:	4798      	blx	r3
    if (attr.has_file) {
   b8b18:	792b      	ldrb	r3, [r5, #4]
   b8b1a:	07da      	lsls	r2, r3, #31
   b8b1c:	d523      	bpl.n	b8b66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8b1e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8b22:	212f      	movs	r1, #47	; 0x2f
   b8b24:	4640      	mov	r0, r8
   b8b26:	f003 fdc4 	bl	bc6b2 <strrchr>
    if (s1) {
   b8b2a:	b108      	cbz	r0, b8b30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8b2c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8b30:	4641      	mov	r1, r8
   b8b32:	4620      	mov	r0, r4
   b8b34:	f7ff fa3f 	bl	b7fb6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8b38:	792b      	ldrb	r3, [r5, #4]
   b8b3a:	079b      	lsls	r3, r3, #30
   b8b3c:	d508      	bpl.n	b8b50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8b3e:	213a      	movs	r1, #58	; 0x3a
   b8b40:	4620      	mov	r0, r4
   b8b42:	f7ff fa47 	bl	b7fd4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8b46:	68ea      	ldr	r2, [r5, #12]
   b8b48:	493f      	ldr	r1, [pc, #252]	; (b8c48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8b4a:	4620      	mov	r0, r4
   b8b4c:	f7ff fa4e 	bl	b7fec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8b50:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8b52:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8b54:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8b58:	68db      	ldr	r3, [r3, #12]
   b8b5a:	bf14      	ite	ne
   b8b5c:	493b      	ldrne	r1, [pc, #236]	; (b8c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8b5e:	493c      	ldreq	r1, [pc, #240]	; (b8c50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8b60:	2202      	movs	r2, #2
            write(": ", 2);
   b8b62:	4620      	mov	r0, r4
   b8b64:	4798      	blx	r3
    if (attr.has_function) {
   b8b66:	792b      	ldrb	r3, [r5, #4]
   b8b68:	0758      	lsls	r0, r3, #29
   b8b6a:	d51d      	bpl.n	b8ba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8b6c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8b6e:	460b      	mov	r3, r1
   b8b70:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8b72:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8b76:	b160      	cbz	r0, b8b92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8b78:	2820      	cmp	r0, #32
   b8b7a:	d108      	bne.n	b8b8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8b7c:	4619      	mov	r1, r3
   b8b7e:	e7f7      	b.n	b8b70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8b80:	4834      	ldr	r0, [pc, #208]	; (b8c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8b82:	f7fe fb00 	bl	b7186 <_ZN5spark12NetworkClass9listeningEv>
   b8b86:	2800      	cmp	r0, #0
   b8b88:	d0ad      	beq.n	b8ae6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8b8e:	2828      	cmp	r0, #40	; 0x28
   b8b90:	d1ee      	bne.n	b8b70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8b92:	6823      	ldr	r3, [r4, #0]
   b8b94:	1a52      	subs	r2, r2, r1
   b8b96:	68db      	ldr	r3, [r3, #12]
   b8b98:	4620      	mov	r0, r4
   b8b9a:	4798      	blx	r3
        write("(): ", 4);
   b8b9c:	6823      	ldr	r3, [r4, #0]
   b8b9e:	492e      	ldr	r1, [pc, #184]	; (b8c58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8ba0:	68db      	ldr	r3, [r3, #12]
   b8ba2:	2204      	movs	r2, #4
   b8ba4:	4620      	mov	r0, r4
   b8ba6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8ba8:	2100      	movs	r1, #0
   b8baa:	4638      	mov	r0, r7
   b8bac:	f7fd ffdc 	bl	b6b68 <log_level_name>
   b8bb0:	4601      	mov	r1, r0
    write(s);
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	f7ff f9ff 	bl	b7fb6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8bb8:	6823      	ldr	r3, [r4, #0]
   b8bba:	4925      	ldr	r1, [pc, #148]	; (b8c50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8bbc:	68db      	ldr	r3, [r3, #12]
   b8bbe:	2202      	movs	r2, #2
   b8bc0:	4620      	mov	r0, r4
   b8bc2:	4798      	blx	r3
    if (msg) {
   b8bc4:	b11e      	cbz	r6, b8bce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8bc6:	4631      	mov	r1, r6
   b8bc8:	4620      	mov	r0, r4
   b8bca:	f7ff f9f4 	bl	b7fb6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8bce:	792b      	ldrb	r3, [r5, #4]
   b8bd0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8bd4:	d02c      	beq.n	b8c30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8bd6:	6823      	ldr	r3, [r4, #0]
   b8bd8:	4920      	ldr	r1, [pc, #128]	; (b8c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b8bda:	68db      	ldr	r3, [r3, #12]
   b8bdc:	2202      	movs	r2, #2
   b8bde:	4620      	mov	r0, r4
   b8be0:	4798      	blx	r3
        if (attr.has_code) {
   b8be2:	792b      	ldrb	r3, [r5, #4]
   b8be4:	06d9      	lsls	r1, r3, #27
   b8be6:	d50a      	bpl.n	b8bfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8be8:	6823      	ldr	r3, [r4, #0]
   b8bea:	491d      	ldr	r1, [pc, #116]	; (b8c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b8bec:	68db      	ldr	r3, [r3, #12]
   b8bee:	2207      	movs	r2, #7
   b8bf0:	4620      	mov	r0, r4
   b8bf2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8bf4:	69aa      	ldr	r2, [r5, #24]
   b8bf6:	491b      	ldr	r1, [pc, #108]	; (b8c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8bf8:	4620      	mov	r0, r4
   b8bfa:	f7ff f9f7 	bl	b7fec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b8bfe:	792b      	ldrb	r3, [r5, #4]
   b8c00:	069a      	lsls	r2, r3, #26
   b8c02:	d511      	bpl.n	b8c28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8c04:	06db      	lsls	r3, r3, #27
   b8c06:	d505      	bpl.n	b8c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8c08:	6823      	ldr	r3, [r4, #0]
   b8c0a:	4910      	ldr	r1, [pc, #64]	; (b8c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b8c0c:	68db      	ldr	r3, [r3, #12]
   b8c0e:	2202      	movs	r2, #2
   b8c10:	4620      	mov	r0, r4
   b8c12:	4798      	blx	r3
            write("details = ", 10);
   b8c14:	6823      	ldr	r3, [r4, #0]
   b8c16:	4914      	ldr	r1, [pc, #80]	; (b8c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8c18:	68db      	ldr	r3, [r3, #12]
   b8c1a:	4620      	mov	r0, r4
   b8c1c:	220a      	movs	r2, #10
   b8c1e:	4798      	blx	r3
            write(attr.details);
   b8c20:	69e9      	ldr	r1, [r5, #28]
   b8c22:	4620      	mov	r0, r4
   b8c24:	f7ff f9c7 	bl	b7fb6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8c28:	215d      	movs	r1, #93	; 0x5d
   b8c2a:	4620      	mov	r0, r4
   b8c2c:	f7ff f9d2 	bl	b7fd4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8c30:	6823      	ldr	r3, [r4, #0]
   b8c32:	490e      	ldr	r1, [pc, #56]	; (b8c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8c34:	68db      	ldr	r3, [r3, #12]
   b8c36:	4620      	mov	r0, r4
   b8c38:	2202      	movs	r2, #2
}
   b8c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b8c3e:	4718      	bx	r3
   b8c40:	000be035 	.word	0x000be035
   b8c44:	000be03c 	.word	0x000be03c
   b8c48:	000bdedc 	.word	0x000bdedc
   b8c4c:	000bc915 	.word	0x000bc915
   b8c50:	000be041 	.word	0x000be041
   b8c54:	2003e680 	.word	0x2003e680
   b8c58:	000be03f 	.word	0x000be03f
   b8c5c:	000be044 	.word	0x000be044
   b8c60:	000be047 	.word	0x000be047
   b8c64:	000be04f 	.word	0x000be04f
   b8c68:	000be052 	.word	0x000be052
   b8c6c:	000be05d 	.word	0x000be05d

000b8c70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8c74:	b085      	sub	sp, #20
    return stream_;
   b8c76:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8c7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b8c7c:	4605      	mov	r5, r0
   b8c7e:	460f      	mov	r7, r1
   b8c80:	4690      	mov	r8, r2
   b8c82:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8c84:	f7fe ff66 	bl	b7b54 <_Z16_fetch_usbserialv>
   b8c88:	4581      	cmp	r9, r0
   b8c8a:	d105      	bne.n	b8c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b8c8c:	4849      	ldr	r0, [pc, #292]	; (b8db4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b8c8e:	f7fe fa7a 	bl	b7186 <_ZN5spark12NetworkClass9listeningEv>
   b8c92:	2800      	cmp	r0, #0
   b8c94:	f040 808a 	bne.w	b8dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b8c98:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b8c9a:	4a47      	ldr	r2, [pc, #284]	; (b8db8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b8c9c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b8c9e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8ca2:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8ca4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8ca6:	f88d 9008 	strb.w	r9, [sp, #8]
   b8caa:	f7fe f97e 	bl	b6faa <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b8cae:	4649      	mov	r1, r9
   b8cb0:	4640      	mov	r0, r8
   b8cb2:	f7fd ff59 	bl	b6b68 <log_level_name>
    json.name("l", 1).value(s);
   b8cb6:	4941      	ldr	r1, [pc, #260]	; (b8dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8cb8:	4680      	mov	r8, r0
   b8cba:	2201      	movs	r2, #1
   b8cbc:	a801      	add	r0, sp, #4
   b8cbe:	f7fe fa03 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8cc2:	4641      	mov	r1, r8
   b8cc4:	f7ff f969 	bl	b7f9a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8cc8:	b13f      	cbz	r7, b8cda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b8cca:	493d      	ldr	r1, [pc, #244]	; (b8dc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b8ccc:	2201      	movs	r2, #1
   b8cce:	a801      	add	r0, sp, #4
   b8cd0:	f7fe f9fa 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8cd4:	4639      	mov	r1, r7
   b8cd6:	f7ff f960 	bl	b7f9a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b8cda:	b13e      	cbz	r6, b8cec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b8cdc:	4939      	ldr	r1, [pc, #228]	; (b8dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8cde:	2201      	movs	r2, #1
   b8ce0:	a801      	add	r0, sp, #4
   b8ce2:	f7fe f9f1 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8ce6:	4631      	mov	r1, r6
   b8ce8:	f7ff f957 	bl	b7f9a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b8cec:	7923      	ldrb	r3, [r4, #4]
   b8cee:	07df      	lsls	r7, r3, #31
   b8cf0:	d50e      	bpl.n	b8d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8cf2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8cf4:	212f      	movs	r1, #47	; 0x2f
   b8cf6:	4630      	mov	r0, r6
   b8cf8:	f003 fcdb 	bl	bc6b2 <strrchr>
    if (s1) {
   b8cfc:	b100      	cbz	r0, b8d00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b8cfe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8d00:	4931      	ldr	r1, [pc, #196]	; (b8dc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8d02:	2201      	movs	r2, #1
   b8d04:	a801      	add	r0, sp, #4
   b8d06:	f7fe f9df 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d0a:	4631      	mov	r1, r6
   b8d0c:	f7ff f945 	bl	b7f9a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8d10:	7923      	ldrb	r3, [r4, #4]
   b8d12:	079e      	lsls	r6, r3, #30
   b8d14:	d507      	bpl.n	b8d26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8d16:	492d      	ldr	r1, [pc, #180]	; (b8dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8d18:	2202      	movs	r2, #2
   b8d1a:	a801      	add	r0, sp, #4
   b8d1c:	f7fe f9d4 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d20:	68e1      	ldr	r1, [r4, #12]
   b8d22:	f7fe f94f 	bl	b6fc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8d26:	7923      	ldrb	r3, [r4, #4]
   b8d28:	0758      	lsls	r0, r3, #29
   b8d2a:	d514      	bpl.n	b8d56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8d2c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8d2e:	4633      	mov	r3, r6
   b8d30:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8d32:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8d36:	b12a      	cbz	r2, b8d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8d38:	2a20      	cmp	r2, #32
   b8d3a:	d101      	bne.n	b8d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b8d3c:	461e      	mov	r6, r3
   b8d3e:	e7f7      	b.n	b8d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b8d40:	2a28      	cmp	r2, #40	; 0x28
   b8d42:	d1f5      	bne.n	b8d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b8d44:	4922      	ldr	r1, [pc, #136]	; (b8dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8d46:	2202      	movs	r2, #2
   b8d48:	a801      	add	r0, sp, #4
   b8d4a:	f7fe f9bd 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d4e:	1bba      	subs	r2, r7, r6
   b8d50:	4631      	mov	r1, r6
   b8d52:	f7fe f9c9 	bl	b70e8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8d56:	7923      	ldrb	r3, [r4, #4]
   b8d58:	0719      	lsls	r1, r3, #28
   b8d5a:	d507      	bpl.n	b8d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b8d5c:	491d      	ldr	r1, [pc, #116]	; (b8dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8d5e:	2201      	movs	r2, #1
   b8d60:	a801      	add	r0, sp, #4
   b8d62:	f7fe f9b1 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d66:	6961      	ldr	r1, [r4, #20]
   b8d68:	f7fe f93e 	bl	b6fe8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b8d6c:	7923      	ldrb	r3, [r4, #4]
   b8d6e:	06da      	lsls	r2, r3, #27
   b8d70:	d508      	bpl.n	b8d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8d72:	2204      	movs	r2, #4
   b8d74:	4918      	ldr	r1, [pc, #96]	; (b8dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8d76:	eb0d 0002 	add.w	r0, sp, r2
   b8d7a:	f7fe f9a5 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d7e:	69a1      	ldr	r1, [r4, #24]
   b8d80:	f7fe f920 	bl	b6fc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b8d84:	7923      	ldrb	r3, [r4, #4]
   b8d86:	069b      	lsls	r3, r3, #26
   b8d88:	d507      	bpl.n	b8d9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b8d8a:	4914      	ldr	r1, [pc, #80]	; (b8ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b8d8c:	2206      	movs	r2, #6
   b8d8e:	a801      	add	r0, sp, #4
   b8d90:	f7fe f99a 	bl	b70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d94:	69e1      	ldr	r1, [r4, #28]
   b8d96:	f7ff f900 	bl	b7f9a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b8d9a:	a801      	add	r0, sp, #4
   b8d9c:	f7fe f8ef 	bl	b6f7e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8da0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8da2:	490f      	ldr	r1, [pc, #60]	; (b8de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8da4:	6803      	ldr	r3, [r0, #0]
   b8da6:	2202      	movs	r2, #2
   b8da8:	68db      	ldr	r3, [r3, #12]
   b8daa:	4798      	blx	r3
}
   b8dac:	b005      	add	sp, #20
   b8dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8db2:	bf00      	nop
   b8db4:	2003e680 	.word	0x2003e680
   b8db8:	000be07c 	.word	0x000be07c
   b8dbc:	000be012 	.word	0x000be012
   b8dc0:	000bca1f 	.word	0x000bca1f
   b8dc4:	000be537 	.word	0x000be537
   b8dc8:	000be060 	.word	0x000be060
   b8dcc:	000be062 	.word	0x000be062
   b8dd0:	000be065 	.word	0x000be065
   b8dd4:	000bc9a1 	.word	0x000bc9a1
   b8dd8:	000be068 	.word	0x000be068
   b8ddc:	000be06d 	.word	0x000be06d
   b8de0:	000be05d 	.word	0x000be05d

000b8de4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8de6:	4606      	mov	r6, r0
   b8de8:	460d      	mov	r5, r1
  size_t n = 0;
   b8dea:	188f      	adds	r7, r1, r2
   b8dec:	2400      	movs	r4, #0
  while (size--) {
   b8dee:	42bd      	cmp	r5, r7
   b8df0:	d00c      	beq.n	b8e0c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8df2:	6833      	ldr	r3, [r6, #0]
   b8df4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8df8:	689b      	ldr	r3, [r3, #8]
   b8dfa:	4630      	mov	r0, r6
   b8dfc:	4798      	blx	r3
     if (chunk>=0)
   b8dfe:	1e03      	subs	r3, r0, #0
   b8e00:	db01      	blt.n	b8e06 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8e02:	441c      	add	r4, r3
  while (size--) {
   b8e04:	e7f3      	b.n	b8dee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8e06:	2c00      	cmp	r4, #0
   b8e08:	bf08      	it	eq
   b8e0a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8e0c:	4620      	mov	r0, r4
   b8e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8e10 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8e10:	b513      	push	{r0, r1, r4, lr}
   b8e12:	4604      	mov	r4, r0
    }
   b8e14:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8e16:	b159      	cbz	r1, b8e30 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8e18:	9101      	str	r1, [sp, #4]
   b8e1a:	f003 fc22 	bl	bc662 <strlen>
   b8e1e:	6823      	ldr	r3, [r4, #0]
   b8e20:	9901      	ldr	r1, [sp, #4]
   b8e22:	68db      	ldr	r3, [r3, #12]
   b8e24:	4602      	mov	r2, r0
   b8e26:	4620      	mov	r0, r4
    }
   b8e28:	b002      	add	sp, #8
   b8e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8e2e:	4718      	bx	r3
    }
   b8e30:	b002      	add	sp, #8
   b8e32:	bd10      	pop	{r4, pc}

000b8e34 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8e34:	b508      	push	{r3, lr}
  return write(str);
   b8e36:	f7ff ffeb 	bl	b8e10 <_ZN5Print5writeEPKc>
}
   b8e3a:	bd08      	pop	{r3, pc}

000b8e3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8e3c:	6803      	ldr	r3, [r0, #0]
   b8e3e:	689b      	ldr	r3, [r3, #8]
   b8e40:	4718      	bx	r3

000b8e42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8e42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8e44:	210d      	movs	r1, #13
{
   b8e46:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8e48:	f7ff fff8 	bl	b8e3c <_ZN5Print5printEc>
  n += print('\n');
   b8e4c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8e4e:	4604      	mov	r4, r0
  n += print('\n');
   b8e50:	4628      	mov	r0, r5
   b8e52:	f7ff fff3 	bl	b8e3c <_ZN5Print5printEc>
  return n;
}
   b8e56:	4420      	add	r0, r4
   b8e58:	bd38      	pop	{r3, r4, r5, pc}

000b8e5a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8e5a:	b538      	push	{r3, r4, r5, lr}
   b8e5c:	4605      	mov	r5, r0
  return write(str);
   b8e5e:	f7ff ffd7 	bl	b8e10 <_ZN5Print5writeEPKc>
   b8e62:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8e64:	4628      	mov	r0, r5
   b8e66:	f7ff ffec 	bl	b8e42 <_ZN5Print7printlnEv>
  return n;
}
   b8e6a:	4420      	add	r0, r4
   b8e6c:	bd38      	pop	{r3, r4, r5, pc}

000b8e6e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8e6e:	b530      	push	{r4, r5, lr}
   b8e70:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8e72:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8e74:	2a01      	cmp	r2, #1
  *str = '\0';
   b8e76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8e7a:	bf98      	it	ls
   b8e7c:	220a      	movls	r2, #10
   b8e7e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8e80:	460d      	mov	r5, r1
   b8e82:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8e86:	fb01 5312 	mls	r3, r1, r2, r5
   b8e8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8e8e:	2b09      	cmp	r3, #9
   b8e90:	bf94      	ite	ls
   b8e92:	3330      	addls	r3, #48	; 0x30
   b8e94:	3337      	addhi	r3, #55	; 0x37
   b8e96:	b2db      	uxtb	r3, r3
  } while(n);
   b8e98:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8e9a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8e9e:	d9ef      	bls.n	b8e80 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8ea0:	4621      	mov	r1, r4
   b8ea2:	f7ff ffb5 	bl	b8e10 <_ZN5Print5writeEPKc>
}
   b8ea6:	b00b      	add	sp, #44	; 0x2c
   b8ea8:	bd30      	pop	{r4, r5, pc}

000b8eaa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8eae:	b086      	sub	sp, #24
   b8eb0:	af00      	add	r7, sp, #0
   b8eb2:	4605      	mov	r5, r0
   b8eb4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8eb6:	1d38      	adds	r0, r7, #4
   b8eb8:	2114      	movs	r1, #20
{
   b8eba:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8ebc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8ebe:	f7fd ff0f 	bl	b6ce0 <vsnprintf>

    if (n<bufsize)
   b8ec2:	2813      	cmp	r0, #19
   b8ec4:	d80e      	bhi.n	b8ee4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8ec6:	1d39      	adds	r1, r7, #4
   b8ec8:	4628      	mov	r0, r5
   b8eca:	f7ff ffa1 	bl	b8e10 <_ZN5Print5writeEPKc>
   b8ece:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8ed0:	b11e      	cbz	r6, b8eda <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8ed2:	4628      	mov	r0, r5
   b8ed4:	f7ff ffb5 	bl	b8e42 <_ZN5Print7printlnEv>
   b8ed8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8eda:	4620      	mov	r0, r4
   b8edc:	3718      	adds	r7, #24
   b8ede:	46bd      	mov	sp, r7
   b8ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8ee4:	f100 0308 	add.w	r3, r0, #8
   b8ee8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8eec:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8eee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8ef2:	4622      	mov	r2, r4
   b8ef4:	1c41      	adds	r1, r0, #1
   b8ef6:	683b      	ldr	r3, [r7, #0]
   b8ef8:	4668      	mov	r0, sp
   b8efa:	f7fd fef1 	bl	b6ce0 <vsnprintf>
  return write(str);
   b8efe:	4669      	mov	r1, sp
   b8f00:	4628      	mov	r0, r5
   b8f02:	f7ff ff85 	bl	b8e10 <_ZN5Print5writeEPKc>
   b8f06:	4604      	mov	r4, r0
   b8f08:	46c5      	mov	sp, r8
   b8f0a:	e7e1      	b.n	b8ed0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8f0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f0c:	4770      	bx	lr

000b8f0e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8f0e:	4770      	bx	lr

000b8f10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8f10:	4770      	bx	lr

000b8f12 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f12:	4770      	bx	lr

000b8f14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f14:	4b06      	ldr	r3, [pc, #24]	; (b8f30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f16:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8f18:	b510      	push	{r4, lr}
   b8f1a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8f1e:	d005      	beq.n	b8f2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8f20:	4608      	mov	r0, r1
   b8f22:	f002 fd15 	bl	bb950 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8f26:	2800      	cmp	r0, #0
   b8f28:	bf08      	it	eq
   b8f2a:	2400      	moveq	r4, #0
      }
   b8f2c:	4620      	mov	r0, r4
   b8f2e:	bd10      	pop	{r4, pc}
   b8f30:	000bdefc 	.word	0x000bdefc

000b8f34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f34:	4b06      	ldr	r3, [pc, #24]	; (b8f50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8f38:	b510      	push	{r4, lr}
   b8f3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8f3e:	d005      	beq.n	b8f4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8f40:	4608      	mov	r0, r1
   b8f42:	f002 fd05 	bl	bb950 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8f46:	2800      	cmp	r0, #0
   b8f48:	bf08      	it	eq
   b8f4a:	2400      	moveq	r4, #0
      }
   b8f4c:	4620      	mov	r0, r4
   b8f4e:	bd10      	pop	{r4, pc}
   b8f50:	000bdefc 	.word	0x000bdefc

000b8f54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f54:	4b06      	ldr	r3, [pc, #24]	; (b8f70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f56:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8f58:	b510      	push	{r4, lr}
   b8f5a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8f5e:	d005      	beq.n	b8f6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8f60:	4608      	mov	r0, r1
   b8f62:	f002 fcf5 	bl	bb950 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8f66:	2800      	cmp	r0, #0
   b8f68:	bf08      	it	eq
   b8f6a:	2400      	moveq	r4, #0
      }
   b8f6c:	4620      	mov	r0, r4
   b8f6e:	bd10      	pop	{r4, pc}
   b8f70:	000bdefc 	.word	0x000bdefc

000b8f74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f74:	b510      	push	{r4, lr}
   b8f76:	2168      	movs	r1, #104	; 0x68
   b8f78:	4604      	mov	r4, r0
   b8f7a:	f7fb f892 	bl	b40a2 <_ZdlPvj>
   b8f7e:	4620      	mov	r0, r4
   b8f80:	bd10      	pop	{r4, pc}

000b8f82 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8f82:	b510      	push	{r4, lr}
   b8f84:	2128      	movs	r1, #40	; 0x28
   b8f86:	4604      	mov	r4, r0
   b8f88:	f7fb f88b 	bl	b40a2 <_ZdlPvj>
   b8f8c:	4620      	mov	r0, r4
   b8f8e:	bd10      	pop	{r4, pc}

000b8f90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8f90:	b510      	push	{r4, lr}
   b8f92:	2130      	movs	r1, #48	; 0x30
   b8f94:	4604      	mov	r4, r0
   b8f96:	f7fb f884 	bl	b40a2 <_ZdlPvj>
   b8f9a:	4620      	mov	r0, r4
   b8f9c:	bd10      	pop	{r4, pc}

000b8f9e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8f9e:	2168      	movs	r1, #104	; 0x68
   b8fa0:	f7fb b87f 	b.w	b40a2 <_ZdlPvj>

000b8fa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8fa4:	2128      	movs	r1, #40	; 0x28
   b8fa6:	f7fb b87c 	b.w	b40a2 <_ZdlPvj>

000b8faa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8faa:	2130      	movs	r1, #48	; 0x30
   b8fac:	f7fb b879 	b.w	b40a2 <_ZdlPvj>

000b8fb0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8fb2:	2500      	movs	r5, #0
   b8fb4:	1cec      	adds	r4, r5, #3
   b8fb6:	428c      	cmp	r4, r1
   b8fb8:	d80d      	bhi.n	b8fd6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b8fba:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b8fbc:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b8fbe:	5d87      	ldrb	r7, [r0, r6]
   b8fc0:	4297      	cmp	r7, r2
   b8fc2:	d105      	bne.n	b8fd0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b8fc4:	4426      	add	r6, r4
   b8fc6:	42b1      	cmp	r1, r6
   b8fc8:	d305      	bcc.n	b8fd6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b8fca:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b8fcc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b8fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b8fd0:	3401      	adds	r4, #1
   b8fd2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8fd4:	e7ee      	b.n	b8fb4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b8fd6:	2000      	movs	r0, #0
   b8fd8:	e7f9      	b.n	b8fce <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b8fdc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b8fdc:	4a02      	ldr	r2, [pc, #8]	; (b8fe8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b8fde:	4903      	ldr	r1, [pc, #12]	; (b8fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b8fe0:	200a      	movs	r0, #10
   b8fe2:	f7fd bda9 	b.w	b6b38 <panic_>
   b8fe6:	bf00      	nop
   b8fe8:	000b6a99 	.word	0x000b6a99
   b8fec:	000be0ec 	.word	0x000be0ec

000b8ff0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8ff0:	b430      	push	{r4, r5}
   b8ff2:	460d      	mov	r5, r1
   b8ff4:	4611      	mov	r1, r2
   b8ff6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8ff8:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8ffa:	6809      	ldr	r1, [r1, #0]
   b8ffc:	6828      	ldr	r0, [r5, #0]
   b8ffe:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9002:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b9004:	bc30      	pop	{r4, r5}
   b9006:	4760      	bx	ip

000b9008 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9008:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b900a:	b538      	push	{r3, r4, r5, lr}
   b900c:	4604      	mov	r4, r0
	switch (__op)
   b900e:	d102      	bne.n	b9016 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9010:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9012:	6023      	str	r3, [r4, #0]
	}
   b9014:	e003      	b.n	b901e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b9016:	2a02      	cmp	r2, #2
   b9018:	d003      	beq.n	b9022 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b901a:	2a03      	cmp	r2, #3
   b901c:	d00d      	beq.n	b903a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b901e:	2000      	movs	r0, #0
   b9020:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9022:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9024:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9026:	f7fb f836 	bl	b4096 <_Znwj>
   b902a:	4603      	mov	r3, r0
   b902c:	2800      	cmp	r0, #0
   b902e:	d0f0      	beq.n	b9012 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9030:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9034:	e883 0003 	stmia.w	r3, {r0, r1}
   b9038:	e7eb      	b.n	b9012 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b903a:	6800      	ldr	r0, [r0, #0]
   b903c:	2800      	cmp	r0, #0
   b903e:	d0ee      	beq.n	b901e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9040:	2108      	movs	r1, #8
   b9042:	f7fb f82e 	bl	b40a2 <_ZdlPvj>
   b9046:	e7ea      	b.n	b901e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b9048 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b9048:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b904a:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b904c:	4604      	mov	r4, r0
	if (_M_manager)
   b904e:	b12b      	cbz	r3, b905c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9050:	2203      	movs	r2, #3
   b9052:	4601      	mov	r1, r0
   b9054:	4798      	blx	r3
	    _M_manager = nullptr;
   b9056:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9058:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b905c:	bd10      	pop	{r4, pc}

000b905e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b905e:	b510      	push	{r4, lr}
	if (_M_manager)
   b9060:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9062:	4604      	mov	r4, r0
	if (_M_manager)
   b9064:	b12b      	cbz	r3, b9072 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9066:	2203      	movs	r2, #3
   b9068:	4601      	mov	r1, r0
   b906a:	4798      	blx	r3
	    _M_manager = nullptr;
   b906c:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b906e:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9072:	bd10      	pop	{r4, pc}

000b9074 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b9074:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b9076:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b9078:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b907a:	2220      	movs	r2, #32
   b907c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b9080:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b9082:	4a08      	ldr	r2, [pc, #32]	; (b90a4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b9084:	9200      	str	r2, [sp, #0]
   b9086:	4908      	ldr	r1, [pc, #32]	; (b90a8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b9088:	aa02      	add	r2, sp, #8
   b908a:	2001      	movs	r0, #1
   b908c:	f7fd fd5c 	bl	b6b48 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9090:	6820      	ldr	r0, [r4, #0]
   b9092:	4906      	ldr	r1, [pc, #24]	; (b90ac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b9094:	8800      	ldrh	r0, [r0, #0]
   b9096:	2300      	movs	r3, #0
   b9098:	4622      	mov	r2, r4
    }
   b909a:	b00a      	add	sp, #40	; 0x28
   b909c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b90a0:	f7fd bcb6 	b.w	b6a10 <hal_ble_gatt_client_discover_all_services>
   b90a4:	000be10e 	.word	0x000be10e
   b90a8:	000be103 	.word	0x000be103
   b90ac:	000ba925 	.word	0x000ba925

000b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b90b0:	b510      	push	{r4, lr}
   b90b2:	3801      	subs	r0, #1
   b90b4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b90b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b90bc:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b90be:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b90c2:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b90c4:	bf88      	it	hi
   b90c6:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b90ca:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b90ce:	7803      	ldrb	r3, [r0, #0]
   b90d0:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b90d4:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b90d8:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b90da:	bf88      	it	hi
   b90dc:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b90e0:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b90e2:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b90e6:	d1e7      	bne.n	b90b8 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b90e8:	bd10      	pop	{r4, pc}

000b90ea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b90ea:	b510      	push	{r4, lr}
   b90ec:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b90ee:	3058      	adds	r0, #88	; 0x58
   b90f0:	f7fe fde4 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b90f4:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b90f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b90fc:	f002 b924 	b.w	bb348 <_ZN6StringD1Ev>

000b9100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b9100:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b9102:	6803      	ldr	r3, [r0, #0]
   b9104:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b9106:	4605      	mov	r5, r0
   b9108:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b910a:	d008      	beq.n	b911e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b910c:	b111      	cbz	r1, b9114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b910e:	684b      	ldr	r3, [r1, #4]
   b9110:	3301      	adds	r3, #1
   b9112:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b9114:	6828      	ldr	r0, [r5, #0]
   b9116:	b108      	cbz	r0, b911c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b9118:	f7fd fe59 	bl	b6dce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b911c:	602c      	str	r4, [r5, #0]
      }
   b911e:	bd38      	pop	{r3, r4, r5, pc}

000b9120 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9124:	b2da      	uxtb	r2, r3
   b9126:	2a09      	cmp	r2, #9
   b9128:	d801      	bhi.n	b912e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b912a:	4618      	mov	r0, r3
   b912c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b912e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9132:	2b05      	cmp	r3, #5
   b9134:	d801      	bhi.n	b913a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9136:	3857      	subs	r0, #87	; 0x57
   b9138:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b913a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b913e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9140:	bf94      	ite	ls
   b9142:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9144:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b9148:	4770      	bx	lr
	...

000b914c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b914c:	b510      	push	{r4, lr}
            locked_(false) {
   b914e:	2300      	movs	r3, #0
   b9150:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b9152:	4b04      	ldr	r3, [pc, #16]	; (b9164 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9154:	4604      	mov	r4, r0
   b9156:	6818      	ldr	r0, [r3, #0]
   b9158:	f7fd fc26 	bl	b69a8 <os_mutex_recursive_lock>
        locked_ = true;
   b915c:	2301      	movs	r3, #1
   b915e:	7023      	strb	r3, [r4, #0]
    }
   b9160:	4620      	mov	r0, r4
   b9162:	bd10      	pop	{r4, pc}
   b9164:	2003e700 	.word	0x2003e700

000b9168 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9168:	b510      	push	{r4, lr}
        if (locked_) {
   b916a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b916c:	4604      	mov	r4, r0
        if (locked_) {
   b916e:	b11b      	cbz	r3, b9178 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9170:	4b02      	ldr	r3, [pc, #8]	; (b917c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9172:	6818      	ldr	r0, [r3, #0]
   b9174:	f7fd fc20 	bl	b69b8 <os_mutex_recursive_unlock>
    }
   b9178:	4620      	mov	r0, r4
   b917a:	bd10      	pop	{r4, pc}
   b917c:	2003e700 	.word	0x2003e700

000b9180 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9180:	b082      	sub	sp, #8
   b9182:	4603      	mov	r3, r0
    address_ = addr;
   b9184:	6808      	ldr	r0, [r1, #0]
   b9186:	6849      	ldr	r1, [r1, #4]
   b9188:	466a      	mov	r2, sp
   b918a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b918c:	466a      	mov	r2, sp
   b918e:	ca03      	ldmia	r2!, {r0, r1}
   b9190:	6018      	str	r0, [r3, #0]
}
   b9192:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9194:	6059      	str	r1, [r3, #4]
}
   b9196:	b002      	add	sp, #8
   b9198:	4770      	bx	lr

000b919a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b919a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b919c:	7982      	ldrb	r2, [r0, #6]
   b919e:	798b      	ldrb	r3, [r1, #6]
   b91a0:	429a      	cmp	r2, r3
   b91a2:	d106      	bne.n	b91b2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b91a4:	2206      	movs	r2, #6
   b91a6:	f003 f9c5 	bl	bc534 <memcmp>
   b91aa:	fab0 f080 	clz	r0, r0
   b91ae:	0940      	lsrs	r0, r0, #5
}
   b91b0:	bd08      	pop	{r3, pc}
    return false;
   b91b2:	2000      	movs	r0, #0
   b91b4:	e7fc      	b.n	b91b0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b91b6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b91b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b91ba:	6003      	str	r3, [r0, #0]
   b91bc:	8083      	strh	r3, [r0, #4]
}
   b91be:	2000      	movs	r0, #0
   b91c0:	4770      	bx	lr

000b91c2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b91c2:	b508      	push	{r3, lr}
   b91c4:	4602      	mov	r2, r0
        : address_{} {
   b91c6:	2100      	movs	r1, #0
   b91c8:	6001      	str	r1, [r0, #0]
   b91ca:	6041      	str	r1, [r0, #4]
    clear();
   b91cc:	f7ff fff3 	bl	b91b6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b91d0:	7191      	strb	r1, [r2, #6]
}
   b91d2:	4610      	mov	r0, r2
   b91d4:	bd08      	pop	{r3, pc}
	...

000b91d8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b91d8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b91da:	2301      	movs	r3, #1
   b91dc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b91de:	4b05      	ldr	r3, [pc, #20]	; (b91f4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b91e0:	4602      	mov	r2, r0
   b91e2:	f103 0110 	add.w	r1, r3, #16
   b91e6:	f853 4b04 	ldr.w	r4, [r3], #4
   b91ea:	f842 4b04 	str.w	r4, [r2], #4
   b91ee:	428b      	cmp	r3, r1
   b91f0:	d1f9      	bne.n	b91e6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b91f2:	bd10      	pop	{r4, pc}
   b91f4:	000be362 	.word	0x000be362

000b91f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b91f8:	7c0b      	ldrb	r3, [r1, #16]
   b91fa:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b91fe:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9200:	d10d      	bne.n	b921e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b9202:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9204:	4b0c      	ldr	r3, [pc, #48]	; (b9238 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b9206:	4602      	mov	r2, r0
   b9208:	f103 0410 	add.w	r4, r3, #16
   b920c:	f853 5b04 	ldr.w	r5, [r3], #4
   b9210:	f842 5b04 	str.w	r5, [r2], #4
   b9214:	42a3      	cmp	r3, r4
   b9216:	d1f9      	bne.n	b920c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b9218:	880b      	ldrh	r3, [r1, #0]
   b921a:	8183      	strh	r3, [r0, #12]
}
   b921c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b921e:	2301      	movs	r3, #1
   b9220:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9222:	f101 0210 	add.w	r2, r1, #16
   b9226:	4603      	mov	r3, r0
   b9228:	f851 4b04 	ldr.w	r4, [r1], #4
   b922c:	f843 4b04 	str.w	r4, [r3], #4
   b9230:	4291      	cmp	r1, r2
   b9232:	d1f9      	bne.n	b9228 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b9234:	e7f2      	b.n	b921c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b9236:	bf00      	nop
   b9238:	000be362 	.word	0x000be362

000b923c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b923c:	b510      	push	{r4, lr}
    if (uuid128) {
   b923e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9240:	4604      	mov	r4, r0
    if (uuid128) {
   b9242:	b1b1      	cbz	r1, b9272 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9244:	2a01      	cmp	r2, #1
   b9246:	f101 0210 	add.w	r2, r1, #16
   b924a:	d10a      	bne.n	b9262 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b924c:	4601      	mov	r1, r0
   b924e:	f853 0b04 	ldr.w	r0, [r3], #4
   b9252:	f841 0b04 	str.w	r0, [r1], #4
   b9256:	4293      	cmp	r3, r2
   b9258:	d1f9      	bne.n	b924e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b925a:	2301      	movs	r3, #1
   b925c:	6123      	str	r3, [r4, #16]
}
   b925e:	4620      	mov	r0, r4
   b9260:	bd10      	pop	{r4, pc}
   b9262:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9264:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9268:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b926c:	429a      	cmp	r2, r3
   b926e:	d1f9      	bne.n	b9264 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9270:	e7f3      	b.n	b925a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9272:	2210      	movs	r2, #16
   b9274:	f003 f996 	bl	bc5a4 <memset>
   b9278:	e7f1      	b.n	b925e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b927a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b927a:	b538      	push	{r3, r4, r5, lr}
   b927c:	4604      	mov	r4, r0
   b927e:	460d      	mov	r5, r1
        : BleUuid() {
   b9280:	f7ff ffaa 	bl	b91d8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b9284:	2300      	movs	r3, #0
   b9286:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9288:	81a5      	strh	r5, [r4, #12]
}
   b928a:	4620      	mov	r0, r4
   b928c:	bd38      	pop	{r3, r4, r5, pc}

000b928e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b928e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9290:	6902      	ldr	r2, [r0, #16]
   b9292:	690b      	ldr	r3, [r1, #16]
   b9294:	429a      	cmp	r2, r3
   b9296:	d106      	bne.n	b92a6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9298:	2210      	movs	r2, #16
   b929a:	f003 f94b 	bl	bc534 <memcmp>
   b929e:	fab0 f080 	clz	r0, r0
   b92a2:	0940      	lsrs	r0, r0, #5
}
   b92a4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b92a6:	2000      	movs	r0, #0
   b92a8:	e7fc      	b.n	b92a4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b92ac <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b92ac:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b92ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b92b2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b92b4:	4b34      	ldr	r3, [pc, #208]	; (b9388 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b92b6:	460c      	mov	r4, r1
   b92b8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b92ba:	4602      	mov	r2, r0
   b92bc:	f103 0110 	add.w	r1, r3, #16
   b92c0:	f853 0b04 	ldr.w	r0, [r3], #4
   b92c4:	f842 0b04 	str.w	r0, [r2], #4
   b92c8:	428b      	cmp	r3, r1
   b92ca:	d1f9      	bne.n	b92c0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b92cc:	b344      	cbz	r4, b9320 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b92ce:	2124      	movs	r1, #36	; 0x24
   b92d0:	4620      	mov	r0, r4
   b92d2:	f003 f9e2 	bl	bc69a <strnlen>
   b92d6:	2804      	cmp	r0, #4
   b92d8:	f04f 0500 	mov.w	r5, #0
   b92dc:	d123      	bne.n	b9326 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b92de:	f8ad 5004 	strh.w	r5, [sp, #4]
   b92e2:	af01      	add	r7, sp, #4
   b92e4:	1ca5      	adds	r5, r4, #2
   b92e6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b92e8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b92ec:	f7ff ff18 	bl	b9120 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b92f0:	f1b0 0800 	subs.w	r8, r0, #0
   b92f4:	db12      	blt.n	b931c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b92f6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b92fa:	f7ff ff11 	bl	b9120 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b92fe:	2800      	cmp	r0, #0
   b9300:	db0c      	blt.n	b931c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9302:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9304:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9308:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b930a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b930e:	d1eb      	bne.n	b92e8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9310:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9314:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9316:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b931a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b931c:	2300      	movs	r3, #0
   b931e:	6133      	str	r3, [r6, #16]
}
   b9320:	b002      	add	sp, #8
   b9322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9326:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b932a:	2124      	movs	r1, #36	; 0x24
   b932c:	4620      	mov	r0, r4
   b932e:	f003 f9b4 	bl	bc69a <strnlen>
   b9332:	42a8      	cmp	r0, r5
   b9334:	d807      	bhi.n	b9346 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9336:	4642      	mov	r2, r8
   b9338:	2100      	movs	r1, #0
   b933a:	4630      	mov	r0, r6
}
   b933c:	b002      	add	sp, #8
   b933e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9342:	f003 b92f 	b.w	bc5a4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9346:	f1b8 0f00 	cmp.w	r8, #0
   b934a:	d0e9      	beq.n	b9320 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b934c:	5d60      	ldrb	r0, [r4, r5]
   b934e:	f7ff fee7 	bl	b9120 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9352:	0603      	lsls	r3, r0, #24
   b9354:	d415      	bmi.n	b9382 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9356:	0100      	lsls	r0, r0, #4
   b9358:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b935c:	b2c7      	uxtb	r7, r0
   b935e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9362:	2124      	movs	r1, #36	; 0x24
   b9364:	4620      	mov	r0, r4
   b9366:	f003 f998 	bl	bc69a <strnlen>
   b936a:	3501      	adds	r5, #1
   b936c:	42a8      	cmp	r0, r5
   b936e:	d908      	bls.n	b9382 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9370:	5d60      	ldrb	r0, [r4, r5]
   b9372:	f7ff fed5 	bl	b9120 <_ZN8particle11hexToNibbleEc>
   b9376:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9378:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b937a:	bfa4      	itt	ge
   b937c:	4338      	orrge	r0, r7
   b937e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9382:	3501      	adds	r5, #1
   b9384:	e7d1      	b.n	b932a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9386:	bf00      	nop
   b9388:	000be362 	.word	0x000be362

000b938c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b938c:	b513      	push	{r0, r1, r4, lr}
   b938e:	4604      	mov	r4, r0
   b9390:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9392:	f7ff ff21 	bl	b91d8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9396:	4620      	mov	r0, r4
   b9398:	9901      	ldr	r1, [sp, #4]
   b939a:	f7ff ff87 	bl	b92ac <_ZN8particle7BleUuid9constructEPKc>
}
   b939e:	4620      	mov	r0, r4
   b93a0:	b002      	add	sp, #8
   b93a2:	bd10      	pop	{r4, pc}

000b93a4 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b93a4:	b510      	push	{r4, lr}
   b93a6:	f100 030f 	add.w	r3, r0, #15
   b93aa:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b93ac:	781c      	ldrb	r4, [r3, #0]
   b93ae:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b93b2:	4283      	cmp	r3, r0
   b93b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b93b8:	d1f8      	bne.n	b93ac <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b93ba:	bd10      	pop	{r4, pc}

000b93bc <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b93bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b93c0:	461f      	mov	r7, r3
   b93c2:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b93c4:	460d      	mov	r5, r1
   b93c6:	2900      	cmp	r1, #0
   b93c8:	d05b      	beq.n	b9482 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b93ca:	b1da      	cbz	r2, b9404 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b93cc:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b93d0:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b93d2:	f1b8 0f00 	cmp.w	r8, #0
   b93d6:	d119      	bne.n	b940c <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b93d8:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b93da:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b93de:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b93e0:	aa05      	add	r2, sp, #20
   b93e2:	2102      	movs	r1, #2
   b93e4:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b93e6:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b93ea:	f7ff fe61 	bl	b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b93ee:	2c04      	cmp	r4, #4
   b93f0:	bf28      	it	cs
   b93f2:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b93f4:	4622      	mov	r2, r4
   b93f6:	a905      	add	r1, sp, #20
   b93f8:	4628      	mov	r0, r5
   b93fa:	f003 f8ab 	bl	bc554 <memcpy>
        buf[len++] = '\0';
   b93fe:	f805 8004 	strb.w	r8, [r5, r4]
   b9402:	1c62      	adds	r2, r4, #1
}
   b9404:	4610      	mov	r0, r2
   b9406:	b00e      	add	sp, #56	; 0x38
   b9408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b940c:	a901      	add	r1, sp, #4
   b940e:	f7ff ffc9 	bl	b93a4 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9412:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9414:	b17f      	cbz	r7, b9436 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9416:	2110      	movs	r1, #16
   b9418:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b941a:	f7ff fe49 	bl	b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b941e:	2c24      	cmp	r4, #36	; 0x24
   b9420:	bf28      	it	cs
   b9422:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9424:	4622      	mov	r2, r4
   b9426:	a905      	add	r1, sp, #20
   b9428:	4628      	mov	r0, r5
   b942a:	f003 f893 	bl	bc554 <memcpy>
    buf[len++] = '\0';
   b942e:	2300      	movs	r3, #0
   b9430:	552b      	strb	r3, [r5, r4]
   b9432:	1c62      	adds	r2, r4, #1
    return len;
   b9434:	e7e6      	b.n	b9404 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b9436:	2104      	movs	r1, #4
   b9438:	eb0d 0001 	add.w	r0, sp, r1
   b943c:	f7ff fe38 	bl	b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9440:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9442:	f10d 021d 	add.w	r2, sp, #29
   b9446:	2102      	movs	r1, #2
   b9448:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b944a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b944e:	f7ff fe2f 	bl	b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9452:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b9456:	2102      	movs	r1, #2
   b9458:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b945c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9460:	f7ff fe26 	bl	b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9464:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b9468:	2102      	movs	r1, #2
   b946a:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b946c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9470:	f7ff fe1e 	bl	b90b0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b9474:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9478:	aa0b      	add	r2, sp, #44	; 0x2c
   b947a:	2106      	movs	r1, #6
   b947c:	f10d 000e 	add.w	r0, sp, #14
   b9480:	e7cb      	b.n	b941a <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b9482:	460a      	mov	r2, r1
   b9484:	e7be      	b.n	b9404 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b9486 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b9486:	b510      	push	{r4, lr}
   b9488:	b08a      	sub	sp, #40	; 0x28
   b948a:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b948c:	2300      	movs	r3, #0
   b948e:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b9490:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b9492:	4669      	mov	r1, sp
   b9494:	f7ff ff92 	bl	b93bc <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b9498:	4669      	mov	r1, sp
   b949a:	4620      	mov	r0, r4
   b949c:	f001 ff9f 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
}
   b94a0:	4620      	mov	r0, r4
   b94a2:	b00a      	add	sp, #40	; 0x28
   b94a4:	bd10      	pop	{r4, pc}

000b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b94a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b94a8:	4605      	mov	r5, r0
   b94aa:	4616      	mov	r6, r2
   b94ac:	461f      	mov	r7, r3
   b94ae:	460a      	mov	r2, r1
   b94b0:	ab01      	add	r3, sp, #4
   b94b2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b94b6:	f7ff fd7b 	bl	b8fb0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b94ba:	f030 0402 	bics.w	r4, r0, #2
   b94be:	d00c      	beq.n	b94da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b94c0:	1e84      	subs	r4, r0, #2
   b94c2:	42bc      	cmp	r4, r7
   b94c4:	bf28      	it	cs
   b94c6:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b94c8:	b13e      	cbz	r6, b94da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b94ca:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b94cc:	682b      	ldr	r3, [r5, #0]
   b94ce:	3102      	adds	r1, #2
   b94d0:	4622      	mov	r2, r4
   b94d2:	4419      	add	r1, r3
   b94d4:	4630      	mov	r0, r6
   b94d6:	f003 f83d 	bl	bc554 <memcpy>
}
   b94da:	4620      	mov	r0, r4
   b94dc:	b003      	add	sp, #12
   b94de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b94e0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b94e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b94e2:	4613      	mov	r3, r2
   b94e4:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b94e6:	9201      	str	r2, [sp, #4]
   b94e8:	460a      	mov	r2, r1
   b94ea:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b94ec:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b94ee:	f7ff ffda 	bl	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b94f2:	b940      	cbnz	r0, b9506 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b94f4:	9b01      	ldr	r3, [sp, #4]
   b94f6:	4622      	mov	r2, r4
   b94f8:	2109      	movs	r1, #9
   b94fa:	4628      	mov	r0, r5
}
   b94fc:	b003      	add	sp, #12
   b94fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9502:	f7ff bfd0 	b.w	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b9506:	b003      	add	sp, #12
   b9508:	bd30      	pop	{r4, r5, pc}
	...

000b950c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b950c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b950e:	460c      	mov	r4, r1
   b9510:	b089      	sub	sp, #36	; 0x24
    String name;
   b9512:	490c      	ldr	r1, [pc, #48]	; (b9544 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b9514:	4605      	mov	r5, r0
    String name;
   b9516:	f001 ff62 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b951a:	221f      	movs	r2, #31
   b951c:	4669      	mov	r1, sp
   b951e:	4620      	mov	r0, r4
   b9520:	f7ff ffde 	bl	b94e0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b9524:	4606      	mov	r6, r0
   b9526:	b150      	cbz	r0, b953e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b9528:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b952a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b952c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9530:	4628      	mov	r0, r5
   b9532:	f001 ffe7 	bl	bb504 <_ZN6String6concatEc>
   b9536:	b110      	cbz	r0, b953e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b9538:	3701      	adds	r7, #1
   b953a:	42be      	cmp	r6, r7
   b953c:	d1f6      	bne.n	b952c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b953e:	4628      	mov	r0, r5
   b9540:	b009      	add	sp, #36	; 0x24
   b9542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9544:	000be05f 	.word	0x000be05f

000b9548 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b9548:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b954a:	2302      	movs	r3, #2
   b954c:	aa01      	add	r2, sp, #4
   b954e:	2119      	movs	r1, #25
   b9550:	f7ff ffa9 	bl	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b9554:	b108      	cbz	r0, b955a <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b9556:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b955a:	b003      	add	sp, #12
   b955c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9560 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9560:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9562:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9566:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9568:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b956a:	8043      	strh	r3, [r0, #2]
   b956c:	220e      	movs	r2, #14
   b956e:	4629      	mov	r1, r5
   b9570:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9572:	7105      	strb	r5, [r0, #4]
   b9574:	3006      	adds	r0, #6
   b9576:	f003 f815 	bl	bc5a4 <memset>
   b957a:	f104 0014 	add.w	r0, r4, #20
   b957e:	f7ff fe2b 	bl	b91d8 <_ZN8particle7BleUuidC1Ev>
   b9582:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9586:	f7ff fe27 	bl	b91d8 <_ZN8particle7BleUuidC1Ev>
   b958a:	4904      	ldr	r1, [pc, #16]	; (b959c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b958c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9590:	f001 ff25 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9594:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9596:	4620      	mov	r0, r4
   b9598:	bd38      	pop	{r3, r4, r5, pc}
   b959a:	bf00      	nop
   b959c:	000be05f 	.word	0x000be05f

000b95a0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b95a0:	b538      	push	{r3, r4, r5, lr}
      { return _M_ptr; }
   b95a2:	680d      	ldr	r5, [r1, #0]
   b95a4:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b95a6:	4601      	mov	r1, r0
   b95a8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b95ac:	f7ff fe6f 	bl	b928e <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b95b0:	b140      	cbz	r0, b95c4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b95b2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b95b4:	8aa2      	ldrh	r2, [r4, #20]
   b95b6:	429a      	cmp	r2, r3
   b95b8:	d805      	bhi.n	b95c6 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b95ba:	8ae0      	ldrh	r0, [r4, #22]
   b95bc:	4298      	cmp	r0, r3
   b95be:	bf34      	ite	cc
   b95c0:	2000      	movcc	r0, #0
   b95c2:	2001      	movcs	r0, #1
    }
   b95c4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b95c6:	2000      	movs	r0, #0
   b95c8:	e7fc      	b.n	b95c4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b95ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b95ca:	b510      	push	{r4, lr}
    return data_ + size_;
   b95cc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b95d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b95d4:	4293      	cmp	r3, r2
   b95d6:	4618      	mov	r0, r3
   b95d8:	d006      	beq.n	b95e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b95da:	6804      	ldr	r4, [r0, #0]
   b95dc:	8824      	ldrh	r4, [r4, #0]
   b95de:	428c      	cmp	r4, r1
   b95e0:	f103 0308 	add.w	r3, r3, #8
   b95e4:	d1f6      	bne.n	b95d4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b95e6:	bd10      	pop	{r4, pc}
        return nullptr;
   b95e8:	2000      	movs	r0, #0
   b95ea:	e7fc      	b.n	b95e6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b95ec <_ZN8particle17BleCharacteristicC1Ev>:
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b95ec:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b95ee:	b570      	push	{r4, r5, r6, lr}
   b95f0:	6003      	str	r3, [r0, #0]
   b95f2:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b95f4:	2068      	movs	r0, #104	; 0x68
   b95f6:	f7fa fd4e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b95fa:	1e04      	subs	r4, r0, #0
   b95fc:	f104 060c 	add.w	r6, r4, #12
   b9600:	d007      	beq.n	b9612 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b9602:	2301      	movs	r3, #1
   b9604:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9608:	4b04      	ldr	r3, [pc, #16]	; (b961c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b960a:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b960c:	4630      	mov	r0, r6
   b960e:	f7ff ffa7 	bl	b9560 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b9612:	e9c5 6400 	strd	r6, r4, [r5]
}
   b9616:	4628      	mov	r0, r5
   b9618:	bd70      	pop	{r4, r5, r6, pc}
   b961a:	bf00      	nop
   b961c:	000be310 	.word	0x000be310

000b9620 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b9620:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b9622:	680c      	ldr	r4, [r1, #0]
   b9624:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b9626:	4606      	mov	r6, r0
    return impl()->charUUID();
   b9628:	4605      	mov	r5, r0
   b962a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b962c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b962e:	6823      	ldr	r3, [r4, #0]
   b9630:	602b      	str	r3, [r5, #0]
}
   b9632:	4630      	mov	r0, r6
   b9634:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9638 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b9638:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b963a:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b963c:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b963e:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9640:	bb52      	cbnz	r2, b9698 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b9642:	885c      	ldrh	r4, [r3, #2]
   b9644:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9648:	4284      	cmp	r4, r0
   b964a:	d025      	beq.n	b9698 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b964c:	8a18      	ldrh	r0, [r3, #16]
   b964e:	b330      	cbz	r0, b969e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b9650:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b9654:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b9656:	4a13      	ldr	r2, [pc, #76]	; (b96a4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b9658:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b965a:	4a13      	ldr	r2, [pc, #76]	; (b96a8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b965c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b9660:	885a      	ldrh	r2, [r3, #2]
   b9662:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b9666:	8a1a      	ldrh	r2, [r3, #16]
   b9668:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b966c:	899a      	ldrh	r2, [r3, #12]
   b966e:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b9672:	b159      	cbz	r1, b968c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9674:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b9676:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b9678:	bf44      	itt	mi
   b967a:	2202      	movmi	r2, #2
   b967c:	9205      	strmi	r2, [sp, #20]
   b967e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b9680:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b9682:	bf42      	ittt	mi
   b9684:	9b05      	ldrmi	r3, [sp, #20]
   b9686:	f043 0301 	orrmi.w	r3, r3, #1
   b968a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b968c:	2100      	movs	r1, #0
   b968e:	4668      	mov	r0, sp
   b9690:	f7fd f9f0 	bl	b6a74 <hal_ble_gatt_client_configure_cccd>
}
   b9694:	b006      	add	sp, #24
   b9696:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9698:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b969c:	e7fa      	b.n	b9694 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b969e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b96a2:	e7f7      	b.n	b9694 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b96a4:	00180003 	.word	0x00180003
   b96a8:	000b987d 	.word	0x000b987d

000b96ac <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b96ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b96ae:	2600      	movs	r6, #0
   b96b0:	6006      	str	r6, [r0, #0]
   b96b2:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b96b4:	2028      	movs	r0, #40	; 0x28
   b96b6:	f7fa fcee 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b96ba:	1e04      	subs	r4, r0, #0
   b96bc:	f104 070c 	add.w	r7, r4, #12
   b96c0:	d00a      	beq.n	b96d8 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b96c2:	2301      	movs	r3, #1
   b96c4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b96c8:	4b05      	ldr	r3, [pc, #20]	; (b96e0 <_ZN8particle10BleServiceC1Ev+0x34>)
   b96ca:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b96cc:	4638      	mov	r0, r7
   b96ce:	f7ff fd83 	bl	b91d8 <_ZN8particle7BleUuidC1Ev>
   b96d2:	6226      	str	r6, [r4, #32]
   b96d4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b96d8:	e9c5 7400 	strd	r7, r4, [r5]
}
   b96dc:	4628      	mov	r0, r5
   b96de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b96e0:	000be32c 	.word	0x000be32c

000b96e4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b96e4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b96e6:	2500      	movs	r5, #0
   b96e8:	6005      	str	r5, [r0, #0]
   b96ea:	4606      	mov	r6, r0
   b96ec:	2030      	movs	r0, #48	; 0x30
   b96ee:	f7fa fcd2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b96f2:	4604      	mov	r4, r0
   b96f4:	b188      	cbz	r0, b971a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b96f6:	2301      	movs	r3, #1
   b96f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b96fc:	4b09      	ldr	r3, [pc, #36]	; (b9724 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b96fe:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9700:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9704:	8183      	strh	r3, [r0, #12]
   b9706:	300e      	adds	r0, #14
   b9708:	f7ff fd5b 	bl	b91c2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b970c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9710:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9714:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9718:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b971a:	6074      	str	r4, [r6, #4]
   b971c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b971e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9720:	4630      	mov	r0, r6
   b9722:	bd70      	pop	{r4, r5, r6, pc}
   b9724:	000be348 	.word	0x000be348

000b9728 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b9728:	b513      	push	{r0, r1, r4, lr}
   b972a:	4604      	mov	r4, r0
    WiringBleLock lk;
   b972c:	a801      	add	r0, sp, #4
   b972e:	f7ff fd0d 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9732:	6823      	ldr	r3, [r4, #0]
   b9734:	881c      	ldrh	r4, [r3, #0]
   b9736:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b973a:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b973c:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b973e:	bf18      	it	ne
   b9740:	2401      	movne	r4, #1
    WiringBleLock lk;
   b9742:	f7ff fd11 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9746:	4620      	mov	r0, r4
   b9748:	b002      	add	sp, #8
   b974a:	bd10      	pop	{r4, pc}

000b974c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b974c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b974e:	4605      	mov	r5, r0
   b9750:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9752:	a801      	add	r0, sp, #4
   b9754:	f7ff fcfa 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9758:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b975a:	6823      	ldr	r3, [r4, #0]
   b975c:	f8c2 3002 	str.w	r3, [r2, #2]
   b9760:	6863      	ldr	r3, [r4, #4]
   b9762:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b9766:	a801      	add	r0, sp, #4
   b9768:	f7ff fcfe 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b976c:	b003      	add	sp, #12
   b976e:	bd30      	pop	{r4, r5, pc}

000b9770 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b9770:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9772:	460d      	mov	r5, r1
   b9774:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9776:	a801      	add	r0, sp, #4
   b9778:	f7ff fce8 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
   b977c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b977e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b9782:	6023      	str	r3, [r4, #0]
   b9784:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9788:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b978a:	a801      	add	r0, sp, #4
   b978c:	f7ff fcec 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9790:	4620      	mov	r0, r4
   b9792:	b003      	add	sp, #12
   b9794:	bd30      	pop	{r4, r5, pc}

000b9796 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9796:	b530      	push	{r4, r5, lr}
   b9798:	4605      	mov	r5, r0
   b979a:	b087      	sub	sp, #28
   b979c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b979e:	a801      	add	r0, sp, #4
   b97a0:	f7ff fcd4 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b97a4:	682a      	ldr	r2, [r5, #0]
   b97a6:	6823      	ldr	r3, [r4, #0]
   b97a8:	8812      	ldrh	r2, [r2, #0]
   b97aa:	881b      	ldrh	r3, [r3, #0]
   b97ac:	429a      	cmp	r2, r3
   b97ae:	d10d      	bne.n	b97cc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b97b0:	4629      	mov	r1, r5
   b97b2:	a802      	add	r0, sp, #8
   b97b4:	f7ff ffdc 	bl	b9770 <_ZNK8particle13BlePeerDevice7addressEv>
   b97b8:	4621      	mov	r1, r4
   b97ba:	a804      	add	r0, sp, #16
   b97bc:	f7ff ffd8 	bl	b9770 <_ZNK8particle13BlePeerDevice7addressEv>
   b97c0:	a904      	add	r1, sp, #16
   b97c2:	a802      	add	r0, sp, #8
   b97c4:	f7ff fce9 	bl	b919a <_ZNK8particle10BleAddresseqERKS0_>
   b97c8:	4604      	mov	r4, r0
   b97ca:	b900      	cbnz	r0, b97ce <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b97cc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b97ce:	a801      	add	r0, sp, #4
   b97d0:	f7ff fcca 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b97d4:	4620      	mov	r0, r4
   b97d6:	b007      	add	sp, #28
   b97d8:	bd30      	pop	{r4, r5, pc}
	...

000b97dc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b97dc:	b510      	push	{r4, lr}
   b97de:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b97e0:	2064      	movs	r0, #100	; 0x64
   b97e2:	f7fa fc58 	bl	b4096 <_Znwj>
   b97e6:	b168      	cbz	r0, b9804 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b97e8:	2300      	movs	r3, #0
   b97ea:	e9c0 3300 	strd	r3, r3, [r0]
   b97ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b97f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b97f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b97fa:	6203      	str	r3, [r0, #32]
   b97fc:	62c3      	str	r3, [r0, #44]	; 0x2c
   b97fe:	63c3      	str	r3, [r0, #60]	; 0x3c
   b9800:	64c3      	str	r3, [r0, #76]	; 0x4c
   b9802:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9804:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b9806:	b920      	cbnz	r0, b9812 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9808:	4a0a      	ldr	r2, [pc, #40]	; (b9834 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b980a:	490b      	ldr	r1, [pc, #44]	; (b9838 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b980c:	200a      	movs	r0, #10
   b980e:	f7fd f993 	bl	b6b38 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b9812:	2000      	movs	r0, #0
   b9814:	f7fd f8d8 	bl	b69c8 <hal_ble_stack_init>
   b9818:	b120      	cbz	r0, b9824 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b981a:	4a06      	ldr	r2, [pc, #24]	; (b9834 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b981c:	4907      	ldr	r1, [pc, #28]	; (b983c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b981e:	200a      	movs	r0, #10
   b9820:	f7fd f98a 	bl	b6b38 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9824:	6821      	ldr	r1, [r4, #0]
   b9826:	4806      	ldr	r0, [pc, #24]	; (b9840 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9828:	2200      	movs	r2, #0
   b982a:	f7fd f919 	bl	b6a60 <hal_ble_set_callback_on_periph_link_events>
}
   b982e:	4620      	mov	r0, r4
   b9830:	bd10      	pop	{r4, pc}
   b9832:	bf00      	nop
   b9834:	000b6a99 	.word	0x000b6a99
   b9838:	000be0ec 	.word	0x000be0ec
   b983c:	000be12a 	.word	0x000be12a
   b9840:	000ba159 	.word	0x000ba159

000b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b9844:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b9846:	4c0a      	ldr	r4, [pc, #40]	; (b9870 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9848:	7823      	ldrb	r3, [r4, #0]
   b984a:	f3bf 8f5b 	dmb	ish
   b984e:	07db      	lsls	r3, r3, #31
   b9850:	d40c      	bmi.n	b986c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9852:	4620      	mov	r0, r4
   b9854:	f7fa fc34 	bl	b40c0 <__cxa_guard_acquire>
   b9858:	b140      	cbz	r0, b986c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b985a:	4806      	ldr	r0, [pc, #24]	; (b9874 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b985c:	f7ff ffbe 	bl	b97dc <_ZN8particle14BleLocalDeviceC1Ev>
   b9860:	4620      	mov	r0, r4
   b9862:	f7fa fc32 	bl	b40ca <__cxa_guard_release>
   b9866:	4804      	ldr	r0, [pc, #16]	; (b9878 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9868:	f002 fe52 	bl	bc510 <atexit>
    return instance;
}
   b986c:	4801      	ldr	r0, [pc, #4]	; (b9874 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b986e:	bd10      	pop	{r4, pc}
   b9870:	2003e6fc 	.word	0x2003e6fc
   b9874:	2003e704 	.word	0x2003e704
   b9878:	000b9ab9 	.word	0x000b9ab9

000b987c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b987c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b987e:	6803      	ldr	r3, [r0, #0]
   b9880:	3b09      	subs	r3, #9
   b9882:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9884:	b08d      	sub	sp, #52	; 0x34
   b9886:	4604      	mov	r4, r0
   b9888:	460d      	mov	r5, r1
    switch (event->type) {
   b988a:	d811      	bhi.n	b98b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b988c:	f7ff ffda 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9890:	88a1      	ldrh	r1, [r4, #4]
   b9892:	6800      	ldr	r0, [r0, #0]
   b9894:	f7ff fe99 	bl	b95ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9898:	4603      	mov	r3, r0
   b989a:	b958      	cbnz	r0, b98b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b989c:	2220      	movs	r2, #32
   b989e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b98a2:	4a0b      	ldr	r2, [pc, #44]	; (b98d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b98a4:	9200      	str	r2, [sp, #0]
   b98a6:	490b      	ldr	r1, [pc, #44]	; (b98d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b98a8:	aa04      	add	r2, sp, #16
   b98aa:	2032      	movs	r0, #50	; 0x32
   b98ac:	f7fd f94c 	bl	b6b48 <log_message>
}
   b98b0:	b00d      	add	sp, #52	; 0x34
   b98b2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b98b4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b98b6:	2a00      	cmp	r2, #0
   b98b8:	d0fa      	beq.n	b98b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b98ba:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b98be:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b98c2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b98c6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b98c8:	aa04      	add	r2, sp, #16
   b98ca:	a903      	add	r1, sp, #12
   b98cc:	47a0      	blx	r4
}
   b98ce:	e7ef      	b.n	b98b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b98d0:	000be16c 	.word	0x000be16c
   b98d4:	000be103 	.word	0x000be103

000b98d8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b98d8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b98da:	2000      	movs	r0, #0
   b98dc:	f7fd f874 	bl	b69c8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b98e0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b98e4:	bd08      	pop	{r3, pc}

000b98e6 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b98e6:	b510      	push	{r4, lr}
   b98e8:	4604      	mov	r4, r0
    ::free(ptr);
   b98ea:	6940      	ldr	r0, [r0, #20]
   b98ec:	f7fd f9e8 	bl	b6cc0 <free>
   b98f0:	68a0      	ldr	r0, [r4, #8]
   b98f2:	f7fd f9e5 	bl	b6cc0 <free>
   b98f6:	4620      	mov	r0, r4
   b98f8:	bd10      	pop	{r4, pc}

000b98fa <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b98fa:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b98fc:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b9900:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b9904:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9908:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b990c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b9910:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b9914:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b9918:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b991c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b9920:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b9924:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b9928:	6202      	str	r2, [r0, #32]
   b992a:	6302      	str	r2, [r0, #48]	; 0x30
   b992c:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b9930:	4770      	bx	lr

000b9932 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b9932:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b9934:	69d8      	ldr	r0, [r3, #28]
}
   b9936:	2800      	cmp	r0, #0
   b9938:	bfd4      	ite	le
   b993a:	2000      	movle	r0, #0
   b993c:	2001      	movgt	r0, #1
   b993e:	4770      	bx	lr

000b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9940:	b510      	push	{r4, lr}
   b9942:	4604      	mov	r4, r0
    ::free(ptr);
   b9944:	6800      	ldr	r0, [r0, #0]
   b9946:	f7fd f9bb 	bl	b6cc0 <free>
}
   b994a:	4620      	mov	r0, r4
   b994c:	bd10      	pop	{r4, pc}

000b994e <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b994e:	b570      	push	{r4, r5, r6, lr}
   b9950:	4604      	mov	r4, r0
    ::free(ptr);
   b9952:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b9954:	f7fd f9b4 	bl	b6cc0 <free>
   b9958:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b995a:	f7fd f9b1 	bl	b6cc0 <free>
    }
    ~BleScanFilter() = default;
   b995e:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b9962:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9966:	f7ff ffeb 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b996a:	4628      	mov	r0, r5
   b996c:	f7fe fce6 	bl	b833c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b9970:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9974:	f7fe f9a2 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
   b9978:	f104 0018 	add.w	r0, r4, #24
   b997c:	f7fe f99e 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9980:	e9d4 5300 	ldrd	r5, r3, [r4]
   b9984:	2624      	movs	r6, #36	; 0x24
   b9986:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b998a:	42ae      	cmp	r6, r5
   b998c:	d004      	beq.n	b9998 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b998e:	4628      	mov	r0, r5
   b9990:	f7ff ffa9 	bl	b98e6 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b9994:	3524      	adds	r5, #36	; 0x24
   b9996:	e7f8      	b.n	b998a <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b9998:	6820      	ldr	r0, [r4, #0]
   b999a:	f7fd f991 	bl	b6cc0 <free>
   b999e:	4620      	mov	r0, r4
   b99a0:	bd70      	pop	{r4, r5, r6, pc}

000b99a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b99a2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b99a4:	1e14      	subs	r4, r2, #0
   b99a6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b99a8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b99aa:	db02      	blt.n	b99b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b99ac:	1862      	adds	r2, r4, r1
   b99ae:	429a      	cmp	r2, r3
   b99b0:	dd00      	ble.n	b99b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b99b2:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b99b4:	682a      	ldr	r2, [r5, #0]
   b99b6:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b99b8:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b99ba:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b99bc:	1a52      	subs	r2, r2, r1
   b99be:	f002 fdd7 	bl	bc570 <memmove>
    size_ -= n;
   b99c2:	686a      	ldr	r2, [r5, #4]
   b99c4:	1b12      	subs	r2, r2, r4
   b99c6:	606a      	str	r2, [r5, #4]
}
   b99c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b99cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b99cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b99ce:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b99d0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b99d2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b99d4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b99d6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b99d8:	f7fa fb5d 	bl	b4096 <_Znwj>
   b99dc:	b118      	cbz	r0, b99e6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b99de:	682b      	ldr	r3, [r5, #0]
   b99e0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b99e2:	686b      	ldr	r3, [r5, #4]
   b99e4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b99e6:	4b03      	ldr	r3, [pc, #12]	; (b99f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b99e8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b99ea:	4b03      	ldr	r3, [pc, #12]	; (b99f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b99ec:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b99ee:	60a3      	str	r3, [r4, #8]
      }
   b99f0:	4620      	mov	r0, r4
   b99f2:	bd38      	pop	{r3, r4, r5, pc}
   b99f4:	000b8ff1 	.word	0x000b8ff1
   b99f8:	000b9009 	.word	0x000b9009

000b99fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b99fc:	680b      	ldr	r3, [r1, #0]
   b99fe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b9a00:	b113      	cbz	r3, b9a08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b9a02:	685a      	ldr	r2, [r3, #4]
   b9a04:	3201      	adds	r2, #1
   b9a06:	605a      	str	r2, [r3, #4]
      }
   b9a08:	4770      	bx	lr

000b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b9a0a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9a0c:	f851 3b04 	ldr.w	r3, [r1], #4
   b9a10:	4604      	mov	r4, r0
   b9a12:	f840 3b04 	str.w	r3, [r0], #4
   b9a16:	f7ff fff1 	bl	b99fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b9a1a:	6823      	ldr	r3, [r4, #0]
   b9a1c:	b90b      	cbnz	r3, b9a22 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b9a1e:	f7ff fadd 	bl	b8fdc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b9a22:	4620      	mov	r0, r4
   b9a24:	bd10      	pop	{r4, pc}

000b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9a26:	b510      	push	{r4, lr}
   b9a28:	f851 3b04 	ldr.w	r3, [r1], #4
   b9a2c:	4604      	mov	r4, r0
   b9a2e:	f840 3b04 	str.w	r3, [r0], #4
   b9a32:	f7ff ffe3 	bl	b99fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9a36:	4620      	mov	r0, r4
   b9a38:	bd10      	pop	{r4, pc}

000b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9a3a:	b510      	push	{r4, lr}
   b9a3c:	f851 3b04 	ldr.w	r3, [r1], #4
   b9a40:	4604      	mov	r4, r0
   b9a42:	f840 3b04 	str.w	r3, [r0], #4
   b9a46:	f7ff ffd9 	bl	b99fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	bd10      	pop	{r4, pc}

000b9a4e <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b9a4e:	b510      	push	{r4, lr}
   b9a50:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9a52:	3004      	adds	r0, #4
   b9a54:	f7fd fb58 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a58:	4620      	mov	r0, r4
   b9a5a:	bd10      	pop	{r4, pc}

000b9a5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9a5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9a5e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9a62:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9a64:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9a68:	42ae      	cmp	r6, r5
   b9a6a:	d004      	beq.n	b9a76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b9a6c:	1d28      	adds	r0, r5, #4
   b9a6e:	f7fd fb4b 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9a72:	3508      	adds	r5, #8
   b9a74:	e7f8      	b.n	b9a68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9a76:	6820      	ldr	r0, [r4, #0]
   b9a78:	f7fd f922 	bl	b6cc0 <free>
}
   b9a7c:	4620      	mov	r0, r4
   b9a7e:	bd70      	pop	{r4, r5, r6, pc}

000b9a80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9a80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9a82:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9a86:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9a88:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9a8c:	42ae      	cmp	r6, r5
   b9a8e:	d004      	beq.n	b9a9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b9a90:	1d28      	adds	r0, r5, #4
   b9a92:	f7fd fb39 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9a96:	3508      	adds	r5, #8
   b9a98:	e7f8      	b.n	b9a8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9a9a:	6820      	ldr	r0, [r4, #0]
   b9a9c:	f7fd f910 	bl	b6cc0 <free>
}
   b9aa0:	4620      	mov	r0, r4
   b9aa2:	bd70      	pop	{r4, r5, r6, pc}

000b9aa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9aa4:	b510      	push	{r4, lr}
   b9aa6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b9aa8:	3024      	adds	r0, #36	; 0x24
   b9aaa:	f7ff ffe9 	bl	b9a80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9aae:	f104 0018 	add.w	r0, r4, #24
   b9ab2:	f7ff ffd3 	bl	b9a5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b9ab6:	bd10      	pop	{r4, pc}

000b9ab8 <__tcf_0>:
    static BleLocalDevice instance;
   b9ab8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b9aba:	4b17      	ldr	r3, [pc, #92]	; (b9b18 <__tcf_0+0x60>)
   b9abc:	681c      	ldr	r4, [r3, #0]
   b9abe:	b354      	cbz	r4, b9b16 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9ac0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9ac4:	f7fe f8fa 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
   b9ac8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9acc:	f7fe f8f6 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
   b9ad0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9ad4:	f7fe f8f2 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
   b9ad8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9adc:	f7fe f8ee 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9ae0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b9ae4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9ae8:	42ae      	cmp	r6, r5
   b9aea:	d004      	beq.n	b9af6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b9aec:	1d28      	adds	r0, r5, #4
   b9aee:	f7fd fb0b 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9af2:	3508      	adds	r5, #8
   b9af4:	e7f8      	b.n	b9ae8 <__tcf_0+0x30>
    ::free(ptr);
   b9af6:	69a0      	ldr	r0, [r4, #24]
   b9af8:	f7fd f8e2 	bl	b6cc0 <free>
    ~BleLocalDeviceImpl() = default;
   b9afc:	f104 000c 	add.w	r0, r4, #12
   b9b00:	f7ff ffbe 	bl	b9a80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9b04:	4620      	mov	r0, r4
   b9b06:	f7ff ffa9 	bl	b9a5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b9b0a:	4620      	mov	r0, r4
   b9b0c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b9b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9b12:	f7fa bac6 	b.w	b40a2 <_ZdlPvj>
   b9b16:	bd70      	pop	{r4, r5, r6, pc}
   b9b18:	2003e704 	.word	0x2003e704

000b9b1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b9b1c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9b1e:	b510      	push	{r4, lr}
      if (_M_empty())
   b9b20:	b90a      	cbnz	r2, b9b26 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9b22:	f001 ff11 	bl	bb948 <_ZSt25__throw_bad_function_callv>
    }
   b9b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9b2a:	68c3      	ldr	r3, [r0, #12]
   b9b2c:	4718      	bx	r3

000b9b2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b9b32:	2300      	movs	r3, #0
   b9b34:	e9c0 3300 	strd	r3, r3, [r0]
   b9b38:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9b3a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b9b3e:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9b40:	4605      	mov	r5, r0
   b9b42:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9b44:	dd4a      	ble.n	b9bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b9b46:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b9b4a:	f7fd f8b1 	bl	b6cb0 <malloc>
            if (!d) {
   b9b4e:	4606      	mov	r6, r0
   b9b50:	2800      	cmp	r0, #0
   b9b52:	d043      	beq.n	b9bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b9b54:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b9b58:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b9b5a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b9b5e:	d916      	bls.n	b9b8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b9b60:	4550      	cmp	r0, sl
   b9b62:	d215      	bcs.n	b9b90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b9b64:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b9b68:	f1a4 0910 	sub.w	r9, r4, #16
   b9b6c:	ebaa 0404 	sub.w	r4, sl, r4
   b9b70:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b9b72:	45d1      	cmp	r9, sl
   b9b74:	d01d      	beq.n	b9bb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b9b76:	b11c      	cbz	r4, b9b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b9b78:	4651      	mov	r1, sl
   b9b7a:	4620      	mov	r0, r4
   b9b7c:	f001 fc60 	bl	bb440 <_ZN6StringC1EOS_>
                end->~T();
   b9b80:	4650      	mov	r0, sl
   b9b82:	f001 fbe1 	bl	bb348 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9b86:	f1aa 0a10 	sub.w	sl, sl, #16
   b9b8a:	3c10      	subs	r4, #16
   b9b8c:	e7f1      	b.n	b9b72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b9b8e:	d010      	beq.n	b9bb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b9b90:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b9b92:	45a2      	cmp	sl, r4
   b9b94:	d00d      	beq.n	b9bb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b9b96:	f1b9 0f00 	cmp.w	r9, #0
   b9b9a:	d003      	beq.n	b9ba4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b9b9c:	4621      	mov	r1, r4
   b9b9e:	4648      	mov	r0, r9
   b9ba0:	f001 fc4e 	bl	bb440 <_ZN6StringC1EOS_>
                p->~T();
   b9ba4:	4620      	mov	r0, r4
   b9ba6:	f001 fbcf 	bl	bb348 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9baa:	3410      	adds	r4, #16
   b9bac:	f109 0910 	add.w	r9, r9, #16
   b9bb0:	e7ef      	b.n	b9b92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b9bb2:	6828      	ldr	r0, [r5, #0]
   b9bb4:	f7fd f884 	bl	b6cc0 <free>
        capacity_ = n;
   b9bb8:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b9bbc:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9bbe:	e9d7 4300 	ldrd	r4, r3, [r7]
   b9bc2:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b9bc6:	45a0      	cmp	r8, r4
   b9bc8:	d006      	beq.n	b9bd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b9bca:	4621      	mov	r1, r4
   b9bcc:	4630      	mov	r0, r6
   b9bce:	f001 fc51 	bl	bb474 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b9bd2:	3410      	adds	r4, #16
   b9bd4:	3610      	adds	r6, #16
   b9bd6:	e7f6      	b.n	b9bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b9bd8:	687b      	ldr	r3, [r7, #4]
   b9bda:	606b      	str	r3, [r5, #4]
}
   b9bdc:	4628      	mov	r0, r5
   b9bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b9be2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b9be2:	b530      	push	{r4, r5, lr}
   b9be4:	b08d      	sub	sp, #52	; 0x34
   b9be6:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b9be8:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b9bec:	a801      	add	r0, sp, #4
   b9bee:	f7ff ff9e 	bl	b9b2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b9bf2:	9b02      	ldr	r3, [sp, #8]
   b9bf4:	2b00      	cmp	r3, #0
   b9bf6:	dd2f      	ble.n	b9c58 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b9bf8:	f104 0114 	add.w	r1, r4, #20
   b9bfc:	a804      	add	r0, sp, #16
   b9bfe:	f7ff fc85 	bl	b950c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b9c02:	f104 0108 	add.w	r1, r4, #8
   b9c06:	a808      	add	r0, sp, #32
   b9c08:	f7ff fc80 	bl	b950c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b9c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b9c0e:	9b06      	ldr	r3, [sp, #24]
   b9c10:	4313      	orrs	r3, r2
   b9c12:	d01f      	beq.n	b9c54 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b9c14:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b9c18:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b9c1c:	42ac      	cmp	r4, r5
   b9c1e:	d019      	beq.n	b9c54 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b9c20:	a904      	add	r1, sp, #16
   b9c22:	4620      	mov	r0, r4
   b9c24:	f001 fc90 	bl	bb548 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b9c28:	b160      	cbz	r0, b9c44 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b9c2a:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b9c2c:	a808      	add	r0, sp, #32
   b9c2e:	f001 fb8b 	bl	bb348 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b9c32:	a804      	add	r0, sp, #16
   b9c34:	f001 fb88 	bl	bb348 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b9c38:	a801      	add	r0, sp, #4
   b9c3a:	f7fe fb7f 	bl	b833c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b9c3e:	4620      	mov	r0, r4
   b9c40:	b00d      	add	sp, #52	; 0x34
   b9c42:	bd30      	pop	{r4, r5, pc}
   b9c44:	4620      	mov	r0, r4
   b9c46:	a908      	add	r1, sp, #32
   b9c48:	f001 fc7e 	bl	bb548 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b9c4c:	3410      	adds	r4, #16
   b9c4e:	2800      	cmp	r0, #0
   b9c50:	d0e4      	beq.n	b9c1c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b9c52:	e7ea      	b.n	b9c2a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b9c54:	2400      	movs	r4, #0
   b9c56:	e7e9      	b.n	b9c2c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b9c58:	2401      	movs	r4, #1
   b9c5a:	e7ed      	b.n	b9c38 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b9c5c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b9c5e:	2300      	movs	r3, #0
   b9c60:	e9c0 3300 	strd	r3, r3, [r0]
   b9c64:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9c66:	684f      	ldr	r7, [r1, #4]
   b9c68:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9c6a:	4605      	mov	r5, r0
   b9c6c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9c6e:	dd3e      	ble.n	b9cee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b9c70:	00f8      	lsls	r0, r7, #3
   b9c72:	f7fd f81d 	bl	b6cb0 <malloc>
            if (!d) {
   b9c76:	4604      	mov	r4, r0
   b9c78:	b3c8      	cbz	r0, b9cee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b9c7a:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b9c7e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b9c80:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b9c84:	d910      	bls.n	b9ca8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b9c86:	429c      	cmp	r4, r3
   b9c88:	d20f      	bcs.n	b9caa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b9c8a:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b9c8c:	1a1a      	subs	r2, r3, r0
   b9c8e:	f1a0 0c08 	sub.w	ip, r0, #8
   b9c92:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b9c94:	459c      	cmp	ip, r3
   b9c96:	d018      	beq.n	b9cca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b9c98:	b11a      	cbz	r2, b9ca2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b9c9a:	6819      	ldr	r1, [r3, #0]
   b9c9c:	6011      	str	r1, [r2, #0]
   b9c9e:	6859      	ldr	r1, [r3, #4]
   b9ca0:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b9ca2:	3b08      	subs	r3, #8
   b9ca4:	3a08      	subs	r2, #8
   b9ca6:	e7f5      	b.n	b9c94 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b9ca8:	d00f      	beq.n	b9cca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b9caa:	4601      	mov	r1, r0
   b9cac:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b9cae:	428b      	cmp	r3, r1
   b9cb0:	d00b      	beq.n	b9cca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b9cb2:	b13a      	cbz	r2, b9cc4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b9cb4:	f8d1 c000 	ldr.w	ip, [r1]
   b9cb8:	f8c2 c000 	str.w	ip, [r2]
   b9cbc:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b9cc0:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b9cc4:	3108      	adds	r1, #8
   b9cc6:	3208      	adds	r2, #8
   b9cc8:	e7f1      	b.n	b9cae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b9cca:	f7fc fff9 	bl	b6cc0 <free>
        data_ = d;
   b9cce:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9cd0:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9cd2:	e9d6 3100 	ldrd	r3, r1, [r6]
   b9cd6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b9cda:	4298      	cmp	r0, r3
   b9cdc:	d006      	beq.n	b9cec <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b9cde:	681a      	ldr	r2, [r3, #0]
   b9ce0:	6022      	str	r2, [r4, #0]
   b9ce2:	685a      	ldr	r2, [r3, #4]
   b9ce4:	6062      	str	r2, [r4, #4]
   b9ce6:	3308      	adds	r3, #8
   b9ce8:	3408      	adds	r4, #8
   b9cea:	e7f6      	b.n	b9cda <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b9cec:	6069      	str	r1, [r5, #4]
}
   b9cee:	4628      	mov	r0, r5
   b9cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9cf2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9cf2:	b570      	push	{r4, r5, r6, lr}
   b9cf4:	4604      	mov	r4, r0
        capacity_(0) {
   b9cf6:	2000      	movs	r0, #0
   b9cf8:	e9c4 0000 	strd	r0, r0, [r4]
   b9cfc:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9cfe:	684e      	ldr	r6, [r1, #4]
   b9d00:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9d02:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9d04:	dd12      	ble.n	b9d2c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b9d06:	0071      	lsls	r1, r6, #1
   b9d08:	f7fc ffe2 	bl	b6cd0 <realloc>
            if (!d) {
   b9d0c:	b170      	cbz	r0, b9d2c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b9d0e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9d10:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9d12:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9d16:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b9d1a:	429a      	cmp	r2, r3
   b9d1c:	d004      	beq.n	b9d28 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b9d1e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9d22:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b9d26:	e7f8      	b.n	b9d1a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b9d28:	686b      	ldr	r3, [r5, #4]
   b9d2a:	6063      	str	r3, [r4, #4]
}
   b9d2c:	4620      	mov	r0, r4
   b9d2e:	bd70      	pop	{r4, r5, r6, pc}

000b9d30 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b9d30:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b9d32:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b9d34:	4604      	mov	r4, r0
        if (!dismissed_) {
   b9d36:	b923      	cbnz	r3, b9d42 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b9d38:	6803      	ldr	r3, [r0, #0]
   b9d3a:	6818      	ldr	r0, [r3, #0]
   b9d3c:	b108      	cbz	r0, b9d42 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b9d3e:	f7fc ffbf 	bl	b6cc0 <free>
            func_();
        }
    }
   b9d42:	4620      	mov	r0, r4
   b9d44:	bd10      	pop	{r4, pc}

000b9d46 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b9d46:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b9d48:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b9d4a:	4604      	mov	r4, r0
        if (!dismissed_) {
   b9d4c:	b923      	cbnz	r3, b9d58 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b9d4e:	6803      	ldr	r3, [r0, #0]
   b9d50:	6818      	ldr	r0, [r3, #0]
   b9d52:	b108      	cbz	r0, b9d58 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b9d54:	f7fc ffb4 	bl	b6cc0 <free>
    }
   b9d58:	4620      	mov	r0, r4
   b9d5a:	bd10      	pop	{r4, pc}

000b9d5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b9d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b9d60:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b9d64:	b08f      	sub	sp, #60	; 0x3c
   b9d66:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b9d68:	f1b8 0f00 	cmp.w	r8, #0
   b9d6c:	d072      	beq.n	b9e54 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b9d6e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b9d70:	2d00      	cmp	r5, #0
   b9d72:	d06f      	beq.n	b9e54 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b9d74:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b9d78:	231f      	movs	r3, #31
   b9d7a:	2200      	movs	r2, #0
   b9d7c:	21ff      	movs	r1, #255	; 0xff
   b9d7e:	4648      	mov	r0, r9
   b9d80:	f7ff fb91 	bl	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b9d84:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b9d86:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b9d88:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b9d8a:	2200      	movs	r2, #0
   b9d8c:	4619      	mov	r1, r3
   b9d8e:	4638      	mov	r0, r7
   b9d90:	f7ff fb89 	bl	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b9d94:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b9d96:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b9d98:	d006      	beq.n	b9da8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b9d9a:	42ae      	cmp	r6, r5
   b9d9c:	d030      	beq.n	b9e00 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b9d9e:	2400      	movs	r4, #0
    }
   b9da0:	4620      	mov	r0, r4
   b9da2:	b00f      	add	sp, #60	; 0x3c
   b9da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b9da8:	4620      	mov	r0, r4
   b9daa:	f7fc ff81 	bl	b6cb0 <malloc>
            dismissed_(false) {
   b9dae:	ab03      	add	r3, sp, #12
   b9db0:	9304      	str	r3, [sp, #16]
   b9db2:	2300      	movs	r3, #0
   b9db4:	4604      	mov	r4, r0
   b9db6:	9003      	str	r0, [sp, #12]
   b9db8:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b9dbc:	b970      	cbnz	r0, b9ddc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b9dbe:	2320      	movs	r3, #32
   b9dc0:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b9dc4:	4b24      	ldr	r3, [pc, #144]	; (b9e58 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b9dc6:	9300      	str	r3, [sp, #0]
   b9dc8:	4924      	ldr	r1, [pc, #144]	; (b9e5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b9dca:	4603      	mov	r3, r0
   b9dcc:	aa06      	add	r2, sp, #24
   b9dce:	2032      	movs	r0, #50	; 0x32
   b9dd0:	f7fc feba 	bl	b6b48 <log_message>
                    return false;
   b9dd4:	a804      	add	r0, sp, #16
   b9dd6:	f7ff ffab 	bl	b9d30 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b9dda:	e7e1      	b.n	b9da0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b9ddc:	4602      	mov	r2, r0
   b9dde:	21ff      	movs	r1, #255	; 0xff
   b9de0:	462b      	mov	r3, r5
   b9de2:	4648      	mov	r0, r9
   b9de4:	f7ff fb5f 	bl	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b9de8:	9803      	ldr	r0, [sp, #12]
   b9dea:	462a      	mov	r2, r5
   b9dec:	4641      	mov	r1, r8
   b9dee:	f002 fba1 	bl	bc534 <memcmp>
   b9df2:	b118      	cbz	r0, b9dfc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b9df4:	a804      	add	r0, sp, #16
   b9df6:	f7ff ff9b 	bl	b9d30 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b9dfa:	e7ce      	b.n	b9d9a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b9dfc:	2401      	movs	r4, #1
   b9dfe:	e7e9      	b.n	b9dd4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b9e00:	4628      	mov	r0, r5
   b9e02:	f7fc ff55 	bl	b6cb0 <malloc>
   b9e06:	2400      	movs	r4, #0
   b9e08:	ab03      	add	r3, sp, #12
   b9e0a:	4606      	mov	r6, r0
   b9e0c:	9003      	str	r0, [sp, #12]
   b9e0e:	9304      	str	r3, [sp, #16]
   b9e10:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b9e14:	b978      	cbnz	r0, b9e36 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b9e16:	2320      	movs	r3, #32
   b9e18:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b9e1c:	4b0e      	ldr	r3, [pc, #56]	; (b9e58 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b9e1e:	9300      	str	r3, [sp, #0]
   b9e20:	490e      	ldr	r1, [pc, #56]	; (b9e5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b9e22:	4603      	mov	r3, r0
   b9e24:	aa06      	add	r2, sp, #24
   b9e26:	2032      	movs	r0, #50	; 0x32
   b9e28:	f7fc fe8e 	bl	b6b48 <log_message>
                    return false;
   b9e2c:	4634      	mov	r4, r6
   b9e2e:	a804      	add	r0, sp, #16
   b9e30:	f7ff ff89 	bl	b9d46 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b9e34:	e7b4      	b.n	b9da0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b9e36:	4602      	mov	r2, r0
   b9e38:	21ff      	movs	r1, #255	; 0xff
   b9e3a:	462b      	mov	r3, r5
   b9e3c:	4638      	mov	r0, r7
   b9e3e:	f7ff fb32 	bl	b94a6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b9e42:	9803      	ldr	r0, [sp, #12]
   b9e44:	462a      	mov	r2, r5
   b9e46:	4641      	mov	r1, r8
   b9e48:	f002 fb74 	bl	bc534 <memcmp>
   b9e4c:	2800      	cmp	r0, #0
   b9e4e:	d1ee      	bne.n	b9e2e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b9e50:	2401      	movs	r4, #1
   b9e52:	e7ec      	b.n	b9e2e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b9e54:	2401      	movs	r4, #1
   b9e56:	e7a3      	b.n	b9da0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b9e58:	000be184 	.word	0x000be184
   b9e5c:	000be103 	.word	0x000be103

000b9e60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b9e60:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b9e62:	6883      	ldr	r3, [r0, #8]
   b9e64:	428b      	cmp	r3, r1
   b9e66:	da02      	bge.n	b9e6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b9e68:	f7fd fde5 	bl	b7a36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b9e6c:	bd08      	pop	{r3, pc}
    return true;
   b9e6e:	2001      	movs	r0, #1
   b9e70:	e7fc      	b.n	b9e6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b9e72 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b9e72:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b9e74:	680b      	ldr	r3, [r1, #0]
   b9e76:	6003      	str	r3, [r0, #0]
   b9e78:	684b      	ldr	r3, [r1, #4]
   b9e7a:	6043      	str	r3, [r0, #4]
   b9e7c:	4604      	mov	r4, r0
   b9e7e:	460d      	mov	r5, r1
class BleAdvertisingData {
   b9e80:	3008      	adds	r0, #8
   b9e82:	3108      	adds	r1, #8
   b9e84:	f7fd fde7 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9e88:	f105 0114 	add.w	r1, r5, #20
   b9e8c:	f104 0014 	add.w	r0, r4, #20
   b9e90:	f7fd fde1 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b9e94:	f895 3020 	ldrb.w	r3, [r5, #32]
   b9e98:	f884 3020 	strb.w	r3, [r4, #32]
   b9e9c:	4620      	mov	r0, r4
   b9e9e:	bd38      	pop	{r3, r4, r5, pc}

000b9ea0 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b9ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b9ea2:	4604      	mov	r4, r0
   b9ea4:	a801      	add	r0, sp, #4
   b9ea6:	f7fd fdd6 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9eaa:	9b01      	ldr	r3, [sp, #4]
   b9eac:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9eae:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b9eb0:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9eb2:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9eb4:	6062      	str	r2, [r4, #4]
   b9eb6:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9eb8:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9eba:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9ebc:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ebe:	9001      	str	r0, [sp, #4]
   b9ec0:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b9ec2:	f7fc fefd 	bl	b6cc0 <free>
   b9ec6:	b004      	add	sp, #16
   b9ec8:	bd10      	pop	{r4, pc}

000b9eca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ece:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9ed0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9ed2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9ed4:	4419      	add	r1, r3
   b9ed6:	6883      	ldr	r3, [r0, #8]
   b9ed8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9eda:	4604      	mov	r4, r0
   b9edc:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9ede:	dc12      	bgt.n	b9f06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b9ee0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9ee2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9ee4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9ee6:	1bd2      	subs	r2, r2, r7
   b9ee8:	4631      	mov	r1, r6
   b9eea:	1970      	adds	r0, r6, r5
   b9eec:	f002 fb40 	bl	bc570 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9ef0:	462a      	mov	r2, r5
   b9ef2:	4641      	mov	r1, r8
   b9ef4:	4630      	mov	r0, r6
   b9ef6:	f002 fb2d 	bl	bc554 <memcpy>
    size_ += n;
   b9efa:	6863      	ldr	r3, [r4, #4]
   b9efc:	442b      	add	r3, r5
   b9efe:	6063      	str	r3, [r4, #4]
    return true;
   b9f00:	2001      	movs	r0, #1
}
   b9f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9f06:	f7fd fd96 	bl	b7a36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9f0a:	2800      	cmp	r0, #0
   b9f0c:	d1e8      	bne.n	b9ee0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b9f0e:	e7f8      	b.n	b9f02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b9f10 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b9f10:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b9f12:	460a      	mov	r2, r1
   b9f14:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b9f16:	b510      	push	{r4, lr}
   b9f18:	4604      	mov	r4, r0
    size_ = 0;
   b9f1a:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b9f1c:	b102      	cbz	r2, b9f20 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b9f1e:	b90b      	cbnz	r3, b9f24 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b9f20:	2000      	movs	r0, #0
}
   b9f22:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b9f24:	2bff      	cmp	r3, #255	; 0xff
   b9f26:	bf28      	it	cs
   b9f28:	23ff      	movcs	r3, #255	; 0xff
   b9f2a:	f7ff ffce 	bl	b9eca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b9f2e:	2800      	cmp	r0, #0
   b9f30:	d0f7      	beq.n	b9f22 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b9f32:	6860      	ldr	r0, [r4, #4]
   b9f34:	e7f5      	b.n	b9f22 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b9f36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f38:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f3a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9f3e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9f40:	4604      	mov	r4, r0
   b9f42:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f44:	da0b      	bge.n	b9f5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b9f46:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9f48:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9f4a:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9f4c:	1b52      	subs	r2, r2, r5
   b9f4e:	1c48      	adds	r0, r1, #1
   b9f50:	f002 fb0e 	bl	bc570 <memmove>
    new(p) T(std::move(value));
   b9f54:	557e      	strb	r6, [r7, r5]
    ++size_;
   b9f56:	6863      	ldr	r3, [r4, #4]
   b9f58:	3301      	adds	r3, #1
   b9f5a:	6063      	str	r3, [r4, #4]
}
   b9f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f5e:	3101      	adds	r1, #1
   b9f60:	f7fd fd69 	bl	b7a36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9f64:	2800      	cmp	r0, #0
   b9f66:	d1ee      	bne.n	b9f46 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b9f68:	e7f8      	b.n	b9f5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b9f6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9f6a:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b9f6c:	6841      	ldr	r1, [r0, #4]
   b9f6e:	f7ff bfe2 	b.w	b9f36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b9f72 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9f72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9f76:	4604      	mov	r4, r0
   b9f78:	461d      	mov	r5, r3
   b9f7a:	460f      	mov	r7, r1
   b9f7c:	ab01      	add	r3, sp, #4
   b9f7e:	4690      	mov	r8, r2
   b9f80:	460a      	mov	r2, r1
   b9f82:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9f86:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b9f8a:	f7ff f811 	bl	b8fb0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b9f8e:	1cae      	adds	r6, r5, #2
   b9f90:	6863      	ldr	r3, [r4, #4]
   b9f92:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b9f94:	f1b9 0f00 	cmp.w	r9, #0
   b9f98:	d126      	bne.n	b9fe8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b9f9a:	b328      	cbz	r0, b9fe8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b9f9c:	4433      	add	r3, r6
   b9f9e:	1a1b      	subs	r3, r3, r0
   b9fa0:	2bff      	cmp	r3, #255	; 0xff
   b9fa2:	d809      	bhi.n	b9fb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b9fa4:	9901      	ldr	r1, [sp, #4]
   b9fa6:	4620      	mov	r0, r4
   b9fa8:	f7ff fcfb 	bl	b99a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b9fac:	6861      	ldr	r1, [r4, #4]
   b9fae:	4620      	mov	r0, r4
   b9fb0:	4431      	add	r1, r6
   b9fb2:	f7ff ff55 	bl	b9e60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9fb6:	b918      	cbnz	r0, b9fc0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b9fb8:	6860      	ldr	r0, [r4, #4]
}
   b9fba:	b003      	add	sp, #12
   b9fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b9fc0:	1c6a      	adds	r2, r5, #1
   b9fc2:	9901      	ldr	r1, [sp, #4]
   b9fc4:	b2d2      	uxtb	r2, r2
   b9fc6:	4620      	mov	r0, r4
   b9fc8:	f7ff ffb5 	bl	b9f36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b9fcc:	9901      	ldr	r1, [sp, #4]
   b9fce:	463a      	mov	r2, r7
   b9fd0:	3101      	adds	r1, #1
   b9fd2:	4620      	mov	r0, r4
   b9fd4:	f7ff ffaf 	bl	b9f36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b9fd8:	9901      	ldr	r1, [sp, #4]
   b9fda:	462b      	mov	r3, r5
   b9fdc:	4642      	mov	r2, r8
   b9fde:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b9fe0:	4620      	mov	r0, r4
   b9fe2:	f7ff ff72 	bl	b9eca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b9fe6:	e7e7      	b.n	b9fb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b9fe8:	18f1      	adds	r1, r6, r3
   b9fea:	29ff      	cmp	r1, #255	; 0xff
   b9fec:	d8e4      	bhi.n	b9fb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b9fee:	4620      	mov	r0, r4
   b9ff0:	f7ff ff36 	bl	b9e60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9ff4:	2800      	cmp	r0, #0
   b9ff6:	d0df      	beq.n	b9fb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b9ff8:	1c69      	adds	r1, r5, #1
   b9ffa:	b2c9      	uxtb	r1, r1
   b9ffc:	4620      	mov	r0, r4
   b9ffe:	f7ff ffb4 	bl	b9f6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   ba002:	4639      	mov	r1, r7
   ba004:	4620      	mov	r0, r4
   ba006:	f7ff ffb0 	bl	b9f6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   ba00a:	6861      	ldr	r1, [r4, #4]
   ba00c:	462b      	mov	r3, r5
   ba00e:	4642      	mov	r2, r8
   ba010:	e7e6      	b.n	b9fe0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000ba012 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba012:	b430      	push	{r4, r5}
   ba014:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   ba018:	b11a      	cbz	r2, ba022 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   ba01a:	9502      	str	r5, [sp, #8]
}
   ba01c:	bc30      	pop	{r4, r5}
   ba01e:	f7ff bfa8 	b.w	b9f72 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   ba022:	6840      	ldr	r0, [r0, #4]
}
   ba024:	bc30      	pop	{r4, r5}
   ba026:	4770      	bx	lr

000ba028 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   ba028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   ba02a:	2300      	movs	r3, #0
   ba02c:	e9c0 3300 	strd	r3, r3, [r0]
   ba030:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba032:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba034:	9300      	str	r3, [sp, #0]
   ba036:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba038:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba03c:	4619      	mov	r1, r3
   ba03e:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   ba042:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba044:	f7ff ffe5 	bl	ba012 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   ba048:	4620      	mov	r0, r4
   ba04a:	b004      	add	sp, #16
   ba04c:	bd10      	pop	{r4, pc}

000ba04e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba04e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba052:	4604      	mov	r4, r0
   ba054:	460d      	mov	r5, r1
   ba056:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba058:	d914      	bls.n	ba084 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba05a:	4290      	cmp	r0, r2
   ba05c:	d213      	bcs.n	ba086 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba05e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba062:	1a75      	subs	r5, r6, r1
   ba064:	f1a1 0708 	sub.w	r7, r1, #8
   ba068:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba06a:	42b7      	cmp	r7, r6
   ba06c:	d018      	beq.n	ba0a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba06e:	b11c      	cbz	r4, ba078 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   ba070:	4631      	mov	r1, r6
   ba072:	4620      	mov	r0, r4
   ba074:	f7ff fce1 	bl	b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba078:	1d30      	adds	r0, r6, #4
   ba07a:	f7fd f845 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba07e:	3e08      	subs	r6, #8
   ba080:	3c08      	subs	r4, #8
   ba082:	e7f2      	b.n	ba06a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba084:	d00c      	beq.n	ba0a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba086:	42b5      	cmp	r5, r6
   ba088:	d00a      	beq.n	ba0a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba08a:	b11c      	cbz	r4, ba094 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba08c:	4629      	mov	r1, r5
   ba08e:	4620      	mov	r0, r4
   ba090:	f7ff fcd3 	bl	b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba094:	1d28      	adds	r0, r5, #4
   ba096:	f7fd f837 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba09a:	3508      	adds	r5, #8
   ba09c:	3408      	adds	r4, #8
   ba09e:	e7f2      	b.n	ba086 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba0a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba0a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba0a4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba0a6:	6846      	ldr	r6, [r0, #4]
   ba0a8:	4668      	mov	r0, sp
   ba0aa:	f7ff fcc6 	bl	b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba0ae:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   ba0b2:	429f      	cmp	r7, r3
   ba0b4:	db12      	blt.n	ba0dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   ba0b6:	3701      	adds	r7, #1
        if (n > 0) {
   ba0b8:	2f00      	cmp	r7, #0
   ba0ba:	dd29      	ble.n	ba110 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   ba0bc:	00f8      	lsls	r0, r7, #3
   ba0be:	f7fc fdf7 	bl	b6cb0 <malloc>
            if (!d) {
   ba0c2:	4605      	mov	r5, r0
   ba0c4:	b1f0      	cbz	r0, ba104 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   ba0c6:	e9d4 1200 	ldrd	r1, r2, [r4]
   ba0ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba0ce:	f7ff ffbe 	bl	ba04e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba0d2:	6820      	ldr	r0, [r4, #0]
   ba0d4:	f7fc fdf4 	bl	b6cc0 <free>
        data_ = d;
   ba0d8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   ba0da:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba0dc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba0de:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba0e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   ba0e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba0e8:	4631      	mov	r1, r6
   ba0ea:	f106 0008 	add.w	r0, r6, #8
   ba0ee:	f7ff ffae 	bl	ba04e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba0f2:	b11e      	cbz	r6, ba0fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   ba0f4:	4669      	mov	r1, sp
   ba0f6:	4630      	mov	r0, r6
   ba0f8:	f7ff fc9f 	bl	b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   ba0fc:	6863      	ldr	r3, [r4, #4]
   ba0fe:	3301      	adds	r3, #1
   ba100:	6063      	str	r3, [r4, #4]
    return true;
   ba102:	2501      	movs	r5, #1
   ba104:	a801      	add	r0, sp, #4
   ba106:	f7fc ffff 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba10a:	4628      	mov	r0, r5
   ba10c:	b003      	add	sp, #12
   ba10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   ba110:	2500      	movs	r5, #0
   ba112:	e7de      	b.n	ba0d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000ba114 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   ba116:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba11a:	4605      	mov	r5, r0
   ba11c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   ba11e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   ba122:	42a6      	cmp	r6, r4
   ba124:	d005      	beq.n	ba132 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   ba126:	4639      	mov	r1, r7
   ba128:	4620      	mov	r0, r4
   ba12a:	f7ff fb34 	bl	b9796 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   ba12e:	b108      	cbz	r0, ba134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   ba130:	b914      	cbnz	r4, ba138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   ba132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   ba134:	3408      	adds	r4, #8
   ba136:	e7f4      	b.n	ba122 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   ba138:	1d20      	adds	r0, r4, #4
   ba13a:	f7fc ffe5 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   ba13e:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba142:	f104 0108 	add.w	r1, r4, #8
   ba146:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba14a:	4620      	mov	r0, r4
   ba14c:	f7ff ff7f 	bl	ba04e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   ba150:	686b      	ldr	r3, [r5, #4]
   ba152:	3b01      	subs	r3, #1
   ba154:	606b      	str	r3, [r5, #4]
    return true;
   ba156:	e7ec      	b.n	ba132 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000ba158 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba15c:	4605      	mov	r5, r0
   ba15e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   ba160:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba162:	460c      	mov	r4, r1
        WiringBleLock lk;
   ba164:	f7fe fff2 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   ba168:	682e      	ldr	r6, [r5, #0]
   ba16a:	1ef3      	subs	r3, r6, #3
   ba16c:	2b0d      	cmp	r3, #13
   ba16e:	d83c      	bhi.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba170:	e8df f013 	tbh	[pc, r3, lsl #1]
   ba174:	0053000e 	.word	0x0053000e
   ba178:	00d1003b 	.word	0x00d1003b
   ba17c:	003b003b 	.word	0x003b003b
   ba180:	003b003b 	.word	0x003b003b
   ba184:	009b003b 	.word	0x009b003b
   ba188:	009b009b 	.word	0x009b009b
   ba18c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   ba190:	a804      	add	r0, sp, #16
   ba192:	f7ff faa7 	bl	b96e4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   ba196:	9b04      	ldr	r3, [sp, #16]
   ba198:	89aa      	ldrh	r2, [r5, #12]
   ba19a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   ba19c:	6869      	ldr	r1, [r5, #4]
   ba19e:	9804      	ldr	r0, [sp, #16]
   ba1a0:	3108      	adds	r1, #8
   ba1a2:	3002      	adds	r0, #2
   ba1a4:	f7fe ffec 	bl	b9180 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   ba1a8:	a904      	add	r1, sp, #16
   ba1aa:	a806      	add	r0, sp, #24
   ba1ac:	f7ff fc45 	bl	b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   ba1b0:	a906      	add	r1, sp, #24
   ba1b2:	f104 0018 	add.w	r0, r4, #24
   ba1b6:	f7ff ff74 	bl	ba0a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   ba1ba:	4605      	mov	r5, r0
   ba1bc:	a807      	add	r0, sp, #28
   ba1be:	f7fc ffa3 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba1c2:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   ba1c4:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   ba1c6:	b9b5      	cbnz	r5, ba1f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   ba1c8:	4b5d      	ldr	r3, [pc, #372]	; (ba340 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   ba1ca:	495e      	ldr	r1, [pc, #376]	; (ba344 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba1cc:	9300      	str	r3, [sp, #0]
   ba1ce:	2032      	movs	r0, #50	; 0x32
   ba1d0:	462b      	mov	r3, r5
   ba1d2:	aa06      	add	r2, sp, #24
   ba1d4:	9507      	str	r5, [sp, #28]
   ba1d6:	f7fc fcb7 	bl	b6b48 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   ba1da:	9b04      	ldr	r3, [sp, #16]
   ba1dc:	4629      	mov	r1, r5
   ba1de:	8818      	ldrh	r0, [r3, #0]
   ba1e0:	f7fc fc0c 	bl	b69fc <hal_ble_gap_disconnect>
   ba1e4:	a805      	add	r0, sp, #20
   ba1e6:	f7fc ff8f 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   ba1ea:	a803      	add	r0, sp, #12
   ba1ec:	f7fe ffbc 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   ba1f0:	b00e      	add	sp, #56	; 0x38
   ba1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   ba1f6:	4a54      	ldr	r2, [pc, #336]	; (ba348 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   ba1f8:	9200      	str	r2, [sp, #0]
   ba1fa:	2300      	movs	r3, #0
   ba1fc:	4951      	ldr	r1, [pc, #324]	; (ba344 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba1fe:	9307      	str	r3, [sp, #28]
   ba200:	aa06      	add	r2, sp, #24
   ba202:	2001      	movs	r0, #1
   ba204:	f7fc fca0 	bl	b6b48 <log_message>
                if (impl->connectedCallback_) {
   ba208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba20a:	2b00      	cmp	r3, #0
   ba20c:	d0ea      	beq.n	ba1e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   ba20e:	a904      	add	r1, sp, #16
   ba210:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba214:	f7ff fc82 	bl	b9b1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   ba218:	e7e4      	b.n	ba1e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba21a:	89a9      	ldrh	r1, [r5, #12]
   ba21c:	4620      	mov	r0, r4
   ba21e:	f7ff f9d4 	bl	b95ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba222:	4606      	mov	r6, r0
   ba224:	2800      	cmp	r0, #0
   ba226:	d0e0      	beq.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   ba228:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   ba22a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   ba22e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba232:	8029      	strh	r1, [r5, #0]
   ba234:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   ba238:	429a      	cmp	r2, r3
   ba23a:	d003      	beq.n	ba244 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   ba23c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   ba240:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   ba242:	e7f9      	b.n	ba238 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   ba244:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   ba248:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba24c:	45b8      	cmp	r8, r7
   ba24e:	d004      	beq.n	ba25a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   ba250:	1d38      	adds	r0, r7, #4
   ba252:	f7fc ff59 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba256:	3708      	adds	r7, #8
   ba258:	e7f8      	b.n	ba24c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   ba25a:	2300      	movs	r3, #0
   ba25c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   ba25e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   ba262:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba266:	45b8      	cmp	r8, r7
   ba268:	d004      	beq.n	ba274 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   ba26a:	1d38      	adds	r0, r7, #4
   ba26c:	f7fc ff4c 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba270:	3708      	adds	r7, #8
   ba272:	e7f8      	b.n	ba266 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   ba274:	2300      	movs	r3, #0
   ba276:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   ba278:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   ba27a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba27c:	b123      	cbz	r3, ba288 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   ba27e:	4631      	mov	r1, r6
   ba280:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba284:	f7ff fc4a 	bl	b9b1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   ba288:	2300      	movs	r3, #0
   ba28a:	2220      	movs	r2, #32
   ba28c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ba290:	4a2e      	ldr	r2, [pc, #184]	; (ba34c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   ba292:	9200      	str	r2, [sp, #0]
   ba294:	492b      	ldr	r1, [pc, #172]	; (ba344 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba296:	aa06      	add	r2, sp, #24
   ba298:	2001      	movs	r0, #1
   ba29a:	f7fc fc55 	bl	b6b48 <log_message>
                    impl->peers_.removeOne(*peer);
   ba29e:	4631      	mov	r1, r6
   ba2a0:	f104 0018 	add.w	r0, r4, #24
   ba2a4:	f7ff ff36 	bl	ba114 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   ba2a8:	e79f      	b.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba2aa:	89a9      	ldrh	r1, [r5, #12]
   ba2ac:	4620      	mov	r0, r4
   ba2ae:	f7ff f98c 	bl	b95ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba2b2:	2800      	cmp	r0, #0
   ba2b4:	d099      	beq.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   ba2b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba2b8:	2b00      	cmp	r3, #0
   ba2ba:	d096      	beq.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   ba2bc:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba2be:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   ba2c0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba2c4:	d001      	beq.n	ba2ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   ba2c6:	2e10      	cmp	r6, #16
   ba2c8:	d117      	bne.n	ba2fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   ba2ca:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   ba2cc:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   ba2ce:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   ba2d0:	2506      	movs	r5, #6
                        };
   ba2d2:	f88d 3015 	strb.w	r3, [sp, #21]
   ba2d6:	9104      	str	r1, [sp, #16]
   ba2d8:	f88d 2014 	strb.w	r2, [sp, #20]
   ba2dc:	9006      	str	r0, [sp, #24]
   ba2de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ba2e2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   ba2e4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   ba2e8:	9508      	str	r5, [sp, #32]
   ba2ea:	e883 0003 	stmia.w	r3, {r0, r1}
   ba2ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2f0:	a906      	add	r1, sp, #24
   ba2f2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba2f6:	4798      	blx	r3
   ba2f8:	e777      	b.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   ba2fa:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba2fc:	bf01      	itttt	eq
   ba2fe:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   ba300:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba302:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   ba306:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   ba308:	bf0f      	iteee	eq
   ba30a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   ba30e:	461a      	movne	r2, r3
   ba310:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   ba312:	461d      	movne	r5, r3
   ba314:	e7dd      	b.n	ba2d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba316:	89a9      	ldrh	r1, [r5, #12]
   ba318:	4620      	mov	r0, r4
   ba31a:	f7ff f956 	bl	b95ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   ba31e:	4601      	mov	r1, r0
   ba320:	2800      	cmp	r0, #0
   ba322:	f43f af62 	beq.w	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba326:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba328:	2b00      	cmp	r3, #0
   ba32a:	f43f af5e 	beq.w	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   ba32e:	686b      	ldr	r3, [r5, #4]
   ba330:	9306      	str	r3, [sp, #24]
   ba332:	aa06      	add	r2, sp, #24
   ba334:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba336:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba33a:	4798      	blx	r3
   ba33c:	e755      	b.n	ba1ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba33e:	bf00      	nop
   ba340:	000be19f 	.word	0x000be19f
   ba344:	000be103 	.word	0x000be103
   ba348:	000be1c5 	.word	0x000be1c5
   ba34c:	000be1e2 	.word	0x000be1e2

000ba350 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba350:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba352:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba354:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba356:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba358:	dd05      	ble.n	ba366 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   ba35a:	2114      	movs	r1, #20
   ba35c:	4369      	muls	r1, r5
   ba35e:	f7fc fcb7 	bl	b6cd0 <realloc>
            if (!d) {
   ba362:	b918      	cbnz	r0, ba36c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   ba364:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba366:	f7fc fcab 	bl	b6cc0 <free>
        T* d = nullptr;
   ba36a:	2000      	movs	r0, #0
        data_ = d;
   ba36c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba36e:	60a5      	str	r5, [r4, #8]
        return true;
   ba370:	2001      	movs	r0, #1
   ba372:	e7f7      	b.n	ba364 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000ba374 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   ba378:	2400      	movs	r4, #0
   ba37a:	e9c0 4400 	strd	r4, r4, [r0]
   ba37e:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba380:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba382:	6849      	ldr	r1, [r1, #4]
   ba384:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba386:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba388:	dd1a      	ble.n	ba3c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba38a:	f7ff ffe1 	bl	ba350 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba38e:	b1b8      	cbz	r0, ba3c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba390:	e9d8 9300 	ldrd	r9, r3, [r8]
   ba394:	f04f 0c14 	mov.w	ip, #20
   ba398:	f8d7 e000 	ldr.w	lr, [r7]
   ba39c:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   ba3a0:	eb09 0504 	add.w	r5, r9, r4
   ba3a4:	45ac      	cmp	ip, r5
   ba3a6:	d008      	beq.n	ba3ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   ba3a8:	eb1e 0604 	adds.w	r6, lr, r4
   ba3ac:	bf1f      	itttt	ne
   ba3ae:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   ba3b0:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   ba3b2:	682b      	ldrne	r3, [r5, #0]
   ba3b4:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   ba3b6:	3414      	adds	r4, #20
   ba3b8:	e7f2      	b.n	ba3a0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   ba3ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba3be:	607b      	str	r3, [r7, #4]
}
   ba3c0:	4638      	mov	r0, r7
   ba3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ba3c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   ba3c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   ba3ca:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   ba3ce:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba3d0:	6883      	ldr	r3, [r0, #8]
   ba3d2:	19e9      	adds	r1, r5, r7
   ba3d4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   ba3d6:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba3d8:	dc17      	bgt.n	ba40a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   ba3da:	2314      	movs	r3, #20
   ba3dc:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   ba3de:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba3e0:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   ba3e2:	fb03 f907 	mul.w	r9, r3, r7
   ba3e6:	435a      	muls	r2, r3
    T* const p = data_ + i;
   ba3e8:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba3ea:	1b52      	subs	r2, r2, r5
   ba3ec:	4631      	mov	r1, r6
   ba3ee:	eb06 0009 	add.w	r0, r6, r9
   ba3f2:	f002 f8bd 	bl	bc570 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   ba3f6:	464a      	mov	r2, r9
   ba3f8:	4641      	mov	r1, r8
   ba3fa:	4630      	mov	r0, r6
   ba3fc:	f002 f8aa 	bl	bc554 <memcpy>
    size_ += n;
   ba400:	6863      	ldr	r3, [r4, #4]
   ba402:	443b      	add	r3, r7
   ba404:	6063      	str	r3, [r4, #4]
}
   ba406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba40a:	f7ff ffa1 	bl	ba350 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba40e:	2800      	cmp	r0, #0
   ba410:	d1e3      	bne.n	ba3da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   ba412:	e7f8      	b.n	ba406 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000ba414 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba414:	b082      	sub	sp, #8
   ba416:	b570      	push	{r4, r5, r6, lr}
   ba418:	460c      	mov	r4, r1
   ba41a:	a904      	add	r1, sp, #16
   ba41c:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba420:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba424:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba426:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba428:	da17      	bge.n	ba45a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   ba42a:	2314      	movs	r3, #20
   ba42c:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   ba430:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   ba432:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   ba434:	435a      	muls	r2, r3
    T* const p = data_ + i;
   ba436:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba438:	1a52      	subs	r2, r2, r1
   ba43a:	18e0      	adds	r0, r4, r3
   ba43c:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   ba43e:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba440:	f002 f896 	bl	bc570 <memmove>
    new(p) T(std::move(value));
   ba444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   ba446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba448:	6833      	ldr	r3, [r6, #0]
   ba44a:	6023      	str	r3, [r4, #0]
    ++size_;
   ba44c:	686b      	ldr	r3, [r5, #4]
   ba44e:	3301      	adds	r3, #1
   ba450:	606b      	str	r3, [r5, #4]
}
   ba452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba456:	b002      	add	sp, #8
   ba458:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba45a:	3101      	adds	r1, #1
   ba45c:	f7ff ff78 	bl	ba350 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba460:	2800      	cmp	r0, #0
   ba462:	d1e2      	bne.n	ba42a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   ba464:	e7f5      	b.n	ba452 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000ba466 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   ba466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   ba46a:	2400      	movs	r4, #0
   ba46c:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   ba46e:	1e93      	subs	r3, r2, #2
   ba470:	e9c0 4400 	strd	r4, r4, [r0]
   ba474:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   ba476:	4605      	mov	r5, r0
   ba478:	460f      	mov	r7, r1
   ba47a:	4690      	mov	r8, r2
   ba47c:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   ba47e:	9305      	str	r3, [sp, #20]
    return size_;
   ba480:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   ba482:	428c      	cmp	r4, r1
   ba484:	da72      	bge.n	ba56c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   ba486:	6838      	ldr	r0, [r7, #0]
   ba488:	ab07      	add	r3, sp, #28
   ba48a:	4642      	mov	r2, r8
   ba48c:	1b09      	subs	r1, r1, r4
   ba48e:	4420      	add	r0, r4
   ba490:	f7fe fd8e 	bl	b8fb0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   ba494:	4606      	mov	r6, r0
   ba496:	2800      	cmp	r0, #0
   ba498:	d068      	beq.n	ba56c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   ba49a:	9b05      	ldr	r3, [sp, #20]
   ba49c:	2b01      	cmp	r3, #1
   ba49e:	d82f      	bhi.n	ba500 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba4a0:	f1a0 0b02 	sub.w	fp, r0, #2
   ba4a4:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   ba4a8:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   ba4ac:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   ba4b0:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba4b2:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   ba4b4:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba4b6:	d055      	beq.n	ba564 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   ba4b8:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   ba4ba:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   ba4be:	4413      	add	r3, r2
   ba4c0:	a808      	add	r0, sp, #32
   ba4c2:	78d9      	ldrb	r1, [r3, #3]
   ba4c4:	789b      	ldrb	r3, [r3, #2]
   ba4c6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   ba4ca:	f7fe fed6 	bl	b927a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   ba4ce:	f10d 0e20 	add.w	lr, sp, #32
   ba4d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   ba4d6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba4da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba4de:	f8de 3000 	ldr.w	r3, [lr]
   ba4e2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   ba4e6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   ba4ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   ba4ee:	ab0d      	add	r3, sp, #52	; 0x34
   ba4f0:	cb0c      	ldmia	r3, {r2, r3}
   ba4f2:	6869      	ldr	r1, [r5, #4]
   ba4f4:	4628      	mov	r0, r5
   ba4f6:	f7ff ff8d 	bl	ba414 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba4fa:	f109 0901 	add.w	r9, r9, #1
   ba4fe:	e7d7      	b.n	ba4b0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   ba500:	f1a8 0306 	sub.w	r3, r8, #6
   ba504:	2b01      	cmp	r3, #1
   ba506:	d82d      	bhi.n	ba564 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   ba508:	f1a0 0b02 	sub.w	fp, r0, #2
   ba50c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   ba510:	f04f 0900 	mov.w	r9, #0
   ba514:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   ba518:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   ba51a:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   ba51c:	d022      	beq.n	ba564 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   ba51e:	3302      	adds	r3, #2
    return data_[i];
   ba520:	6839      	ldr	r1, [r7, #0]
   ba522:	4423      	add	r3, r4
   ba524:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   ba528:	2201      	movs	r2, #1
   ba52a:	4419      	add	r1, r3
   ba52c:	a808      	add	r0, sp, #32
   ba52e:	f7fe fe85 	bl	b923c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   ba532:	f10d 0e20 	add.w	lr, sp, #32
   ba536:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   ba53a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba53e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba542:	f8de 3000 	ldr.w	r3, [lr]
   ba546:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   ba54a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   ba54e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   ba552:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   ba556:	6869      	ldr	r1, [r5, #4]
   ba558:	4628      	mov	r0, r5
   ba55a:	f7ff ff5b 	bl	ba414 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   ba55e:	f109 0901 	add.w	r9, r9, #1
   ba562:	e7d9      	b.n	ba518 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   ba564:	9b07      	ldr	r3, [sp, #28]
   ba566:	441c      	add	r4, r3
   ba568:	4434      	add	r4, r6
   ba56a:	e789      	b.n	ba480 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   ba56c:	4628      	mov	r0, r5
   ba56e:	b013      	add	sp, #76	; 0x4c
   ba570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba574 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   ba574:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   ba576:	2300      	movs	r3, #0
   ba578:	b085      	sub	sp, #20
   ba57a:	e9c0 3300 	strd	r3, r3, [r0]
   ba57e:	6083      	str	r3, [r0, #8]
   ba580:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   ba582:	2202      	movs	r2, #2
   ba584:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   ba586:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   ba588:	f7ff ff6d 	bl	ba466 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   ba58c:	a901      	add	r1, sp, #4
   ba58e:	4620      	mov	r0, r4
   ba590:	f7ff ff19 	bl	ba3c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   ba594:	a801      	add	r0, sp, #4
   ba596:	f7ff f9d3 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   ba59a:	2202      	movs	r2, #2
   ba59c:	4629      	mov	r1, r5
   ba59e:	a801      	add	r0, sp, #4
   ba5a0:	f7ff ff61 	bl	ba466 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   ba5a4:	a901      	add	r1, sp, #4
   ba5a6:	4620      	mov	r0, r4
   ba5a8:	f7ff ff0d 	bl	ba3c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   ba5ac:	a801      	add	r0, sp, #4
   ba5ae:	f7ff f9c7 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   ba5b2:	2203      	movs	r2, #3
   ba5b4:	4629      	mov	r1, r5
   ba5b6:	a801      	add	r0, sp, #4
   ba5b8:	f7ff ff55 	bl	ba466 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   ba5bc:	a901      	add	r1, sp, #4
   ba5be:	4620      	mov	r0, r4
   ba5c0:	f7ff ff01 	bl	ba3c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   ba5c4:	a801      	add	r0, sp, #4
   ba5c6:	f7ff f9bb 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   ba5ca:	2206      	movs	r2, #6
   ba5cc:	4629      	mov	r1, r5
   ba5ce:	a801      	add	r0, sp, #4
   ba5d0:	f7ff ff49 	bl	ba466 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   ba5d4:	a901      	add	r1, sp, #4
   ba5d6:	4620      	mov	r0, r4
   ba5d8:	f7ff fef5 	bl	ba3c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   ba5dc:	a801      	add	r0, sp, #4
   ba5de:	f7ff f9af 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   ba5e2:	2207      	movs	r2, #7
   ba5e4:	4629      	mov	r1, r5
   ba5e6:	a801      	add	r0, sp, #4
   ba5e8:	f7ff ff3d 	bl	ba466 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   ba5ec:	a901      	add	r1, sp, #4
   ba5ee:	4620      	mov	r0, r4
   ba5f0:	f7ff fee9 	bl	ba3c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   ba5f4:	a801      	add	r0, sp, #4
   ba5f6:	f7ff f9a3 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   ba5fa:	4620      	mov	r0, r4
   ba5fc:	b005      	add	sp, #20
   ba5fe:	bd30      	pop	{r4, r5, pc}

000ba600 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   ba600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba604:	b08b      	sub	sp, #44	; 0x2c
   ba606:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   ba608:	f100 0144 	add.w	r1, r0, #68	; 0x44
   ba60c:	a801      	add	r0, sp, #4
   ba60e:	f7ff feb1 	bl	ba374 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   ba612:	9b02      	ldr	r3, [sp, #8]
   ba614:	2b00      	cmp	r3, #0
   ba616:	dd4a      	ble.n	ba6ae <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   ba618:	f104 0114 	add.w	r1, r4, #20
   ba61c:	a804      	add	r0, sp, #16
   ba61e:	f7ff ffa9 	bl	ba574 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   ba622:	f104 0108 	add.w	r1, r4, #8
   ba626:	a807      	add	r0, sp, #28
   ba628:	f7ff ffa4 	bl	ba574 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   ba62c:	9d05      	ldr	r5, [sp, #20]
   ba62e:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   ba630:	2d00      	cmp	r5, #0
   ba632:	dc01      	bgt.n	ba638 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   ba634:	2e00      	cmp	r6, #0
   ba636:	dd38      	ble.n	ba6aa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   ba638:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   ba63a:	9f02      	ldr	r7, [sp, #8]
    return data_;
   ba63c:	f8dd 8010 	ldr.w	r8, [sp, #16]
   ba640:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   ba644:	2314      	movs	r3, #20
   ba646:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   ba64a:	fb03 8505 	mla	r5, r3, r5, r8
   ba64e:	fb03 9606 	mla	r6, r3, r6, r9
   ba652:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   ba654:	45ba      	cmp	sl, r7
   ba656:	d028      	beq.n	ba6aa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   ba658:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   ba65a:	45ab      	cmp	fp, r5
   ba65c:	d015      	beq.n	ba68a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   ba65e:	4659      	mov	r1, fp
   ba660:	4650      	mov	r0, sl
   ba662:	f7fe fe14 	bl	b928e <_ZNK8particle7BleUuideqERKS0_>
   ba666:	f10b 0b14 	add.w	fp, fp, #20
   ba66a:	4604      	mov	r4, r0
   ba66c:	2800      	cmp	r0, #0
   ba66e:	d0f4      	beq.n	ba65a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   ba670:	a807      	add	r0, sp, #28
   ba672:	f7ff f965 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   ba676:	a804      	add	r0, sp, #16
   ba678:	f7ff f962 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   ba67c:	a801      	add	r0, sp, #4
   ba67e:	f7ff f95f 	bl	b9940 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   ba682:	4620      	mov	r0, r4
   ba684:	b00b      	add	sp, #44	; 0x2c
   ba686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba68a:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   ba68c:	45b3      	cmp	fp, r6
   ba68e:	d009      	beq.n	ba6a4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   ba690:	4659      	mov	r1, fp
   ba692:	4650      	mov	r0, sl
   ba694:	f7fe fdfb 	bl	b928e <_ZNK8particle7BleUuideqERKS0_>
   ba698:	f10b 0b14 	add.w	fp, fp, #20
   ba69c:	4604      	mov	r4, r0
   ba69e:	2800      	cmp	r0, #0
   ba6a0:	d0f4      	beq.n	ba68c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   ba6a2:	e7e5      	b.n	ba670 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   ba6a4:	f10a 0a14 	add.w	sl, sl, #20
   ba6a8:	e7d4      	b.n	ba654 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   ba6aa:	2400      	movs	r4, #0
   ba6ac:	e7e0      	b.n	ba670 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   ba6ae:	2401      	movs	r4, #1
   ba6b0:	e7e4      	b.n	ba67c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000ba6b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   ba6b2:	b538      	push	{r3, r4, r5, lr}
   ba6b4:	4605      	mov	r5, r0
   ba6b6:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   ba6b8:	f7fd fb09 	bl	b7cce <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6bc:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba6be:	68a2      	ldr	r2, [r4, #8]
   ba6c0:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba6c2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba6c4:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba6c6:	68e2      	ldr	r2, [r4, #12]
   ba6c8:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba6ca:	60e3      	str	r3, [r4, #12]
      }
   ba6cc:	bd38      	pop	{r3, r4, r5, pc}

000ba6ce <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   ba6ce:	b530      	push	{r4, r5, lr}
   ba6d0:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   ba6d2:	2300      	movs	r3, #0
   ba6d4:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   ba6d6:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   ba6d8:	4605      	mov	r5, r0
   ba6da:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   ba6dc:	b133      	cbz	r3, ba6ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba6de:	2202      	movs	r2, #2
   ba6e0:	4668      	mov	r0, sp
   ba6e2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba6e4:	68e3      	ldr	r3, [r4, #12]
   ba6e6:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   ba6e8:	68a3      	ldr	r3, [r4, #8]
   ba6ea:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   ba6ec:	4629      	mov	r1, r5
   ba6ee:	4668      	mov	r0, sp
   ba6f0:	f7ff ffdf 	bl	ba6b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   ba6f4:	4668      	mov	r0, sp
   ba6f6:	f7fd fae1 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
      }
   ba6fa:	b005      	add	sp, #20
   ba6fc:	bd30      	pop	{r4, r5, pc}

000ba6fe <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   ba6fe:	b538      	push	{r3, r4, r5, lr}
   ba700:	460d      	mov	r5, r1
      { return _M_ptr; }
   ba702:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   ba704:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   ba706:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   ba708:	b123      	cbz	r3, ba714 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   ba70a:	6828      	ldr	r0, [r5, #0]
   ba70c:	314c      	adds	r1, #76	; 0x4c
   ba70e:	304c      	adds	r0, #76	; 0x4c
   ba710:	f7ff ffdd 	bl	ba6ce <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   ba714:	4620      	mov	r0, r4
   ba716:	682b      	ldr	r3, [r5, #0]
   ba718:	f840 3b04 	str.w	r3, [r0], #4
   ba71c:	6869      	ldr	r1, [r5, #4]
   ba71e:	f7fe fcef 	bl	b9100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   ba722:	4620      	mov	r0, r4
   ba724:	bd38      	pop	{r3, r4, r5, pc}

000ba726 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   ba726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba72a:	4604      	mov	r4, r0
   ba72c:	b087      	sub	sp, #28
    WiringBleLock lk;
   ba72e:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   ba730:	460e      	mov	r6, r1
   ba732:	4617      	mov	r7, r2
    WiringBleLock lk;
   ba734:	f7fe fd0a 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba738:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   ba73a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   ba73e:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   ba742:	4544      	cmp	r4, r8
   ba744:	46a1      	mov	r9, r4
   ba746:	d016      	beq.n	ba776 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   ba748:	4621      	mov	r1, r4
   ba74a:	a801      	add	r0, sp, #4
   ba74c:	f7fe ff68 	bl	b9620 <_ZNK8particle17BleCharacteristic4UUIDEv>
   ba750:	4639      	mov	r1, r7
   ba752:	a801      	add	r0, sp, #4
   ba754:	f7fe fd9b 	bl	b928e <_ZNK8particle7BleUuideqERKS0_>
   ba758:	3408      	adds	r4, #8
   ba75a:	4605      	mov	r5, r0
   ba75c:	2800      	cmp	r0, #0
   ba75e:	d0f0      	beq.n	ba742 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   ba760:	4649      	mov	r1, r9
   ba762:	4630      	mov	r0, r6
   ba764:	f7ff ffcb 	bl	ba6fe <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   ba768:	4668      	mov	r0, sp
   ba76a:	f7fe fcfd 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba76e:	4628      	mov	r0, r5
   ba770:	b007      	add	sp, #28
   ba772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   ba776:	2500      	movs	r5, #0
   ba778:	e7f6      	b.n	ba768 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000ba77a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   ba77a:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   ba77c:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   ba77e:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   ba780:	344c      	adds	r4, #76	; 0x4c
   ba782:	b1b9      	cbz	r1, ba7b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   ba784:	e9cd 1200 	strd	r1, r2, [sp]
   ba788:	a802      	add	r0, sp, #8
   ba78a:	4669      	mov	r1, sp
   ba78c:	f7ff f91e 	bl	b99cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   ba790:	2300      	movs	r3, #0
	__x.swap(*this);
   ba792:	a906      	add	r1, sp, #24
   ba794:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   ba796:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   ba798:	f7ff ff8b 	bl	ba6b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   ba79c:	4621      	mov	r1, r4
   ba79e:	a806      	add	r0, sp, #24
   ba7a0:	f7ff ff87 	bl	ba6b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   ba7a4:	a806      	add	r0, sp, #24
   ba7a6:	f7fd fa89 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
   ba7aa:	a802      	add	r0, sp, #8
   ba7ac:	f7fd fa86 	bl	b7cbc <_ZNSt14_Function_baseD1Ev>
}
   ba7b0:	b00a      	add	sp, #40	; 0x28
   ba7b2:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   ba7b4:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   ba7b6:	e7eb      	b.n	ba790 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000ba7b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba7b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba7bc:	4604      	mov	r4, r0
   ba7be:	460d      	mov	r5, r1
   ba7c0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba7c2:	d914      	bls.n	ba7ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba7c4:	4290      	cmp	r0, r2
   ba7c6:	d213      	bcs.n	ba7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba7c8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba7cc:	1a75      	subs	r5, r6, r1
   ba7ce:	f1a1 0708 	sub.w	r7, r1, #8
   ba7d2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba7d4:	42b7      	cmp	r7, r6
   ba7d6:	d018      	beq.n	ba80a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba7d8:	b11c      	cbz	r4, ba7e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   ba7da:	4631      	mov	r1, r6
   ba7dc:	4620      	mov	r0, r4
   ba7de:	f7ff f922 	bl	b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   ba7e2:	1d30      	adds	r0, r6, #4
   ba7e4:	f7fc fc90 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba7e8:	3e08      	subs	r6, #8
   ba7ea:	3c08      	subs	r4, #8
   ba7ec:	e7f2      	b.n	ba7d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba7ee:	d00c      	beq.n	ba80a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba7f0:	42b5      	cmp	r5, r6
   ba7f2:	d00a      	beq.n	ba80a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba7f4:	b11c      	cbz	r4, ba7fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba7f6:	4629      	mov	r1, r5
   ba7f8:	4620      	mov	r0, r4
   ba7fa:	f7ff f914 	bl	b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba7fe:	1d28      	adds	r0, r5, #4
   ba800:	f7fc fc82 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba804:	3508      	adds	r5, #8
   ba806:	3408      	adds	r4, #8
   ba808:	e7f2      	b.n	ba7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba80c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba80e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba810:	4605      	mov	r5, r0
        if (n > 0) {
   ba812:	dd11      	ble.n	ba838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba814:	00f0      	lsls	r0, r6, #3
   ba816:	f7fc fa4b 	bl	b6cb0 <malloc>
            if (!d) {
   ba81a:	4604      	mov	r4, r0
   ba81c:	b158      	cbz	r0, ba836 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba81e:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba822:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba826:	f7ff ffc7 	bl	ba7b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba82a:	6828      	ldr	r0, [r5, #0]
   ba82c:	f7fc fa48 	bl	b6cc0 <free>
        data_ = d;
   ba830:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba832:	60ae      	str	r6, [r5, #8]
        return true;
   ba834:	2001      	movs	r0, #1
    }
   ba836:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba838:	2400      	movs	r4, #0
   ba83a:	e7f6      	b.n	ba82a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000ba83c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   ba840:	2300      	movs	r3, #0
   ba842:	e9c0 3300 	strd	r3, r3, [r0]
   ba846:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba848:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba84a:	6849      	ldr	r1, [r1, #4]
   ba84c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba84e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba850:	dd13      	ble.n	ba87a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   ba852:	f7ff ffdb 	bl	ba80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba856:	b180      	cbz	r0, ba87a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba858:	e9d5 6300 	ldrd	r6, r3, [r5]
   ba85c:	6827      	ldr	r7, [r4, #0]
   ba85e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   ba862:	45b0      	cmp	r8, r6
   ba864:	d007      	beq.n	ba876 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   ba866:	b11f      	cbz	r7, ba870 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   ba868:	4631      	mov	r1, r6
   ba86a:	4638      	mov	r0, r7
   ba86c:	f7ff f8db 	bl	b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   ba870:	3608      	adds	r6, #8
   ba872:	3708      	adds	r7, #8
   ba874:	e7f5      	b.n	ba862 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   ba876:	686b      	ldr	r3, [r5, #4]
   ba878:	6063      	str	r3, [r4, #4]
}
   ba87a:	4620      	mov	r0, r4
   ba87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba880 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   ba880:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba882:	460d      	mov	r5, r1
   ba884:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba886:	a801      	add	r0, sp, #4
   ba888:	f7fe fc60 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   ba88c:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   ba88e:	4620      	mov	r0, r4
   ba890:	310c      	adds	r1, #12
   ba892:	f7ff ffd3 	bl	ba83c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   ba896:	a801      	add	r0, sp, #4
   ba898:	f7fe fc66 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba89c:	4620      	mov	r0, r4
   ba89e:	b003      	add	sp, #12
   ba8a0:	bd30      	pop	{r4, r5, pc}

000ba8a2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   ba8a2:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   ba8a4:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   ba8a6:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   ba8a8:	4605      	mov	r5, r0
   ba8aa:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   ba8ac:	b933      	cbnz	r3, ba8bc <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   ba8ae:	4608      	mov	r0, r1
   ba8b0:	f7fe fbe0 	bl	b9074 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   ba8b4:	b910      	cbnz	r0, ba8bc <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   ba8b6:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   ba8b8:	2201      	movs	r2, #1
   ba8ba:	729a      	strb	r2, [r3, #10]
    return services();
   ba8bc:	4628      	mov	r0, r5
   ba8be:	4621      	mov	r1, r4
   ba8c0:	f7ff ffde 	bl	ba880 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   ba8c4:	4628      	mov	r0, r5
   ba8c6:	bd38      	pop	{r3, r4, r5, pc}

000ba8c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba8c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba8ca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba8cc:	6845      	ldr	r5, [r0, #4]
   ba8ce:	4668      	mov	r0, sp
   ba8d0:	f7ff f8a9 	bl	b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8d4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba8d8:	4299      	cmp	r1, r3
   ba8da:	da10      	bge.n	ba8fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   ba8dc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba8de:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba8e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   ba8e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba8e8:	4629      	mov	r1, r5
   ba8ea:	f105 0008 	add.w	r0, r5, #8
   ba8ee:	f7ff ff63 	bl	ba7b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba8f2:	b98d      	cbnz	r5, ba918 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   ba8f4:	6863      	ldr	r3, [r4, #4]
   ba8f6:	3301      	adds	r3, #1
   ba8f8:	6063      	str	r3, [r4, #4]
    return true;
   ba8fa:	2601      	movs	r6, #1
   ba8fc:	e006      	b.n	ba90c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8fe:	3101      	adds	r1, #1
   ba900:	4620      	mov	r0, r4
   ba902:	f7ff ff83 	bl	ba80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba906:	4606      	mov	r6, r0
   ba908:	2800      	cmp	r0, #0
   ba90a:	d1e7      	bne.n	ba8dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   ba90c:	a801      	add	r0, sp, #4
   ba90e:	f7fc fbfb 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba912:	4630      	mov	r0, r6
   ba914:	b002      	add	sp, #8
   ba916:	bd70      	pop	{r4, r5, r6, pc}
   ba918:	4669      	mov	r1, sp
   ba91a:	4628      	mov	r0, r5
   ba91c:	f7ff f883 	bl	b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba920:	e7e8      	b.n	ba8f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000ba924 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   ba924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   ba928:	f8df 90b8 	ldr.w	r9, [pc, #184]	; ba9e4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   ba92c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ba9e8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   ba930:	b093      	sub	sp, #76	; 0x4c
   ba932:	4605      	mov	r5, r0
   ba934:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   ba936:	2700      	movs	r7, #0
   ba938:	682b      	ldr	r3, [r5, #0]
   ba93a:	42bb      	cmp	r3, r7
   ba93c:	d94e      	bls.n	ba9dc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   ba93e:	a803      	add	r0, sp, #12
   ba940:	f7fe feb4 	bl	b96ac <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   ba944:	261c      	movs	r6, #28
   ba946:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   ba948:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   ba94a:	437e      	muls	r6, r7
   ba94c:	4432      	add	r2, r6
   ba94e:	f10d 0c14 	add.w	ip, sp, #20
   ba952:	1d13      	adds	r3, r2, #4
   ba954:	46e3      	mov	fp, ip
   ba956:	3214      	adds	r2, #20
   ba958:	6818      	ldr	r0, [r3, #0]
   ba95a:	6859      	ldr	r1, [r3, #4]
   ba95c:	46e6      	mov	lr, ip
   ba95e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   ba962:	3308      	adds	r3, #8
   ba964:	4293      	cmp	r3, r2
   ba966:	46f4      	mov	ip, lr
   ba968:	d1f6      	bne.n	ba958 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   ba96a:	6818      	ldr	r0, [r3, #0]
   ba96c:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   ba970:	4659      	mov	r1, fp
   ba972:	a80a      	add	r0, sp, #40	; 0x28
   ba974:	f7fe fc40 	bl	b91f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   ba978:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   ba97c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   ba980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba982:	f8dc 3000 	ldr.w	r3, [ip]
   ba986:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   ba988:	686b      	ldr	r3, [r5, #4]
   ba98a:	9a03      	ldr	r2, [sp, #12]
   ba98c:	4433      	add	r3, r6
   ba98e:	a903      	add	r1, sp, #12
   ba990:	8b1b      	ldrh	r3, [r3, #24]
   ba992:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   ba994:	686b      	ldr	r3, [r5, #4]
   ba996:	4433      	add	r3, r6
   ba998:	8b5b      	ldrh	r3, [r3, #26]
   ba99a:	82d3      	strh	r3, [r2, #22]
        return services_;
   ba99c:	f8d8 0000 	ldr.w	r0, [r8]
   ba9a0:	f100 040c 	add.w	r4, r0, #12
   ba9a4:	a80a      	add	r0, sp, #40	; 0x28
   ba9a6:	f7ff f83e 	bl	b9a26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   ba9aa:	4620      	mov	r0, r4
   ba9ac:	a90a      	add	r1, sp, #40	; 0x28
   ba9ae:	f7ff ff8b 	bl	ba8c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   ba9b2:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba9b4:	a80b      	add	r0, sp, #44	; 0x2c
   ba9b6:	f7fc fba7 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba9ba:	b954      	cbnz	r4, ba9d2 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   ba9bc:	2320      	movs	r3, #32
   ba9be:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   ba9c2:	f8cd 9000 	str.w	r9, [sp]
   ba9c6:	4623      	mov	r3, r4
   ba9c8:	aa0a      	add	r2, sp, #40	; 0x28
   ba9ca:	4651      	mov	r1, sl
   ba9cc:	2032      	movs	r0, #50	; 0x32
   ba9ce:	f7fc f8bb 	bl	b6b48 <log_message>
   ba9d2:	a804      	add	r0, sp, #16
   ba9d4:	f7fc fb98 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   ba9d8:	3701      	adds	r7, #1
   ba9da:	e7ad      	b.n	ba938 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   ba9dc:	b013      	add	sp, #76	; 0x4c
   ba9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba9e2:	bf00      	nop
   ba9e4:	000be201 	.word	0x000be201
   ba9e8:	000be103 	.word	0x000be103

000ba9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba9ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba9f0:	4604      	mov	r4, r0
   ba9f2:	460d      	mov	r5, r1
   ba9f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba9f6:	d914      	bls.n	baa22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba9f8:	4290      	cmp	r0, r2
   ba9fa:	d213      	bcs.n	baa24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba9fc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   baa00:	1a75      	subs	r5, r6, r1
   baa02:	f1a1 0708 	sub.w	r7, r1, #8
   baa06:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   baa08:	42b7      	cmp	r7, r6
   baa0a:	d018      	beq.n	baa3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   baa0c:	b11c      	cbz	r4, baa16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   baa0e:	4631      	mov	r1, r6
   baa10:	4620      	mov	r0, r4
   baa12:	f7fe fffa 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   baa16:	1d30      	adds	r0, r6, #4
   baa18:	f7fc fb76 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   baa1c:	3e08      	subs	r6, #8
   baa1e:	3c08      	subs	r4, #8
   baa20:	e7f2      	b.n	baa08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   baa22:	d00c      	beq.n	baa3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   baa24:	42b5      	cmp	r5, r6
   baa26:	d00a      	beq.n	baa3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   baa28:	b11c      	cbz	r4, baa32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   baa2a:	4629      	mov	r1, r5
   baa2c:	4620      	mov	r0, r4
   baa2e:	f7fe ffec 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   baa32:	1d28      	adds	r0, r5, #4
   baa34:	f7fc fb68 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   baa38:	3508      	adds	r5, #8
   baa3a:	3408      	adds	r4, #8
   baa3c:	e7f2      	b.n	baa24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   baa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baa40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   baa40:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   baa42:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   baa44:	4605      	mov	r5, r0
        if (n > 0) {
   baa46:	dd11      	ble.n	baa6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   baa48:	00f0      	lsls	r0, r6, #3
   baa4a:	f7fc f931 	bl	b6cb0 <malloc>
            if (!d) {
   baa4e:	4604      	mov	r4, r0
   baa50:	b158      	cbz	r0, baa6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   baa52:	e9d5 1200 	ldrd	r1, r2, [r5]
   baa56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   baa5a:	f7ff ffc7 	bl	ba9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   baa5e:	6828      	ldr	r0, [r5, #0]
   baa60:	f7fc f92e 	bl	b6cc0 <free>
        data_ = d;
   baa64:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   baa66:	60ae      	str	r6, [r5, #8]
        return true;
   baa68:	2001      	movs	r0, #1
    }
   baa6a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   baa6c:	2400      	movs	r4, #0
   baa6e:	e7f6      	b.n	baa5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000baa70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   baa74:	2300      	movs	r3, #0
   baa76:	e9c0 3300 	strd	r3, r3, [r0]
   baa7a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baa7c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baa7e:	6849      	ldr	r1, [r1, #4]
   baa80:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baa82:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baa84:	dd13      	ble.n	baaae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   baa86:	f7ff ffdb 	bl	baa40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   baa8a:	b180      	cbz	r0, baaae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baa8c:	e9d5 6300 	ldrd	r6, r3, [r5]
   baa90:	6827      	ldr	r7, [r4, #0]
   baa92:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   baa96:	45b0      	cmp	r8, r6
   baa98:	d007      	beq.n	baaaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   baa9a:	b11f      	cbz	r7, baaa4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   baa9c:	4631      	mov	r1, r6
   baa9e:	4638      	mov	r0, r7
   baaa0:	f7fe ffb3 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   baaa4:	3608      	adds	r6, #8
   baaa6:	3708      	adds	r7, #8
   baaa8:	e7f5      	b.n	baa96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   baaaa:	686b      	ldr	r3, [r5, #4]
   baaac:	6063      	str	r3, [r4, #4]
}
   baaae:	4620      	mov	r0, r4
   baab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000baab4 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   baab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baab6:	460d      	mov	r5, r1
   baab8:	4604      	mov	r4, r0
    WiringBleLock lk;
   baaba:	a801      	add	r0, sp, #4
   baabc:	f7fe fb46 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   baac0:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   baac2:	4620      	mov	r0, r4
   baac4:	3118      	adds	r1, #24
   baac6:	f7ff ffd3 	bl	baa70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   baaca:	a801      	add	r0, sp, #4
   baacc:	f7fe fb4c 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   baad0:	4620      	mov	r0, r4
   baad2:	b003      	add	sp, #12
   baad4:	bd30      	pop	{r4, r5, pc}

000baad6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   baad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   baad8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   baada:	6845      	ldr	r5, [r0, #4]
   baadc:	4668      	mov	r0, sp
   baade:	f7fe ff94 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baae2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   baae6:	4299      	cmp	r1, r3
   baae8:	da10      	bge.n	bab0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   baaea:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   baaec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baaee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   baaf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   baaf6:	4629      	mov	r1, r5
   baaf8:	f105 0008 	add.w	r0, r5, #8
   baafc:	f7ff ff76 	bl	ba9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bab00:	b98d      	cbnz	r5, bab26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bab02:	6863      	ldr	r3, [r4, #4]
   bab04:	3301      	adds	r3, #1
   bab06:	6063      	str	r3, [r4, #4]
    return true;
   bab08:	2601      	movs	r6, #1
   bab0a:	e006      	b.n	bab1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bab0c:	3101      	adds	r1, #1
   bab0e:	4620      	mov	r0, r4
   bab10:	f7ff ff96 	bl	baa40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bab14:	4606      	mov	r6, r0
   bab16:	2800      	cmp	r0, #0
   bab18:	d1e7      	bne.n	baaea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bab1a:	a801      	add	r0, sp, #4
   bab1c:	f7fc faf4 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bab20:	4630      	mov	r0, r6
   bab22:	b002      	add	sp, #8
   bab24:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bab26:	4669      	mov	r1, sp
   bab28:	4628      	mov	r0, r5
   bab2a:	f7fe ff6e 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   bab2e:	e7e8      	b.n	bab02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bab30 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bab30:	b5f0      	push	{r4, r5, r6, r7, lr}
   bab32:	b085      	sub	sp, #20
   bab34:	4605      	mov	r5, r0
    WiringBleLock lk;
   bab36:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bab38:	460c      	mov	r4, r1
   bab3a:	4617      	mov	r7, r2
    WiringBleLock lk;
   bab3c:	f7fe fb06 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bab40:	2300      	movs	r3, #0
   bab42:	e9c5 3300 	strd	r3, r3, [r5]
   bab46:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bab48:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bab4a:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bab4e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bab52:	42b4      	cmp	r4, r6
   bab54:	d011      	beq.n	bab7a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bab56:	6838      	ldr	r0, [r7, #0]
   bab58:	4621      	mov	r1, r4
   bab5a:	f7fe fd21 	bl	b95a0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bab5e:	b150      	cbz	r0, bab76 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bab60:	4621      	mov	r1, r4
   bab62:	a802      	add	r0, sp, #8
   bab64:	f7fe ff51 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   bab68:	a902      	add	r1, sp, #8
   bab6a:	4628      	mov	r0, r5
   bab6c:	f7ff ffb3 	bl	baad6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bab70:	a803      	add	r0, sp, #12
   bab72:	f7fc fac9 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bab76:	3408      	adds	r4, #8
   bab78:	e7eb      	b.n	bab52 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bab7a:	a801      	add	r0, sp, #4
   bab7c:	f7fe faf4 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bab80:	4628      	mov	r0, r5
   bab82:	b005      	add	sp, #20
   bab84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bab88 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bab88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bab8c:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bab8e:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bab90:	b091      	sub	sp, #68	; 0x44
   bab92:	4606      	mov	r6, r0
   bab94:	460f      	mov	r7, r1
   bab96:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bab98:	b933      	cbnz	r3, baba8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bab9a:	e9c0 3300 	strd	r3, r3, [r0]
   bab9e:	6083      	str	r3, [r0, #8]
}
   baba0:	4630      	mov	r0, r6
   baba2:	b011      	add	sp, #68	; 0x44
   baba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   baba8:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   babaa:	7e0d      	ldrb	r5, [r1, #24]
   babac:	2d00      	cmp	r5, #0
   babae:	d158      	bne.n	bac62 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   babb0:	2320      	movs	r3, #32
   babb2:	462a      	mov	r2, r5
   babb4:	a803      	add	r0, sp, #12
   babb6:	e9cd 3508 	strd	r3, r5, [sp, #32]
   babba:	f7fe fc64 	bl	b9486 <_ZNK8particle7BleUuid8toStringEb>
   babbe:	9b03      	ldr	r3, [sp, #12]
   babc0:	9301      	str	r3, [sp, #4]
   babc2:	4b2b      	ldr	r3, [pc, #172]	; (bac70 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   babc4:	492b      	ldr	r1, [pc, #172]	; (bac74 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   babc6:	9300      	str	r3, [sp, #0]
   babc8:	aa08      	add	r2, sp, #32
   babca:	462b      	mov	r3, r5
   babcc:	2001      	movs	r0, #1
   babce:	f7fb ffbb 	bl	b6b48 <log_message>
   babd2:	a803      	add	r0, sp, #12
   babd4:	f000 fbb8 	bl	bb348 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   babd8:	231c      	movs	r3, #28
   babda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   babde:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   babe2:	8a9a      	ldrh	r2, [r3, #20]
   babe4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   babe8:	8adb      	ldrh	r3, [r3, #22]
   babea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   babee:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   babf0:	4a21      	ldr	r2, [pc, #132]	; (bac78 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   babf2:	8818      	ldrh	r0, [r3, #0]
   babf4:	9500      	str	r5, [sp, #0]
   babf6:	a908      	add	r1, sp, #32
   babf8:	f7fb ff14 	bl	b6a24 <hal_ble_gatt_client_discover_characteristics>
   babfc:	2800      	cmp	r0, #0
   babfe:	db30      	blt.n	bac62 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bac00:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bac02:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bac06:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bac0a:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bac0c:	f1a4 0308 	sub.w	r3, r4, #8
   bac10:	4599      	cmp	r9, r3
   bac12:	d022      	beq.n	bac5a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bac14:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bac18:	89db      	ldrh	r3, [r3, #14]
   bac1a:	2b00      	cmp	r3, #0
   bac1c:	d0f5      	beq.n	bac0a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bac1e:	2210      	movs	r2, #16
   bac20:	2100      	movs	r1, #0
   bac22:	eb0d 0002 	add.w	r0, sp, r2
   bac26:	9503      	str	r5, [sp, #12]
   bac28:	f001 fcbc 	bl	bc5a4 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bac2c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bac30:	89d9      	ldrh	r1, [r3, #14]
   bac32:	683b      	ldr	r3, [r7, #0]
   bac34:	aa03      	add	r2, sp, #12
   bac36:	8818      	ldrh	r0, [r3, #0]
   bac38:	9500      	str	r5, [sp, #0]
   bac3a:	2313      	movs	r3, #19
   bac3c:	f7fb fefc 	bl	b6a38 <hal_ble_gatt_client_read>
                if (len > 0) {
   bac40:	2800      	cmp	r0, #0
   bac42:	d0e2      	beq.n	bac0a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bac44:	ab10      	add	r3, sp, #64	; 0x40
   bac46:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bac48:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bac4a:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bac4e:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bac52:	303c      	adds	r0, #60	; 0x3c
   bac54:	f000 fc19 	bl	bb48a <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bac58:	e7d7      	b.n	bac0a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bac5a:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bac5e:	2201      	movs	r2, #1
   bac60:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bac62:	4642      	mov	r2, r8
   bac64:	4639      	mov	r1, r7
   bac66:	4630      	mov	r0, r6
   bac68:	f7ff ff62 	bl	bab30 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bac6c:	e798      	b.n	baba0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bac6e:	bf00      	nop
   bac70:	000be226 	.word	0x000be226
   bac74:	000be103 	.word	0x000be103
   bac78:	000bae21 	.word	0x000bae21

000bac7c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bac7e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bac80:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bac82:	b085      	sub	sp, #20
   bac84:	4606      	mov	r6, r0
   bac86:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bac88:	b92b      	cbnz	r3, bac96 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bac8a:	a801      	add	r0, sp, #4
   bac8c:	f7ff fe09 	bl	ba8a2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bac90:	a801      	add	r0, sp, #4
   bac92:	f7fe fee3 	bl	b9a5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bac96:	682b      	ldr	r3, [r5, #0]
   bac98:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bac9c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   baca0:	42bc      	cmp	r4, r7
   baca2:	d009      	beq.n	bacb8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   baca4:	4622      	mov	r2, r4
   baca6:	4629      	mov	r1, r5
   baca8:	a801      	add	r0, sp, #4
   bacaa:	f7ff ff6d 	bl	bab88 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bacae:	a801      	add	r0, sp, #4
   bacb0:	f7fe fee6 	bl	b9a80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bacb4:	3408      	adds	r4, #8
   bacb6:	e7f3      	b.n	baca0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bacb8:	4630      	mov	r0, r6
   bacba:	4629      	mov	r1, r5
   bacbc:	f7ff fefa 	bl	baab4 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bacc0:	4630      	mov	r0, r6
   bacc2:	b005      	add	sp, #20
   bacc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bacc8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bacc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baccc:	4605      	mov	r5, r0
   bacce:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bacd0:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bacd2:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bacd4:	460f      	mov	r7, r1
    return address_;
   bacd6:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bacd8:	4698      	mov	r8, r3
    return address_;
   bacda:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bacdc:	4b41      	ldr	r3, [pc, #260]	; (bade4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bacde:	9304      	str	r3, [sp, #16]
    return address_;
   bace0:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bace2:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bace4:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bace8:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bacec:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bacf0:	f7fe fda8 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bacf4:	4b3c      	ldr	r3, [pc, #240]	; (bade8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bacf6:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bacf8:	f7fe fda4 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bacfc:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bacfe:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bad00:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bad02:	464a      	mov	r2, r9
   bad04:	a804      	add	r0, sp, #16
   bad06:	f7fb fea1 	bl	b6a4c <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bad0a:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bad0c:	4604      	mov	r4, r0
   bad0e:	b138      	cbz	r0, bad20 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bad10:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bad12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bad16:	801a      	strh	r2, [r3, #0]
}
   bad18:	4620      	mov	r0, r4
   bad1a:	b013      	add	sp, #76	; 0x4c
   bad1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bad20:	4639      	mov	r1, r7
   bad22:	4628      	mov	r0, r5
   bad24:	f7fe fd12 	bl	b974c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bad28:	a803      	add	r0, sp, #12
   bad2a:	f7fe fa0f 	bl	b914c <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bad2e:	f7fe fd89 	bl	b9844 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bad32:	6807      	ldr	r7, [r0, #0]
   bad34:	4629      	mov	r1, r5
   bad36:	3718      	adds	r7, #24
   bad38:	4630      	mov	r0, r6
   bad3a:	f7fe fe7e 	bl	b9a3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bad3e:	4631      	mov	r1, r6
   bad40:	4638      	mov	r0, r7
   bad42:	f7ff f9ae 	bl	ba0a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bad46:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bad48:	a80b      	add	r0, sp, #44	; 0x2c
   bad4a:	f7fc f9dd 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad4e:	f04f 0920 	mov.w	r9, #32
   bad52:	bb1f      	cbnz	r7, bad9c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bad54:	4632      	mov	r2, r6
   bad56:	4b25      	ldr	r3, [pc, #148]	; (badec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   bad58:	4e25      	ldr	r6, [pc, #148]	; (badf0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bad5a:	4926      	ldr	r1, [pc, #152]	; (badf4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bad5c:	9300      	str	r3, [sp, #0]
   bad5e:	2032      	movs	r0, #50	; 0x32
   bad60:	4623      	mov	r3, r4
   bad62:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bad66:	f7fb feef 	bl	b6b48 <log_message>
   bad6a:	6830      	ldr	r0, [r6, #0]
   bad6c:	f7fb fe24 	bl	b69b8 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bad70:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bad72:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bad76:	4621      	mov	r1, r4
   bad78:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bad7a:	4c1f      	ldr	r4, [pc, #124]	; (badf8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bad7c:	f7fb fe3e 	bl	b69fc <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bad80:	6830      	ldr	r0, [r6, #0]
   bad82:	f7fb fe11 	bl	b69a8 <os_mutex_recursive_lock>
        locked_ = true;
   bad86:	2301      	movs	r3, #1
   bad88:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bad8c:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bad8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bad92:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bad94:	a803      	add	r0, sp, #12
   bad96:	f7fe f9e7 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
   bad9a:	e7bd      	b.n	bad18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bad9c:	a803      	add	r0, sp, #12
   bad9e:	f7fe f9e3 	bl	b9168 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bada2:	4b16      	ldr	r3, [pc, #88]	; (badfc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bada4:	9300      	str	r3, [sp, #0]
   bada6:	4913      	ldr	r1, [pc, #76]	; (badf4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bada8:	4623      	mov	r3, r4
   badaa:	4632      	mov	r2, r6
   badac:	2001      	movs	r0, #1
   badae:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   badb2:	f7fb fec9 	bl	b6b48 <log_message>
    if (automatic) {
   badb6:	f1b8 0f00 	cmp.w	r8, #0
   badba:	d0ad      	beq.n	bad18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   badbc:	4629      	mov	r1, r5
   badbe:	4630      	mov	r0, r6
   badc0:	f7ff ff5c 	bl	bac7c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   badc4:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   badc8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   badcc:	42bd      	cmp	r5, r7
   badce:	d005      	beq.n	baddc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   badd0:	4628      	mov	r0, r5
   badd2:	2101      	movs	r1, #1
   badd4:	f7fe fc30 	bl	b9638 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   badd8:	3508      	adds	r5, #8
   badda:	e7f7      	b.n	badcc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   baddc:	4630      	mov	r0, r6
   badde:	f7fe fe4f 	bl	b9a80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bade2:	e799      	b.n	bad18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bade4:	00180003 	.word	0x00180003
   bade8:	000ba159 	.word	0x000ba159
   badec:	000be258 	.word	0x000be258
   badf0:	2003e700 	.word	0x2003e700
   badf4:	000be103 	.word	0x000be103
   badf8:	fffffefc 	.word	0xfffffefc
   badfc:	000be274 	.word	0x000be274

000bae00 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bae00:	b513      	push	{r0, r1, r4, lr}
   bae02:	4604      	mov	r4, r0
   bae04:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bae08:	f7fe fc6c 	bl	b96e4 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bae0c:	9b00      	ldr	r3, [sp, #0]
   bae0e:	9901      	ldr	r1, [sp, #4]
   bae10:	2200      	movs	r2, #0
   bae12:	4620      	mov	r0, r4
   bae14:	f7ff ff58 	bl	bacc8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   bae18:	4620      	mov	r0, r4
   bae1a:	b002      	add	sp, #8
   bae1c:	bd10      	pop	{r4, pc}
	...

000bae20 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bae24:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bae26:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bae28:	2600      	movs	r6, #0
   bae2a:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bae2e:	4b66      	ldr	r3, [pc, #408]	; (bafc8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bae30:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bae32:	4605      	mov	r5, r0
   bae34:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bae36:	4633      	mov	r3, r6
   bae38:	4964      	ldr	r1, [pc, #400]	; (bafcc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bae3a:	f8df 9194 	ldr.w	r9, [pc, #404]	; bafd0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bae3e:	f8df 818c 	ldr.w	r8, [pc, #396]	; bafcc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bae42:	f8df a190 	ldr.w	sl, [pc, #400]	; bafd4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bae46:	aa0c      	add	r2, sp, #48	; 0x30
   bae48:	2001      	movs	r0, #1
   bae4a:	f7fb fe7d 	bl	b6b48 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bae4e:	682b      	ldr	r3, [r5, #0]
   bae50:	42b3      	cmp	r3, r6
   bae52:	f240 80b5 	bls.w	bafc0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bae56:	a803      	add	r0, sp, #12
   bae58:	f7fe fbc8 	bl	b95ec <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bae5c:	a805      	add	r0, sp, #20
   bae5e:	f7fe fc25 	bl	b96ac <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bae62:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bae66:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bae68:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bae6a:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bae6e:	445b      	add	r3, fp
        this->size = halHandles.size;
   bae70:	8bd9      	ldrh	r1, [r3, #30]
   bae72:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bae74:	8c19      	ldrh	r1, [r3, #32]
   bae76:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bae78:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bae7a:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bae7c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bae7e:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bae80:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bae82:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bae84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bae86:	8253      	strh	r3, [r2, #18]
   bae88:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bae8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bae90:	429a      	cmp	r2, r3
   bae92:	d07d      	beq.n	baf90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bae94:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bae96:	8ac4      	ldrh	r4, [r0, #22]
   bae98:	428c      	cmp	r4, r1
   bae9a:	d377      	bcc.n	baf8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bae9c:	8a84      	ldrh	r4, [r0, #20]
   bae9e:	428c      	cmp	r4, r1
   baea0:	d874      	bhi.n	baf8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   baea2:	6859      	ldr	r1, [r3, #4]
   baea4:	9005      	str	r0, [sp, #20]
   baea6:	a806      	add	r0, sp, #24
   baea8:	f7fe f92a 	bl	b9100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   baeac:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   baeb0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   baeb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   baeb8:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   baebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baebe:	f8dc 3000 	ldr.w	r3, [ip]
   baec2:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   baec4:	892b      	ldrh	r3, [r5, #8]
   baec6:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   baeca:	686b      	ldr	r3, [r5, #4]
   baecc:	9c03      	ldr	r4, [sp, #12]
   baece:	445b      	add	r3, fp
   baed0:	7e5b      	ldrb	r3, [r3, #25]
   baed2:	f013 0f02 	tst.w	r3, #2
   baed6:	d16e      	bne.n	bafb6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   baed8:	686b      	ldr	r3, [r5, #4]
   baeda:	445b      	add	r3, fp
   baedc:	7e5b      	ldrb	r3, [r3, #25]
   baede:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   baee0:	bf42      	ittt	mi
   baee2:	7923      	ldrbmi	r3, [r4, #4]
   baee4:	f043 0304 	orrmi.w	r3, r3, #4
   baee8:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   baeea:	686b      	ldr	r3, [r5, #4]
   baeec:	445b      	add	r3, fp
   baeee:	7e5b      	ldrb	r3, [r3, #25]
   baef0:	0719      	lsls	r1, r3, #28
   baef2:	bf42      	ittt	mi
   baef4:	7923      	ldrbmi	r3, [r4, #4]
   baef6:	f043 0308 	orrmi.w	r3, r3, #8
   baefa:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   baefc:	686b      	ldr	r3, [r5, #4]
   baefe:	445b      	add	r3, fp
   baf00:	7e5b      	ldrb	r3, [r3, #25]
   baf02:	06da      	lsls	r2, r3, #27
   baf04:	bf42      	ittt	mi
   baf06:	7923      	ldrbmi	r3, [r4, #4]
   baf08:	f043 0310 	orrmi.w	r3, r3, #16
   baf0c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   baf0e:	686b      	ldr	r3, [r5, #4]
   baf10:	445b      	add	r3, fp
   baf12:	aa07      	add	r2, sp, #28
   baf14:	7e5b      	ldrb	r3, [r3, #25]
   baf16:	069b      	lsls	r3, r3, #26
   baf18:	bf42      	ittt	mi
   baf1a:	7923      	ldrbmi	r3, [r4, #4]
   baf1c:	f043 0320 	orrmi.w	r3, r3, #32
   baf20:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   baf22:	686b      	ldr	r3, [r5, #4]
   baf24:	449b      	add	fp, r3
   baf26:	f10b 0304 	add.w	r3, fp, #4
   baf2a:	4696      	mov	lr, r2
   baf2c:	f10b 0b14 	add.w	fp, fp, #20
   baf30:	6818      	ldr	r0, [r3, #0]
   baf32:	6859      	ldr	r1, [r3, #4]
   baf34:	4694      	mov	ip, r2
   baf36:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   baf3a:	3308      	adds	r3, #8
   baf3c:	455b      	cmp	r3, fp
   baf3e:	4662      	mov	r2, ip
   baf40:	d1f6      	bne.n	baf30 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   baf42:	6818      	ldr	r0, [r3, #0]
   baf44:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   baf48:	4671      	mov	r1, lr
   baf4a:	a80c      	add	r0, sp, #48	; 0x30
   baf4c:	f7fe f954 	bl	b91f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   baf50:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   baf54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   baf58:	3414      	adds	r4, #20
   baf5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baf5c:	f8dc 3000 	ldr.w	r3, [ip]
   baf60:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   baf62:	a903      	add	r1, sp, #12
   baf64:	a80c      	add	r0, sp, #48	; 0x30
   baf66:	f7fe fd50 	bl	b9a0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   baf6a:	a90c      	add	r1, sp, #48	; 0x30
   baf6c:	f107 0018 	add.w	r0, r7, #24
   baf70:	f7ff fdb1 	bl	baad6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   baf74:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   baf76:	a80d      	add	r0, sp, #52	; 0x34
   baf78:	f7fc f8c6 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baf7c:	b99c      	cbnz	r4, bafa6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   baf7e:	2320      	movs	r3, #32
   baf80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   baf84:	f8cd a000 	str.w	sl, [sp]
   baf88:	4623      	mov	r3, r4
   baf8a:	e007      	b.n	baf9c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   baf8c:	3308      	adds	r3, #8
   baf8e:	e77f      	b.n	bae90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   baf90:	2420      	movs	r4, #32
   baf92:	2300      	movs	r3, #0
   baf94:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   baf98:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   baf9c:	aa0c      	add	r2, sp, #48	; 0x30
   baf9e:	4641      	mov	r1, r8
   bafa0:	2032      	movs	r0, #50	; 0x32
   bafa2:	f7fb fdd1 	bl	b6b48 <log_message>
   bafa6:	a806      	add	r0, sp, #24
   bafa8:	f7fc f8ae 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bafac:	a804      	add	r0, sp, #16
   bafae:	f7fc f8ab 	bl	b7108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bafb2:	3601      	adds	r6, #1
   bafb4:	e74b      	b.n	bae4e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bafb6:	7923      	ldrb	r3, [r4, #4]
   bafb8:	f043 0302 	orr.w	r3, r3, #2
   bafbc:	7123      	strb	r3, [r4, #4]
   bafbe:	e78b      	b.n	baed8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bafc0:	b015      	add	sp, #84	; 0x54
   bafc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bafc6:	bf00      	nop
   bafc8:	000be291 	.word	0x000be291
   bafcc:	000be103 	.word	0x000be103
   bafd0:	000be2ac 	.word	0x000be2ac
   bafd4:	000be2db 	.word	0x000be2db

000bafd8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bafd8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bafda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bafdc:	4604      	mov	r4, r0
   bafde:	460d      	mov	r5, r1
   bafe0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bafe2:	d914      	bls.n	bb00e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bafe4:	4290      	cmp	r0, r2
   bafe6:	d213      	bcs.n	bb010 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bafe8:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bafec:	1a75      	subs	r5, r6, r1
   bafee:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   baff2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   baff4:	42b7      	cmp	r7, r6
   baff6:	d018      	beq.n	bb02a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   baff8:	b11c      	cbz	r4, bb002 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   baffa:	4631      	mov	r1, r6
   baffc:	4620      	mov	r0, r4
   baffe:	f7fe ff38 	bl	b9e72 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bb002:	4630      	mov	r0, r6
   bb004:	f7fe fc6f 	bl	b98e6 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bb008:	3e24      	subs	r6, #36	; 0x24
   bb00a:	3c24      	subs	r4, #36	; 0x24
   bb00c:	e7f2      	b.n	baff4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb00e:	d00c      	beq.n	bb02a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb010:	42b5      	cmp	r5, r6
   bb012:	d00a      	beq.n	bb02a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb014:	b11c      	cbz	r4, bb01e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb016:	4629      	mov	r1, r5
   bb018:	4620      	mov	r0, r4
   bb01a:	f7fe ff2a 	bl	b9e72 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bb01e:	4628      	mov	r0, r5
   bb020:	f7fe fc61 	bl	b98e6 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bb024:	3524      	adds	r5, #36	; 0x24
   bb026:	3424      	adds	r4, #36	; 0x24
   bb028:	e7f2      	b.n	bb010 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb02c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bb02e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb030:	4605      	mov	r5, r0
        if (n > 0) {
   bb032:	dd13      	ble.n	bb05c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bb034:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bb036:	fb07 f006 	mul.w	r0, r7, r6
   bb03a:	f7fb fe39 	bl	b6cb0 <malloc>
            if (!d) {
   bb03e:	4604      	mov	r4, r0
   bb040:	b158      	cbz	r0, bb05a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bb042:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb046:	fb07 1202 	mla	r2, r7, r2, r1
   bb04a:	f7ff ffc5 	bl	bafd8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb04e:	6828      	ldr	r0, [r5, #0]
   bb050:	f7fb fe36 	bl	b6cc0 <free>
        data_ = d;
   bb054:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb056:	60ae      	str	r6, [r5, #8]
        return true;
   bb058:	2001      	movs	r0, #1
    }
   bb05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb05c:	2400      	movs	r4, #0
   bb05e:	e7f6      	b.n	bb04e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bb060 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb064:	2300      	movs	r3, #0
   bb066:	e9c0 3300 	strd	r3, r3, [r0]
   bb06a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb06c:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb06e:	6849      	ldr	r1, [r1, #4]
   bb070:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb072:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb074:	dd29      	ble.n	bb0ca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
   bb076:	f7ff ffd9 	bl	bb02c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb07a:	b330      	cbz	r0, bb0ca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb07c:	e9d7 4300 	ldrd	r4, r3, [r7]
   bb080:	f04f 0824 	mov.w	r8, #36	; 0x24
   bb084:	682e      	ldr	r6, [r5, #0]
   bb086:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
   bb08a:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
   bb08c:	f1a4 0208 	sub.w	r2, r4, #8
   bb090:	4590      	cmp	r8, r2
   bb092:	d018      	beq.n	bb0c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
   bb094:	b1a6      	cbz	r6, bb0c0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
   bb096:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb09a:	6033      	str	r3, [r6, #0]
   bb09c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   bb0a0:	6073      	str	r3, [r6, #4]
class BleAdvertisingData {
   bb0a2:	4621      	mov	r1, r4
   bb0a4:	f106 0008 	add.w	r0, r6, #8
   bb0a8:	f7fc fcd5 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb0ac:	f104 010c 	add.w	r1, r4, #12
   bb0b0:	f106 0014 	add.w	r0, r6, #20
   bb0b4:	f7fc fccf 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb0b8:	f994 3018 	ldrsb.w	r3, [r4, #24]
   bb0bc:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
   bb0c0:	3624      	adds	r6, #36	; 0x24
   bb0c2:	3424      	adds	r4, #36	; 0x24
   bb0c4:	e7e2      	b.n	bb08c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bb0c6:	687b      	ldr	r3, [r7, #4]
   bb0c8:	606b      	str	r3, [r5, #4]
}
   bb0ca:	4628      	mov	r0, r5
   bb0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb0d0 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   bb0d0:	b538      	push	{r3, r4, r5, lr}
   bb0d2:	460c      	mov	r4, r1
   bb0d4:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   bb0d6:	f101 0018 	add.w	r0, r1, #24
   bb0da:	f7fd ffb5 	bl	b9048 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   bb0de:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bb0e2:	f7fd ffbc 	bl	b905e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   bb0e6:	2200      	movs	r2, #0
   bb0e8:	4621      	mov	r1, r4
   bb0ea:	4804      	ldr	r0, [pc, #16]	; (bb0fc <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   bb0ec:	f7fb fc74 	bl	b69d8 <hal_ble_gap_start_scan>
        return resultsVector_;
   bb0f0:	4621      	mov	r1, r4
   bb0f2:	4628      	mov	r0, r5
   bb0f4:	f7ff ffb4 	bl	bb060 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   bb0f8:	4628      	mov	r0, r5
   bb0fa:	bd38      	pop	{r3, r4, r5, pc}
   bb0fc:	000bb121 	.word	0x000bb121

000bb100 <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
   bb100:	b510      	push	{r4, lr}
   bb102:	b09e      	sub	sp, #120	; 0x78
   bb104:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   bb106:	a801      	add	r0, sp, #4
   bb108:	f7fe fbf7 	bl	b98fa <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
   bb10c:	a901      	add	r1, sp, #4
   bb10e:	4620      	mov	r0, r4
   bb110:	f7ff ffde 	bl	bb0d0 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   bb114:	a801      	add	r0, sp, #4
   bb116:	f7fe fc1a 	bl	b994e <_ZN8particle16BleScanDelegatorD1Ev>
}
   bb11a:	4620      	mov	r0, r4
   bb11c:	b01e      	add	sp, #120	; 0x78
   bb11e:	bd10      	pop	{r4, pc}

000bb120 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bb120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb124:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bb126:	ad01      	add	r5, sp, #4
   bb128:	4606      	mov	r6, r0
   bb12a:	4628      	mov	r0, r5
   bb12c:	460c      	mov	r4, r1
   bb12e:	f7fe f848 	bl	b91c2 <_ZN8particle10BleAddressC1Ev>
   bb132:	a803      	add	r0, sp, #12
   bb134:	f7fe ff78 	bl	ba028 <_ZN8particle18BleAdvertisingDataC1Ev>
   bb138:	a806      	add	r0, sp, #24
   bb13a:	f7fe ff75 	bl	ba028 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bb13e:	6930      	ldr	r0, [r6, #16]
   bb140:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bb142:	89f2      	ldrh	r2, [r6, #14]
   bb144:	ab13      	add	r3, sp, #76	; 0x4c
   bb146:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bb148:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bb14c:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bb14e:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bb150:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bb154:	a806      	add	r0, sp, #24
   bb156:	f7fe fedb 	bl	b9f10 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bb15a:	89b2      	ldrh	r2, [r6, #12]
   bb15c:	6871      	ldr	r1, [r6, #4]
   bb15e:	a803      	add	r0, sp, #12
   bb160:	f7fe fed6 	bl	b9f10 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bb164:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bb168:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bb16a:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bb16c:	d003      	beq.n	bb176 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bb16e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bb172:	429a      	cmp	r2, r3
   bb174:	db5c      	blt.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bb176:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bb17a:	2b7f      	cmp	r3, #127	; 0x7f
   bb17c:	d003      	beq.n	bb186 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bb17e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bb182:	429a      	cmp	r2, r3
   bb184:	dc54      	bgt.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bb186:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bb18a:	4638      	mov	r0, r7
   bb18c:	f7fe fd66 	bl	b9c5c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bb190:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bb192:	2b00      	cmp	r3, #0
   bb194:	dd52      	ble.n	bb23c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bb196:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bb198:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bb19c:	45b1      	cmp	r9, r6
   bb19e:	d050      	beq.n	bb242 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bb1a0:	4630      	mov	r0, r6
   bb1a2:	4629      	mov	r1, r5
   bb1a4:	f7fd fff9 	bl	b919a <_ZNK8particle10BleAddresseqERKS0_>
   bb1a8:	3608      	adds	r6, #8
   bb1aa:	4680      	mov	r8, r0
   bb1ac:	2800      	cmp	r0, #0
   bb1ae:	d0f5      	beq.n	bb19c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bb1b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bb1b2:	f7fb fd85 	bl	b6cc0 <free>
        if (!delegator->filterByRssi(result) ||
   bb1b6:	f1b8 0f00 	cmp.w	r8, #0
   bb1ba:	d039      	beq.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bb1bc:	4629      	mov	r1, r5
   bb1be:	4620      	mov	r0, r4
   bb1c0:	f7fe fd0f 	bl	b9be2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bb1c4:	b3a0      	cbz	r0, bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bb1c6:	4629      	mov	r1, r5
   bb1c8:	4620      	mov	r0, r4
   bb1ca:	f7ff fa19 	bl	ba600 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bb1ce:	4606      	mov	r6, r0
   bb1d0:	b370      	cbz	r0, bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bb1d2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bb1d6:	4638      	mov	r0, r7
   bb1d8:	f7fe fd8b 	bl	b9cf2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bb1dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb1de:	2b00      	cmp	r3, #0
   bb1e0:	dd12      	ble.n	bb208 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bb1e2:	a806      	add	r0, sp, #24
   bb1e4:	f7fe f9b0 	bl	b9548 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bb1e8:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bb1ea:	a803      	add	r0, sp, #12
   bb1ec:	f7fe f9ac 	bl	b9548 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bb1f0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bb1f4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bb1f8:	429a      	cmp	r2, r3
   bb1fa:	d025      	beq.n	bb248 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bb1fc:	f833 1b02 	ldrh.w	r1, [r3], #2
   bb200:	4588      	cmp	r8, r1
   bb202:	d001      	beq.n	bb208 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bb204:	4288      	cmp	r0, r1
   bb206:	d1f7      	bne.n	bb1f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bb208:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bb20a:	f7fb fd59 	bl	b6cc0 <free>
              !delegator->filterByServiceUUID(result) ||
   bb20e:	b17e      	cbz	r6, bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bb210:	4629      	mov	r1, r5
   bb212:	4620      	mov	r0, r4
   bb214:	f7fe fda2 	bl	b9d5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bb218:	b150      	cbz	r0, bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bb21a:	6a23      	ldr	r3, [r4, #32]
   bb21c:	b1b3      	cbz	r3, bb24c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bb21e:	6963      	ldr	r3, [r4, #20]
   bb220:	9513      	str	r5, [sp, #76]	; 0x4c
   bb222:	3301      	adds	r3, #1
   bb224:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb226:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb228:	4639      	mov	r1, r7
   bb22a:	f104 0018 	add.w	r0, r4, #24
   bb22e:	4798      	blx	r3
            return;
   bb230:	4628      	mov	r0, r5
   bb232:	f7fe fb58 	bl	b98e6 <_ZN8particle13BleScanResultD1Ev>
    }
   bb236:	b01d      	add	sp, #116	; 0x74
   bb238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bb23c:	f04f 0801 	mov.w	r8, #1
   bb240:	e7b6      	b.n	bb1b0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bb242:	f04f 0800 	mov.w	r8, #0
   bb246:	e7b3      	b.n	bb1b0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bb248:	2600      	movs	r6, #0
   bb24a:	e7dd      	b.n	bb208 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bb24c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bb250:	f1b8 0f00 	cmp.w	r8, #0
   bb254:	d007      	beq.n	bb266 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bb256:	6963      	ldr	r3, [r4, #20]
   bb258:	3301      	adds	r3, #1
   bb25a:	6163      	str	r3, [r4, #20]
   bb25c:	4629      	mov	r1, r5
   bb25e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bb260:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bb264:	e7e3      	b.n	bb22e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bb266:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bb26a:	f1bc 0f00 	cmp.w	ip, #0
   bb26e:	d025      	beq.n	bb2bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bb270:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb272:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bb274:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb276:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bb278:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb27a:	d8d9      	bhi.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bb27c:	2224      	movs	r2, #36	; 0x24
   bb27e:	4353      	muls	r3, r2
    address_ = addr.address_;
   bb280:	462a      	mov	r2, r5
   bb282:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bb284:	3b24      	subs	r3, #36	; 0x24
   bb286:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bb28a:	f84c 0003 	str.w	r0, [ip, r3]
   bb28e:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bb290:	f106 0008 	add.w	r0, r6, #8
   bb294:	a903      	add	r1, sp, #12
   bb296:	f7fe fe03 	bl	b9ea0 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bb29a:	a906      	add	r1, sp, #24
   bb29c:	f106 0014 	add.w	r0, r6, #20
   bb2a0:	f7fe fdfe 	bl	b9ea0 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bb2a4:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bb2a8:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bb2ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bb2b0:	429a      	cmp	r2, r3
   bb2b2:	d3bd      	bcc.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bb2b4:	4640      	mov	r0, r8
   bb2b6:	f7fb fb97 	bl	b69e8 <hal_ble_gap_stop_scan>
   bb2ba:	e7b9      	b.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bb2bc:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb2c0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bb2c4:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bb2c8:	a903      	add	r1, sp, #12
   bb2ca:	a80c      	add	r0, sp, #48	; 0x30
   bb2cc:	f7fc fbc3 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb2d0:	a906      	add	r1, sp, #24
   bb2d2:	a80f      	add	r0, sp, #60	; 0x3c
   bb2d4:	f7fc fbbf 	bl	b7a56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb2d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bb2dc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bb2e0:	4641      	mov	r1, r8
   bb2e2:	4638      	mov	r0, r7
   bb2e4:	6866      	ldr	r6, [r4, #4]
   bb2e6:	f7fe fdc4 	bl	b9e72 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb2ea:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb2ee:	4299      	cmp	r1, r3
   bb2f0:	da10      	bge.n	bb314 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bb2f2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb2f4:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bb2f6:	2224      	movs	r2, #36	; 0x24
   bb2f8:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bb2fc:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bb300:	fb02 3201 	mla	r2, r2, r1, r3
   bb304:	4631      	mov	r1, r6
   bb306:	f7ff fe67 	bl	bafd8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb30a:	b986      	cbnz	r6, bb32e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bb30c:	6863      	ldr	r3, [r4, #4]
   bb30e:	3301      	adds	r3, #1
   bb310:	6063      	str	r3, [r4, #4]
    return true;
   bb312:	e005      	b.n	bb320 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb314:	3101      	adds	r1, #1
   bb316:	4620      	mov	r0, r4
   bb318:	f7ff fe88 	bl	bb02c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb31c:	2800      	cmp	r0, #0
   bb31e:	d1e8      	bne.n	bb2f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bb320:	4638      	mov	r0, r7
   bb322:	f7fe fae0 	bl	b98e6 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bb326:	4640      	mov	r0, r8
   bb328:	f7fe fadd 	bl	b98e6 <_ZN8particle13BleScanResultD1Ev>
   bb32c:	e780      	b.n	bb230 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bb32e:	4639      	mov	r1, r7
   bb330:	4630      	mov	r0, r6
   bb332:	f7fe fd9e 	bl	b9e72 <_ZN8particle13BleScanResultC1EOS0_>
   bb336:	e7e9      	b.n	bb30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bb338 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bb338:	4802      	ldr	r0, [pc, #8]	; (bb344 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bb33a:	2300      	movs	r3, #0
   bb33c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bb33e:	f7fb bb23 	b.w	b6988 <os_mutex_recursive_create>
   bb342:	bf00      	nop
   bb344:	2003e700 	.word	0x2003e700

000bb348 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bb348:	b510      	push	{r4, lr}
   bb34a:	4604      	mov	r4, r0
{
	free(buffer);
   bb34c:	6800      	ldr	r0, [r0, #0]
   bb34e:	f7fb fcb7 	bl	b6cc0 <free>
}
   bb352:	4620      	mov	r0, r4
   bb354:	bd10      	pop	{r4, pc}

000bb356 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bb356:	b510      	push	{r4, lr}
   bb358:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bb35a:	6800      	ldr	r0, [r0, #0]
   bb35c:	b108      	cbz	r0, bb362 <_ZN6String10invalidateEv+0xc>
   bb35e:	f7fb fcaf 	bl	b6cc0 <free>
	buffer = NULL;
   bb362:	2300      	movs	r3, #0
	capacity = len = 0;
   bb364:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bb368:	6023      	str	r3, [r4, #0]
}
   bb36a:	bd10      	pop	{r4, pc}

000bb36c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bb36c:	b538      	push	{r3, r4, r5, lr}
   bb36e:	4604      	mov	r4, r0
   bb370:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bb372:	6800      	ldr	r0, [r0, #0]
   bb374:	3101      	adds	r1, #1
   bb376:	f7fb fcab 	bl	b6cd0 <realloc>
	if (newbuffer) {
   bb37a:	b110      	cbz	r0, bb382 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb37c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb380:	2001      	movs	r0, #1
	}
	return 0;
}
   bb382:	bd38      	pop	{r3, r4, r5, pc}

000bb384 <_ZN6String7reserveEj>:
{
   bb384:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb386:	6803      	ldr	r3, [r0, #0]
{
   bb388:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb38a:	b123      	cbz	r3, bb396 <_ZN6String7reserveEj+0x12>
   bb38c:	6843      	ldr	r3, [r0, #4]
   bb38e:	428b      	cmp	r3, r1
   bb390:	d301      	bcc.n	bb396 <_ZN6String7reserveEj+0x12>
   bb392:	2001      	movs	r0, #1
}
   bb394:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb396:	4620      	mov	r0, r4
   bb398:	f7ff ffe8 	bl	bb36c <_ZN6String12changeBufferEj>
   bb39c:	2800      	cmp	r0, #0
   bb39e:	d0f9      	beq.n	bb394 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb3a0:	68a3      	ldr	r3, [r4, #8]
   bb3a2:	2b00      	cmp	r3, #0
   bb3a4:	d1f5      	bne.n	bb392 <_ZN6String7reserveEj+0xe>
   bb3a6:	6822      	ldr	r2, [r4, #0]
   bb3a8:	7013      	strb	r3, [r2, #0]
   bb3aa:	e7f2      	b.n	bb392 <_ZN6String7reserveEj+0xe>

000bb3ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb3ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb3b0:	4611      	mov	r1, r2
   bb3b2:	9201      	str	r2, [sp, #4]
{
   bb3b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb3b6:	f7ff ffe5 	bl	bb384 <_ZN6String7reserveEj>
   bb3ba:	9a01      	ldr	r2, [sp, #4]
   bb3bc:	b928      	cbnz	r0, bb3ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb3be:	4620      	mov	r0, r4
   bb3c0:	f7ff ffc9 	bl	bb356 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb3c4:	4620      	mov	r0, r4
   bb3c6:	b003      	add	sp, #12
   bb3c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb3ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb3cc:	4629      	mov	r1, r5
   bb3ce:	6820      	ldr	r0, [r4, #0]
   bb3d0:	f001 f8c0 	bl	bc554 <memcpy>
	buffer[len] = 0;
   bb3d4:	6822      	ldr	r2, [r4, #0]
   bb3d6:	68a3      	ldr	r3, [r4, #8]
   bb3d8:	2100      	movs	r1, #0
   bb3da:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb3dc:	e7f2      	b.n	bb3c4 <_ZN6String4copyEPKcj+0x18>

000bb3de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb3de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb3e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb3e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb3e6:	4604      	mov	r4, r0
	len = 0;
   bb3e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb3ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb3ec:	b141      	cbz	r1, bb400 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb3ee:	4608      	mov	r0, r1
   bb3f0:	9101      	str	r1, [sp, #4]
   bb3f2:	f001 f936 	bl	bc662 <strlen>
   bb3f6:	9901      	ldr	r1, [sp, #4]
   bb3f8:	4602      	mov	r2, r0
   bb3fa:	4620      	mov	r0, r4
   bb3fc:	f7ff ffd6 	bl	bb3ac <_ZN6String4copyEPKcj>
}
   bb400:	4620      	mov	r0, r4
   bb402:	b002      	add	sp, #8
   bb404:	bd10      	pop	{r4, pc}

000bb406 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb406:	b538      	push	{r3, r4, r5, lr}
   bb408:	4605      	mov	r5, r0
	if (buffer) {
   bb40a:	6800      	ldr	r0, [r0, #0]
{
   bb40c:	460c      	mov	r4, r1
	if (buffer) {
   bb40e:	b168      	cbz	r0, bb42c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb410:	686a      	ldr	r2, [r5, #4]
   bb412:	688b      	ldr	r3, [r1, #8]
   bb414:	429a      	cmp	r2, r3
   bb416:	d307      	bcc.n	bb428 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb418:	6809      	ldr	r1, [r1, #0]
   bb41a:	f001 f91a 	bl	bc652 <strcpy>
			len = rhs.len;
   bb41e:	68a3      	ldr	r3, [r4, #8]
   bb420:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb422:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb424:	60a3      	str	r3, [r4, #8]
}
   bb426:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb428:	f7fb fc4a 	bl	b6cc0 <free>
	buffer = rhs.buffer;
   bb42c:	6823      	ldr	r3, [r4, #0]
   bb42e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb430:	6863      	ldr	r3, [r4, #4]
   bb432:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb434:	68a3      	ldr	r3, [r4, #8]
   bb436:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb438:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb43a:	e9c4 3300 	strd	r3, r3, [r4]
   bb43e:	e7f1      	b.n	bb424 <_ZN6String4moveERS_+0x1e>

000bb440 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bb440:	b510      	push	{r4, lr}
	buffer = NULL;
   bb442:	2300      	movs	r3, #0
	capacity = 0;
   bb444:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bb448:	4604      	mov	r4, r0
	len = 0;
   bb44a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb44c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bb44e:	f7ff ffda 	bl	bb406 <_ZN6String4moveERS_>
}
   bb452:	4620      	mov	r0, r4
   bb454:	bd10      	pop	{r4, pc}

000bb456 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb456:	4288      	cmp	r0, r1
{
   bb458:	b510      	push	{r4, lr}
   bb45a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb45c:	d005      	beq.n	bb46a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb45e:	680b      	ldr	r3, [r1, #0]
   bb460:	b12b      	cbz	r3, bb46e <_ZN6StringaSERKS_+0x18>
   bb462:	688a      	ldr	r2, [r1, #8]
   bb464:	4619      	mov	r1, r3
   bb466:	f7ff ffa1 	bl	bb3ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb46a:	4620      	mov	r0, r4
   bb46c:	bd10      	pop	{r4, pc}
	else invalidate();
   bb46e:	f7ff ff72 	bl	bb356 <_ZN6String10invalidateEv>
   bb472:	e7fa      	b.n	bb46a <_ZN6StringaSERKS_+0x14>

000bb474 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb474:	b510      	push	{r4, lr}
	buffer = NULL;
   bb476:	2300      	movs	r3, #0
String::String(const String &value)
   bb478:	4604      	mov	r4, r0
	capacity = 0;
   bb47a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb47e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb480:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb482:	f7ff ffe8 	bl	bb456 <_ZN6StringaSERKS_>
}
   bb486:	4620      	mov	r0, r4
   bb488:	bd10      	pop	{r4, pc}

000bb48a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bb48a:	b513      	push	{r0, r1, r4, lr}
   bb48c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bb48e:	b159      	cbz	r1, bb4a8 <_ZN6StringaSEPKc+0x1e>
   bb490:	4608      	mov	r0, r1
   bb492:	9101      	str	r1, [sp, #4]
   bb494:	f001 f8e5 	bl	bc662 <strlen>
   bb498:	9901      	ldr	r1, [sp, #4]
   bb49a:	4602      	mov	r2, r0
   bb49c:	4620      	mov	r0, r4
   bb49e:	f7ff ff85 	bl	bb3ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb4a2:	4620      	mov	r0, r4
   bb4a4:	b002      	add	sp, #8
   bb4a6:	bd10      	pop	{r4, pc}
	else invalidate();
   bb4a8:	f7ff ff55 	bl	bb356 <_ZN6String10invalidateEv>
   bb4ac:	e7f9      	b.n	bb4a2 <_ZN6StringaSEPKc+0x18>

000bb4ae <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   bb4ae:	b510      	push	{r4, lr}
   bb4b0:	4604      	mov	r4, r0
   bb4b2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   bb4b4:	2300      	movs	r3, #0
	capacity = 0;
   bb4b6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   bb4ba:	60a3      	str	r3, [r4, #8]
	flags = 0;
   bb4bc:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   bb4be:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   bb4c0:	2301      	movs	r3, #1
   bb4c2:	a901      	add	r1, sp, #4
   bb4c4:	f000 f8d9 	bl	bb67a <ultoa>
	*this = buf;
   bb4c8:	a901      	add	r1, sp, #4
   bb4ca:	4620      	mov	r0, r4
   bb4cc:	f7ff ffdd 	bl	bb48a <_ZN6StringaSEPKc>
}
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	b00a      	add	sp, #40	; 0x28
   bb4d4:	bd10      	pop	{r4, pc}

000bb4d6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bb4d6:	b570      	push	{r4, r5, r6, lr}
   bb4d8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bb4da:	460e      	mov	r6, r1
   bb4dc:	b909      	cbnz	r1, bb4e2 <_ZN6String6concatEPKcj+0xc>
   bb4de:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bb4e0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bb4e2:	b16a      	cbz	r2, bb500 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bb4e4:	6884      	ldr	r4, [r0, #8]
   bb4e6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bb4e8:	4621      	mov	r1, r4
   bb4ea:	f7ff ff4b 	bl	bb384 <_ZN6String7reserveEj>
   bb4ee:	2800      	cmp	r0, #0
   bb4f0:	d0f5      	beq.n	bb4de <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bb4f2:	6828      	ldr	r0, [r5, #0]
   bb4f4:	68ab      	ldr	r3, [r5, #8]
   bb4f6:	4631      	mov	r1, r6
   bb4f8:	4418      	add	r0, r3
   bb4fa:	f001 f8aa 	bl	bc652 <strcpy>
	len = newlen;
   bb4fe:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bb500:	2001      	movs	r0, #1
   bb502:	e7ed      	b.n	bb4e0 <_ZN6String6concatEPKcj+0xa>

000bb504 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bb504:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bb506:	2300      	movs	r3, #0
	buf[0] = c;
   bb508:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bb50c:	2201      	movs	r2, #1
   bb50e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bb510:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bb514:	f7ff ffdf 	bl	bb4d6 <_ZN6String6concatEPKcj>
}
   bb518:	b003      	add	sp, #12
   bb51a:	f85d fb04 	ldr.w	pc, [sp], #4

000bb51e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bb51e:	6802      	ldr	r2, [r0, #0]
{
   bb520:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bb522:	6809      	ldr	r1, [r1, #0]
   bb524:	b162      	cbz	r2, bb540 <_ZNK6String9compareToERKS_+0x22>
   bb526:	b941      	cbnz	r1, bb53a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bb528:	6880      	ldr	r0, [r0, #8]
   bb52a:	b160      	cbz	r0, bb546 <_ZNK6String9compareToERKS_+0x28>
   bb52c:	7810      	ldrb	r0, [r2, #0]
   bb52e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bb530:	6898      	ldr	r0, [r3, #8]
   bb532:	b140      	cbz	r0, bb546 <_ZNK6String9compareToERKS_+0x28>
   bb534:	7809      	ldrb	r1, [r1, #0]
   bb536:	4248      	negs	r0, r1
   bb538:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bb53a:	4610      	mov	r0, r2
   bb53c:	f001 b87f 	b.w	bc63e <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bb540:	2900      	cmp	r1, #0
   bb542:	d1f5      	bne.n	bb530 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bb544:	4608      	mov	r0, r1
}
   bb546:	4770      	bx	lr

000bb548 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bb548:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bb54a:	6882      	ldr	r2, [r0, #8]
   bb54c:	688b      	ldr	r3, [r1, #8]
   bb54e:	429a      	cmp	r2, r3
   bb550:	d105      	bne.n	bb55e <_ZNK6String6equalsERKS_+0x16>
   bb552:	f7ff ffe4 	bl	bb51e <_ZNK6String9compareToERKS_>
   bb556:	fab0 f080 	clz	r0, r0
   bb55a:	0940      	lsrs	r0, r0, #5
}
   bb55c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bb55e:	2000      	movs	r0, #0
   bb560:	e7fc      	b.n	bb55c <_ZNK6String6equalsERKS_+0x14>

000bb562 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   bb562:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb564:	6882      	ldr	r2, [r0, #8]
   bb566:	b93a      	cbnz	r2, bb578 <_ZNK6String6equalsEPKc+0x16>
   bb568:	b121      	cbz	r1, bb574 <_ZNK6String6equalsEPKc+0x12>
   bb56a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bb56c:	fab0 f080 	clz	r0, r0
   bb570:	0940      	lsrs	r0, r0, #5
   bb572:	e000      	b.n	bb576 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb574:	2001      	movs	r0, #1
}
   bb576:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bb578:	6800      	ldr	r0, [r0, #0]
   bb57a:	b909      	cbnz	r1, bb580 <_ZNK6String6equalsEPKc+0x1e>
   bb57c:	7800      	ldrb	r0, [r0, #0]
   bb57e:	e7f5      	b.n	bb56c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bb580:	f001 f85d 	bl	bc63e <strcmp>
   bb584:	e7f2      	b.n	bb56c <_ZNK6String6equalsEPKc+0xa>

000bb586 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   bb586:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   bb588:	6883      	ldr	r3, [r0, #8]
   bb58a:	4293      	cmp	r3, r2
   bb58c:	d907      	bls.n	bb59e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   bb58e:	6804      	ldr	r4, [r0, #0]
   bb590:	6809      	ldr	r1, [r1, #0]
   bb592:	18a0      	adds	r0, r4, r2
   bb594:	f001 f8a1 	bl	bc6da <strstr>
	if (found == NULL) return -1;
   bb598:	b108      	cbz	r0, bb59e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   bb59a:	1b00      	subs	r0, r0, r4
}
   bb59c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   bb59e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb5a2:	e7fb      	b.n	bb59c <_ZNK6String7indexOfERKS_j+0x16>

000bb5a4 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   bb5a4:	2200      	movs	r2, #0
   bb5a6:	f7ff bfee 	b.w	bb586 <_ZNK6String7indexOfERKS_j>

000bb5aa <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   bb5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb5ae:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   bb5b0:	688a      	ldr	r2, [r1, #8]
{
   bb5b2:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   bb5b4:	b1ca      	cbz	r2, bb5ea <_ZNK6String11lastIndexOfERKS_j+0x40>
   bb5b6:	6883      	ldr	r3, [r0, #8]
   bb5b8:	b1bb      	cbz	r3, bb5ea <_ZNK6String11lastIndexOfERKS_j+0x40>
   bb5ba:	429a      	cmp	r2, r3
   bb5bc:	d815      	bhi.n	bb5ea <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   bb5be:	6807      	ldr	r7, [r0, #0]
	if (fromIndex >= len) fromIndex = len - 1;
   bb5c0:	42ab      	cmp	r3, r5
   bb5c2:	bf98      	it	ls
   bb5c4:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   bb5c8:	4638      	mov	r0, r7
	int found = -1;
   bb5ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   bb5ce:	eb07 0805 	add.w	r8, r7, r5
   bb5d2:	4540      	cmp	r0, r8
   bb5d4:	d80b      	bhi.n	bb5ee <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
   bb5d6:	6831      	ldr	r1, [r6, #0]
   bb5d8:	f001 f87f 	bl	bc6da <strstr>
		if (!p) break;
   bb5dc:	b138      	cbz	r0, bb5ee <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   bb5de:	1bc3      	subs	r3, r0, r7
   bb5e0:	42ab      	cmp	r3, r5
   bb5e2:	bf98      	it	ls
   bb5e4:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   bb5e6:	3001      	adds	r0, #1
   bb5e8:	e7f3      	b.n	bb5d2 <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   bb5ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}
	return found;
}
   bb5ee:	4620      	mov	r0, r4
   bb5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb5f4 <_ZNK6String11lastIndexOfERKS_>:
	return lastIndexOf(s2, len - s2.len);
   bb5f4:	6882      	ldr	r2, [r0, #8]
   bb5f6:	688b      	ldr	r3, [r1, #8]
   bb5f8:	1ad2      	subs	r2, r2, r3
   bb5fa:	f7ff bfd6 	b.w	bb5aa <_ZNK6String11lastIndexOfERKS_j>
	...

000bb600 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bb600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bb602:	429a      	cmp	r2, r3
{
   bb604:	460f      	mov	r7, r1
   bb606:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bb608:	490c      	ldr	r1, [pc, #48]	; (bb63c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bb60a:	bf88      	it	hi
   bb60c:	4613      	movhi	r3, r2
{
   bb60e:	4614      	mov	r4, r2
   bb610:	4606      	mov	r6, r0
	if (left > right) {
   bb612:	bf84      	itt	hi
   bb614:	462c      	movhi	r4, r5
   bb616:	461d      	movhi	r5, r3
	String out;
   bb618:	f7ff fee1 	bl	bb3de <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bb61c:	68bb      	ldr	r3, [r7, #8]
   bb61e:	42a3      	cmp	r3, r4
   bb620:	d30a      	bcc.n	bb638 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bb622:	6839      	ldr	r1, [r7, #0]
   bb624:	42ab      	cmp	r3, r5
   bb626:	bf94      	ite	ls
   bb628:	ebc4 0203 	rsbls	r2, r4, r3
   bb62c:	ebc4 0205 	rsbhi	r2, r4, r5
   bb630:	4421      	add	r1, r4
   bb632:	4630      	mov	r0, r6
   bb634:	f7ff feba 	bl	bb3ac <_ZN6String4copyEPKcj>
	return out;
}
   bb638:	4630      	mov	r0, r6
   bb63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb63c:	000be05f 	.word	0x000be05f

000bb640 <_ZNK6String9substringEj>:
{
   bb640:	b510      	push	{r4, lr}
   bb642:	4604      	mov	r4, r0
	return substring(left, len);
   bb644:	688b      	ldr	r3, [r1, #8]
   bb646:	f7ff ffdb 	bl	bb600 <_ZNK6String9substringEjj>
}
   bb64a:	4620      	mov	r0, r4
   bb64c:	bd10      	pop	{r4, pc}

000bb64e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   bb64e:	6800      	ldr	r0, [r0, #0]
   bb650:	b108      	cbz	r0, bb656 <_ZNK6String5toIntEv+0x8>
   bb652:	f000 bf63 	b.w	bc51c <atol>
	return 0;
}
   bb656:	4770      	bx	lr

000bb658 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   bb658:	b510      	push	{r4, lr}
   bb65a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bb65c:	f001 f801 	bl	bc662 <strlen>
   bb660:	3801      	subs	r0, #1
   bb662:	1823      	adds	r3, r4, r0
   bb664:	4620      	mov	r0, r4
	while(i<j){
   bb666:	4283      	cmp	r3, r0
   bb668:	d906      	bls.n	bb678 <_Z11str_reversePc+0x20>
		c = *i;
   bb66a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bb66c:	7819      	ldrb	r1, [r3, #0]
   bb66e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bb672:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bb676:	e7f6      	b.n	bb666 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bb678:	bd10      	pop	{r4, pc}

000bb67a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bb67a:	b570      	push	{r4, r5, r6, lr}
   bb67c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bb67e:	1e91      	subs	r1, r2, #2
   bb680:	2922      	cmp	r1, #34	; 0x22
   bb682:	d81d      	bhi.n	bb6c0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bb684:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bb686:	b930      	cbnz	r0, bb696 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bb688:	4423      	add	r3, r4
            *ptr++ = '0';
   bb68a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bb68c:	429d      	cmp	r5, r3
   bb68e:	d210      	bcs.n	bb6b2 <ultoa+0x38>
            *ptr++ = '0';
   bb690:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bb694:	e7fa      	b.n	bb68c <ultoa+0x12>
            result.quot = a/radix;
   bb696:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bb69a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bb69e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bb6a0:	2809      	cmp	r0, #9
                *ptr += '0';
   bb6a2:	bf94      	ite	ls
   bb6a4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   bb6a6:	3157      	addhi	r1, #87	; 0x57
   bb6a8:	b2c9      	uxtb	r1, r1
   bb6aa:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   bb6ae:	4630      	mov	r0, r6
	while(a){
   bb6b0:	e7e9      	b.n	bb686 <ultoa+0xc>

	*ptr = '\0';
   bb6b2:	2300      	movs	r3, #0
	str_reverse(buffer);
   bb6b4:	4620      	mov	r0, r4
	*ptr = '\0';
   bb6b6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   bb6b8:	f7ff ffce 	bl	bb658 <_Z11str_reversePc>
	return buffer;
   bb6bc:	4620      	mov	r0, r4
}
   bb6be:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bb6c0:	2000      	movs	r0, #0
   bb6c2:	e7fc      	b.n	bb6be <ultoa+0x44>

000bb6c4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb6c4:	4b05      	ldr	r3, [pc, #20]	; (bb6dc <_GLOBAL__sub_I_System+0x18>)
   bb6c6:	2202      	movs	r2, #2
   bb6c8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bb6ca:	4b05      	ldr	r3, [pc, #20]	; (bb6e0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb6cc:	4a05      	ldr	r2, [pc, #20]	; (bb6e4 <_GLOBAL__sub_I_System+0x20>)
   bb6ce:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb6d0:	2000      	movs	r0, #0
   bb6d2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb6d6:	f7fb bac7 	b.w	b6c68 <set_system_mode>
   bb6da:	bf00      	nop
   bb6dc:	2003e714 	.word	0x2003e714
   bb6e0:	2003e708 	.word	0x2003e708
   bb6e4:	ffff0000 	.word	0xffff0000

000bb6e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bb6e8:	b510      	push	{r4, lr}
   bb6ea:	4604      	mov	r4, r0
   bb6ec:	4608      	mov	r0, r1
{
    _spi = spi;
   bb6ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bb6f0:	f7fb f88a 	bl	b6808 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bb6f4:	2300      	movs	r3, #0
   bb6f6:	6063      	str	r3, [r4, #4]
}
   bb6f8:	4620      	mov	r0, r4
   bb6fa:	bd10      	pop	{r4, pc}

000bb6fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb6fc:	2200      	movs	r2, #0
   bb6fe:	6840      	ldr	r0, [r0, #4]
   bb700:	4611      	mov	r1, r2
   bb702:	f7fb ba89 	b.w	b6c18 <network_listening>

000bb706 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb706:	2200      	movs	r2, #0
   bb708:	6840      	ldr	r0, [r0, #4]
   bb70a:	4611      	mov	r1, r2
   bb70c:	f7fb ba94 	b.w	b6c38 <network_get_listen_timeout>

000bb710 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb710:	6840      	ldr	r0, [r0, #4]
   bb712:	2200      	movs	r2, #0
   bb714:	f7fb ba88 	b.w	b6c28 <network_set_listen_timeout>

000bb718 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb718:	6840      	ldr	r0, [r0, #4]
   bb71a:	2200      	movs	r2, #0
   bb71c:	f081 0101 	eor.w	r1, r1, #1
   bb720:	f7fb ba72 	b.w	b6c08 <network_listen>

000bb724 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb724:	2300      	movs	r3, #0
   bb726:	6840      	ldr	r0, [r0, #4]
   bb728:	461a      	mov	r2, r3
   bb72a:	4619      	mov	r1, r3
   bb72c:	f7fb ba64 	b.w	b6bf8 <network_off>

000bb730 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb730:	2300      	movs	r3, #0
   bb732:	6840      	ldr	r0, [r0, #4]
   bb734:	461a      	mov	r2, r3
   bb736:	4619      	mov	r1, r3
   bb738:	f7fb ba56 	b.w	b6be8 <network_on>

000bb73c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bb73c:	2200      	movs	r2, #0
   bb73e:	6840      	ldr	r0, [r0, #4]
   bb740:	4611      	mov	r1, r2
   bb742:	f7fb ba49 	b.w	b6bd8 <network_ready>

000bb746 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb746:	2200      	movs	r2, #0
   bb748:	6840      	ldr	r0, [r0, #4]
   bb74a:	4611      	mov	r1, r2
   bb74c:	f7fb ba34 	b.w	b6bb8 <network_connecting>

000bb750 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb750:	6840      	ldr	r0, [r0, #4]
   bb752:	2200      	movs	r2, #0
   bb754:	2102      	movs	r1, #2
   bb756:	f7fb ba37 	b.w	b6bc8 <network_disconnect>

000bb75a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb75a:	2300      	movs	r3, #0
   bb75c:	6840      	ldr	r0, [r0, #4]
   bb75e:	461a      	mov	r2, r3
   bb760:	f7fb ba22 	b.w	b6ba8 <network_connect>

000bb764 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bb764:	4b02      	ldr	r3, [pc, #8]	; (bb770 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bb766:	2203      	movs	r2, #3
   bb768:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bb76a:	4a02      	ldr	r2, [pc, #8]	; (bb774 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bb76c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bb76e:	4770      	bx	lr
   bb770:	2003e718 	.word	0x2003e718
   bb774:	000be37c 	.word	0x000be37c

000bb778 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb778:	4770      	bx	lr
	...

000bb77c <_Z17acquireWireBufferv>:
{
   bb77c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb77e:	2520      	movs	r5, #32
   bb780:	2314      	movs	r3, #20
{
   bb782:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb784:	6003      	str	r3, [r0, #0]
   bb786:	6085      	str	r5, [r0, #8]
   bb788:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb78a:	4906      	ldr	r1, [pc, #24]	; (bb7a4 <_Z17acquireWireBufferv+0x28>)
   bb78c:	4628      	mov	r0, r5
   bb78e:	f000 f8d9 	bl	bb944 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb792:	4904      	ldr	r1, [pc, #16]	; (bb7a4 <_Z17acquireWireBufferv+0x28>)
	};
   bb794:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb796:	4628      	mov	r0, r5
   bb798:	f000 f8d4 	bl	bb944 <_ZnajRKSt9nothrow_t>
	};
   bb79c:	60e0      	str	r0, [r4, #12]
}
   bb79e:	4620      	mov	r0, r4
   bb7a0:	bd38      	pop	{r3, r4, r5, pc}
   bb7a2:	bf00      	nop
   bb7a4:	000be3b0 	.word	0x000be3b0

000bb7a8 <_Z19__fetch_global_Wirev>:
{
   bb7a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb7aa:	4d0e      	ldr	r5, [pc, #56]	; (bb7e4 <_Z19__fetch_global_Wirev+0x3c>)
   bb7ac:	7829      	ldrb	r1, [r5, #0]
   bb7ae:	f3bf 8f5b 	dmb	ish
   bb7b2:	f011 0401 	ands.w	r4, r1, #1
{
   bb7b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb7b8:	d111      	bne.n	bb7de <_Z19__fetch_global_Wirev+0x36>
   bb7ba:	4628      	mov	r0, r5
   bb7bc:	f7f8 fc80 	bl	b40c0 <__cxa_guard_acquire>
   bb7c0:	b168      	cbz	r0, bb7de <_Z19__fetch_global_Wirev+0x36>
   bb7c2:	a801      	add	r0, sp, #4
   bb7c4:	f7ff ffda 	bl	bb77c <_Z17acquireWireBufferv>
   bb7c8:	aa01      	add	r2, sp, #4
   bb7ca:	4621      	mov	r1, r4
   bb7cc:	4806      	ldr	r0, [pc, #24]	; (bb7e8 <_Z19__fetch_global_Wirev+0x40>)
   bb7ce:	f7fc f90b 	bl	b79e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb7d2:	4628      	mov	r0, r5
   bb7d4:	f7f8 fc79 	bl	b40ca <__cxa_guard_release>
   bb7d8:	4804      	ldr	r0, [pc, #16]	; (bb7ec <_Z19__fetch_global_Wirev+0x44>)
   bb7da:	f000 fe99 	bl	bc510 <atexit>
	return wire;
}
   bb7de:	4802      	ldr	r0, [pc, #8]	; (bb7e8 <_Z19__fetch_global_Wirev+0x40>)
   bb7e0:	b007      	add	sp, #28
   bb7e2:	bd30      	pop	{r4, r5, pc}
   bb7e4:	2003e720 	.word	0x2003e720
   bb7e8:	2003e724 	.word	0x2003e724
   bb7ec:	000bb779 	.word	0x000bb779

000bb7f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb7f0:	4770      	bx	lr
	...

000bb7f4 <_Z20acquireSerial1Bufferv>:
{
   bb7f4:	b538      	push	{r3, r4, r5, lr}
   bb7f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb7f8:	2514      	movs	r5, #20
   bb7fa:	462a      	mov	r2, r5
   bb7fc:	2100      	movs	r1, #0
   bb7fe:	f000 fed1 	bl	bc5a4 <memset>
   bb802:	8025      	strh	r5, [r4, #0]
   bb804:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb806:	4907      	ldr	r1, [pc, #28]	; (bb824 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb808:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb80a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb80c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb80e:	f000 f899 	bl	bb944 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb812:	4904      	ldr	r1, [pc, #16]	; (bb824 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb814:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb816:	4628      	mov	r0, r5
   bb818:	f000 f894 	bl	bb944 <_ZnajRKSt9nothrow_t>
    };
   bb81c:	60e0      	str	r0, [r4, #12]
}
   bb81e:	4620      	mov	r0, r4
   bb820:	bd38      	pop	{r3, r4, r5, pc}
   bb822:	bf00      	nop
   bb824:	000be3b0 	.word	0x000be3b0

000bb828 <_Z22__fetch_global_Serial1v>:
{
   bb828:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb82a:	4d0e      	ldr	r5, [pc, #56]	; (bb864 <_Z22__fetch_global_Serial1v+0x3c>)
   bb82c:	7829      	ldrb	r1, [r5, #0]
   bb82e:	f3bf 8f5b 	dmb	ish
   bb832:	f011 0401 	ands.w	r4, r1, #1
{
   bb836:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb838:	d111      	bne.n	bb85e <_Z22__fetch_global_Serial1v+0x36>
   bb83a:	4628      	mov	r0, r5
   bb83c:	f7f8 fc40 	bl	b40c0 <__cxa_guard_acquire>
   bb840:	b168      	cbz	r0, bb85e <_Z22__fetch_global_Serial1v+0x36>
   bb842:	a801      	add	r0, sp, #4
   bb844:	f7ff ffd6 	bl	bb7f4 <_Z20acquireSerial1Bufferv>
   bb848:	aa01      	add	r2, sp, #4
   bb84a:	4621      	mov	r1, r4
   bb84c:	4806      	ldr	r0, [pc, #24]	; (bb868 <_Z22__fetch_global_Serial1v+0x40>)
   bb84e:	f7fc f881 	bl	b7954 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb852:	4628      	mov	r0, r5
   bb854:	f7f8 fc39 	bl	b40ca <__cxa_guard_release>
   bb858:	4804      	ldr	r0, [pc, #16]	; (bb86c <_Z22__fetch_global_Serial1v+0x44>)
   bb85a:	f000 fe59 	bl	bc510 <atexit>
    return serial1;
}
   bb85e:	4802      	ldr	r0, [pc, #8]	; (bb868 <_Z22__fetch_global_Serial1v+0x40>)
   bb860:	b007      	add	sp, #28
   bb862:	bd30      	pop	{r4, r5, pc}
   bb864:	2003e73c 	.word	0x2003e73c
   bb868:	2003e740 	.word	0x2003e740
   bb86c:	000bb7f1 	.word	0x000bb7f1

000bb870 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb870:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb872:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb874:	d902      	bls.n	bb87c <pinAvailable+0xc>
    return false;
   bb876:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb878:	b002      	add	sp, #8
   bb87a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb87c:	f1a0 030b 	sub.w	r3, r0, #11
   bb880:	2b02      	cmp	r3, #2
   bb882:	d81a      	bhi.n	bb8ba <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb884:	4c17      	ldr	r4, [pc, #92]	; (bb8e4 <pinAvailable+0x74>)
   bb886:	7821      	ldrb	r1, [r4, #0]
   bb888:	f3bf 8f5b 	dmb	ish
   bb88c:	f011 0101 	ands.w	r1, r1, #1
   bb890:	d10b      	bne.n	bb8aa <pinAvailable+0x3a>
   bb892:	4620      	mov	r0, r4
   bb894:	9101      	str	r1, [sp, #4]
   bb896:	f7f8 fc13 	bl	b40c0 <__cxa_guard_acquire>
   bb89a:	9901      	ldr	r1, [sp, #4]
   bb89c:	b128      	cbz	r0, bb8aa <pinAvailable+0x3a>
   bb89e:	4812      	ldr	r0, [pc, #72]	; (bb8e8 <pinAvailable+0x78>)
   bb8a0:	f7ff ff22 	bl	bb6e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb8a4:	4620      	mov	r0, r4
   bb8a6:	f7f8 fc10 	bl	b40ca <__cxa_guard_release>
   bb8aa:	4b0f      	ldr	r3, [pc, #60]	; (bb8e8 <pinAvailable+0x78>)
   bb8ac:	7818      	ldrb	r0, [r3, #0]
   bb8ae:	f7fa ffb3 	bl	b6818 <hal_spi_is_enabled>
   bb8b2:	2800      	cmp	r0, #0
   bb8b4:	d1df      	bne.n	bb876 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb8b6:	2001      	movs	r0, #1
   bb8b8:	e7de      	b.n	bb878 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb8ba:	2801      	cmp	r0, #1
   bb8bc:	d809      	bhi.n	bb8d2 <pinAvailable+0x62>
   bb8be:	f7ff ff73 	bl	bb7a8 <_Z19__fetch_global_Wirev>
   bb8c2:	2100      	movs	r1, #0
   bb8c4:	7c00      	ldrb	r0, [r0, #16]
   bb8c6:	f7fa ff8f 	bl	b67e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb8ca:	f080 0001 	eor.w	r0, r0, #1
   bb8ce:	b2c0      	uxtb	r0, r0
   bb8d0:	e7d2      	b.n	bb878 <pinAvailable+0x8>
   bb8d2:	3809      	subs	r0, #9
   bb8d4:	2801      	cmp	r0, #1
   bb8d6:	d8ee      	bhi.n	bb8b6 <pinAvailable+0x46>
   bb8d8:	f7ff ffa6 	bl	bb828 <_Z22__fetch_global_Serial1v>
   bb8dc:	7c00      	ldrb	r0, [r0, #16]
   bb8de:	f7fb f803 	bl	b68e8 <hal_usart_is_enabled>
   bb8e2:	e7f2      	b.n	bb8ca <pinAvailable+0x5a>
   bb8e4:	2003e754 	.word	0x2003e754
   bb8e8:	2003e758 	.word	0x2003e758

000bb8ec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb8ec:	2823      	cmp	r0, #35	; 0x23
{
   bb8ee:	b538      	push	{r3, r4, r5, lr}
   bb8f0:	4604      	mov	r4, r0
   bb8f2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb8f4:	d80a      	bhi.n	bb90c <pinMode+0x20>
   bb8f6:	29ff      	cmp	r1, #255	; 0xff
   bb8f8:	d008      	beq.n	bb90c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb8fa:	f7ff ffb9 	bl	bb870 <pinAvailable>
   bb8fe:	b128      	cbz	r0, bb90c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb900:	4629      	mov	r1, r5
   bb902:	4620      	mov	r0, r4
}
   bb904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb908:	f7fb b8ee 	b.w	b6ae8 <HAL_Pin_Mode>
}
   bb90c:	bd38      	pop	{r3, r4, r5, pc}

000bb90e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb90e:	b538      	push	{r3, r4, r5, lr}
   bb910:	4604      	mov	r4, r0
   bb912:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb914:	f7fb f8f0 	bl	b6af8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb918:	28ff      	cmp	r0, #255	; 0xff
   bb91a:	d010      	beq.n	bb93e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb91c:	2806      	cmp	r0, #6
   bb91e:	d804      	bhi.n	bb92a <digitalWrite+0x1c>
   bb920:	234d      	movs	r3, #77	; 0x4d
   bb922:	fa23 f000 	lsr.w	r0, r3, r0
   bb926:	07c3      	lsls	r3, r0, #31
   bb928:	d409      	bmi.n	bb93e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb92a:	4620      	mov	r0, r4
   bb92c:	f7ff ffa0 	bl	bb870 <pinAvailable>
   bb930:	b128      	cbz	r0, bb93e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb932:	4629      	mov	r1, r5
   bb934:	4620      	mov	r0, r4
}
   bb936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb93a:	f7fb b8e5 	b.w	b6b08 <HAL_GPIO_Write>
}
   bb93e:	bd38      	pop	{r3, r4, r5, pc}

000bb940 <_ZnwjRKSt9nothrow_t>:
   bb940:	f7f8 bba9 	b.w	b4096 <_Znwj>

000bb944 <_ZnajRKSt9nothrow_t>:
   bb944:	f7f8 bba9 	b.w	b409a <_Znaj>

000bb948 <_ZSt25__throw_bad_function_callv>:
   bb948:	b508      	push	{r3, lr}
   bb94a:	f7fb f9d1 	bl	b6cf0 <abort>
	...

000bb950 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb950:	4901      	ldr	r1, [pc, #4]	; (bb958 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb952:	f000 b8f9 	b.w	bbb48 <_ZNKSt9type_infoeqERKS_>
   bb956:	bf00      	nop
   bb958:	000be3cc 	.word	0x000be3cc

000bb95c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb95c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb95e:	2400      	movs	r4, #0
   bb960:	2310      	movs	r3, #16
   bb962:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb966:	6803      	ldr	r3, [r0, #0]
   bb968:	4615      	mov	r5, r2
   bb96a:	699e      	ldr	r6, [r3, #24]
   bb96c:	6812      	ldr	r2, [r2, #0]
   bb96e:	466b      	mov	r3, sp
   bb970:	e9cd 4400 	strd	r4, r4, [sp]
   bb974:	47b0      	blx	r6
   bb976:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb97a:	f003 0306 	and.w	r3, r3, #6
   bb97e:	2b06      	cmp	r3, #6
   bb980:	bf03      	ittte	eq
   bb982:	9b00      	ldreq	r3, [sp, #0]
   bb984:	602b      	streq	r3, [r5, #0]
   bb986:	2001      	moveq	r0, #1
   bb988:	4620      	movne	r0, r4
   bb98a:	b004      	add	sp, #16
   bb98c:	bd70      	pop	{r4, r5, r6, pc}

000bb98e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb98e:	9800      	ldr	r0, [sp, #0]
   bb990:	4290      	cmp	r0, r2
   bb992:	bf14      	ite	ne
   bb994:	2001      	movne	r0, #1
   bb996:	2006      	moveq	r0, #6
   bb998:	4770      	bx	lr
	...

000bb99c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb99c:	b510      	push	{r4, lr}
   bb99e:	4b03      	ldr	r3, [pc, #12]	; (bb9ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb9a0:	6003      	str	r3, [r0, #0]
   bb9a2:	4604      	mov	r4, r0
   bb9a4:	f000 f8cd 	bl	bbb42 <_ZNSt9type_infoD1Ev>
   bb9a8:	4620      	mov	r0, r4
   bb9aa:	bd10      	pop	{r4, pc}
   bb9ac:	000be40c 	.word	0x000be40c

000bb9b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb9b0:	b510      	push	{r4, lr}
   bb9b2:	4604      	mov	r4, r0
   bb9b4:	f7ff fff2 	bl	bb99c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb9b8:	4620      	mov	r0, r4
   bb9ba:	2108      	movs	r1, #8
   bb9bc:	f7f8 fb71 	bl	b40a2 <_ZdlPvj>
   bb9c0:	4620      	mov	r0, r4
   bb9c2:	bd10      	pop	{r4, pc}

000bb9c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb9c8:	461f      	mov	r7, r3
   bb9ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb9ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb9d2:	4598      	cmp	r8, r3
   bb9d4:	4606      	mov	r6, r0
   bb9d6:	4615      	mov	r5, r2
   bb9d8:	d107      	bne.n	bb9ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb9da:	9907      	ldr	r1, [sp, #28]
   bb9dc:	f000 f8b4 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bb9e0:	b118      	cbz	r0, bb9ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb9e2:	7165      	strb	r5, [r4, #5]
   bb9e4:	2000      	movs	r0, #0
   bb9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb9ea:	4639      	mov	r1, r7
   bb9ec:	4630      	mov	r0, r6
   bb9ee:	f000 f8ab 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bb9f2:	2800      	cmp	r0, #0
   bb9f4:	d0f6      	beq.n	bb9e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb9f6:	2301      	movs	r3, #1
   bb9f8:	f8c4 8000 	str.w	r8, [r4]
   bb9fc:	7125      	strb	r5, [r4, #4]
   bb9fe:	71a3      	strb	r3, [r4, #6]
   bba00:	e7f0      	b.n	bb9e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bba02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bba02:	b538      	push	{r3, r4, r5, lr}
   bba04:	4615      	mov	r5, r2
   bba06:	461c      	mov	r4, r3
   bba08:	f000 f89e 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bba0c:	b120      	cbz	r0, bba18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bba0e:	2308      	movs	r3, #8
   bba10:	60e3      	str	r3, [r4, #12]
   bba12:	2306      	movs	r3, #6
   bba14:	6025      	str	r5, [r4, #0]
   bba16:	7123      	strb	r3, [r4, #4]
   bba18:	bd38      	pop	{r3, r4, r5, pc}

000bba1a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bba1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bba1c:	4605      	mov	r5, r0
   bba1e:	460c      	mov	r4, r1
   bba20:	9201      	str	r2, [sp, #4]
   bba22:	461e      	mov	r6, r3
   bba24:	f000 f890 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bba28:	b950      	cbnz	r0, bba40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bba2a:	2e03      	cmp	r6, #3
   bba2c:	d808      	bhi.n	bba40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bba2e:	6823      	ldr	r3, [r4, #0]
   bba30:	9a01      	ldr	r2, [sp, #4]
   bba32:	695b      	ldr	r3, [r3, #20]
   bba34:	4629      	mov	r1, r5
   bba36:	4620      	mov	r0, r4
   bba38:	b002      	add	sp, #8
   bba3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bba3e:	4718      	bx	r3
   bba40:	b002      	add	sp, #8
   bba42:	bd70      	pop	{r4, r5, r6, pc}

000bba44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bba44:	b510      	push	{r4, lr}
   bba46:	4b03      	ldr	r3, [pc, #12]	; (bba54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bba48:	6003      	str	r3, [r0, #0]
   bba4a:	4604      	mov	r4, r0
   bba4c:	f7ff ffa6 	bl	bb99c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bba50:	4620      	mov	r0, r4
   bba52:	bd10      	pop	{r4, pc}
   bba54:	000be46c 	.word	0x000be46c

000bba58 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bba58:	b510      	push	{r4, lr}
   bba5a:	4604      	mov	r4, r0
   bba5c:	f7ff fff2 	bl	bba44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bba60:	4620      	mov	r0, r4
   bba62:	210c      	movs	r1, #12
   bba64:	f7f8 fb1d 	bl	b40a2 <_ZdlPvj>
   bba68:	4620      	mov	r0, r4
   bba6a:	bd10      	pop	{r4, pc}

000bba6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bba6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bba6e:	9f08      	ldr	r7, [sp, #32]
   bba70:	4297      	cmp	r7, r2
   bba72:	4605      	mov	r5, r0
   bba74:	460e      	mov	r6, r1
   bba76:	4614      	mov	r4, r2
   bba78:	d00a      	beq.n	bba90 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bba7a:	68a8      	ldr	r0, [r5, #8]
   bba7c:	6802      	ldr	r2, [r0, #0]
   bba7e:	9708      	str	r7, [sp, #32]
   bba80:	6a15      	ldr	r5, [r2, #32]
   bba82:	4631      	mov	r1, r6
   bba84:	4622      	mov	r2, r4
   bba86:	46ac      	mov	ip, r5
   bba88:	b003      	add	sp, #12
   bba8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bba8e:	4760      	bx	ip
   bba90:	4619      	mov	r1, r3
   bba92:	9301      	str	r3, [sp, #4]
   bba94:	f000 f858 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bba98:	9b01      	ldr	r3, [sp, #4]
   bba9a:	2800      	cmp	r0, #0
   bba9c:	d0ed      	beq.n	bba7a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bba9e:	2006      	movs	r0, #6
   bbaa0:	b003      	add	sp, #12
   bbaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbaa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bbaa4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbaa8:	460d      	mov	r5, r1
   bbaaa:	4619      	mov	r1, r3
   bbaac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bbab0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bbab4:	4681      	mov	r9, r0
   bbab6:	4617      	mov	r7, r2
   bbab8:	4698      	mov	r8, r3
   bbaba:	f000 f845 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bbabe:	b190      	cbz	r0, bbae6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bbac0:	2d00      	cmp	r5, #0
   bbac2:	6034      	str	r4, [r6, #0]
   bbac4:	7137      	strb	r7, [r6, #4]
   bbac6:	db09      	blt.n	bbadc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bbac8:	1961      	adds	r1, r4, r5
   bbaca:	458a      	cmp	sl, r1
   bbacc:	bf0c      	ite	eq
   bbace:	2106      	moveq	r1, #6
   bbad0:	2101      	movne	r1, #1
   bbad2:	71b1      	strb	r1, [r6, #6]
   bbad4:	2000      	movs	r0, #0
   bbad6:	b001      	add	sp, #4
   bbad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbadc:	3502      	adds	r5, #2
   bbade:	d1f9      	bne.n	bbad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbae0:	2301      	movs	r3, #1
   bbae2:	71b3      	strb	r3, [r6, #6]
   bbae4:	e7f6      	b.n	bbad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbae6:	4554      	cmp	r4, sl
   bbae8:	d106      	bne.n	bbaf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbaea:	4659      	mov	r1, fp
   bbaec:	4648      	mov	r0, r9
   bbaee:	f000 f82b 	bl	bbb48 <_ZNKSt9type_infoeqERKS_>
   bbaf2:	b108      	cbz	r0, bbaf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbaf4:	7177      	strb	r7, [r6, #5]
   bbaf6:	e7ed      	b.n	bbad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbaf8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bbafc:	6803      	ldr	r3, [r0, #0]
   bbafe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bbb02:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bbb06:	69dc      	ldr	r4, [r3, #28]
   bbb08:	463a      	mov	r2, r7
   bbb0a:	4643      	mov	r3, r8
   bbb0c:	4629      	mov	r1, r5
   bbb0e:	46a4      	mov	ip, r4
   bbb10:	b001      	add	sp, #4
   bbb12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbb16:	4760      	bx	ip

000bbb18 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bbb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbb1c:	4607      	mov	r7, r0
   bbb1e:	460c      	mov	r4, r1
   bbb20:	4615      	mov	r5, r2
   bbb22:	461e      	mov	r6, r3
   bbb24:	f7ff ff6d 	bl	bba02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bbb28:	b948      	cbnz	r0, bbb3e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bbb2a:	68b8      	ldr	r0, [r7, #8]
   bbb2c:	6803      	ldr	r3, [r0, #0]
   bbb2e:	699f      	ldr	r7, [r3, #24]
   bbb30:	462a      	mov	r2, r5
   bbb32:	4633      	mov	r3, r6
   bbb34:	4621      	mov	r1, r4
   bbb36:	46bc      	mov	ip, r7
   bbb38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbb3c:	4760      	bx	ip
   bbb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbb42 <_ZNSt9type_infoD1Ev>:
   bbb42:	4770      	bx	lr

000bbb44 <_ZNKSt9type_info14__is_pointer_pEv>:
   bbb44:	2000      	movs	r0, #0
   bbb46:	4770      	bx	lr

000bbb48 <_ZNKSt9type_infoeqERKS_>:
   bbb48:	4281      	cmp	r1, r0
   bbb4a:	b508      	push	{r3, lr}
   bbb4c:	d00e      	beq.n	bbb6c <_ZNKSt9type_infoeqERKS_+0x24>
   bbb4e:	6840      	ldr	r0, [r0, #4]
   bbb50:	7803      	ldrb	r3, [r0, #0]
   bbb52:	2b2a      	cmp	r3, #42	; 0x2a
   bbb54:	d00c      	beq.n	bbb70 <_ZNKSt9type_infoeqERKS_+0x28>
   bbb56:	6849      	ldr	r1, [r1, #4]
   bbb58:	780b      	ldrb	r3, [r1, #0]
   bbb5a:	2b2a      	cmp	r3, #42	; 0x2a
   bbb5c:	bf08      	it	eq
   bbb5e:	3101      	addeq	r1, #1
   bbb60:	f000 fd6d 	bl	bc63e <strcmp>
   bbb64:	fab0 f080 	clz	r0, r0
   bbb68:	0940      	lsrs	r0, r0, #5
   bbb6a:	bd08      	pop	{r3, pc}
   bbb6c:	2001      	movs	r0, #1
   bbb6e:	e7fc      	b.n	bbb6a <_ZNKSt9type_infoeqERKS_+0x22>
   bbb70:	2000      	movs	r0, #0
   bbb72:	e7fa      	b.n	bbb6a <_ZNKSt9type_infoeqERKS_+0x22>

000bbb74 <__aeabi_drsub>:
   bbb74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bbb78:	e002      	b.n	bbb80 <__adddf3>
   bbb7a:	bf00      	nop

000bbb7c <__aeabi_dsub>:
   bbb7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bbb80 <__adddf3>:
   bbb80:	b530      	push	{r4, r5, lr}
   bbb82:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bbb86:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bbb8a:	ea94 0f05 	teq	r4, r5
   bbb8e:	bf08      	it	eq
   bbb90:	ea90 0f02 	teqeq	r0, r2
   bbb94:	bf1f      	itttt	ne
   bbb96:	ea54 0c00 	orrsne.w	ip, r4, r0
   bbb9a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bbb9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bbba2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbba6:	f000 80e2 	beq.w	bbd6e <__adddf3+0x1ee>
   bbbaa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bbbae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bbbb2:	bfb8      	it	lt
   bbbb4:	426d      	neglt	r5, r5
   bbbb6:	dd0c      	ble.n	bbbd2 <__adddf3+0x52>
   bbbb8:	442c      	add	r4, r5
   bbbba:	ea80 0202 	eor.w	r2, r0, r2
   bbbbe:	ea81 0303 	eor.w	r3, r1, r3
   bbbc2:	ea82 0000 	eor.w	r0, r2, r0
   bbbc6:	ea83 0101 	eor.w	r1, r3, r1
   bbbca:	ea80 0202 	eor.w	r2, r0, r2
   bbbce:	ea81 0303 	eor.w	r3, r1, r3
   bbbd2:	2d36      	cmp	r5, #54	; 0x36
   bbbd4:	bf88      	it	hi
   bbbd6:	bd30      	pophi	{r4, r5, pc}
   bbbd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbbdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbbe0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bbbe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bbbe8:	d002      	beq.n	bbbf0 <__adddf3+0x70>
   bbbea:	4240      	negs	r0, r0
   bbbec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbbf0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bbbf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbbf8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bbbfc:	d002      	beq.n	bbc04 <__adddf3+0x84>
   bbbfe:	4252      	negs	r2, r2
   bbc00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bbc04:	ea94 0f05 	teq	r4, r5
   bbc08:	f000 80a7 	beq.w	bbd5a <__adddf3+0x1da>
   bbc0c:	f1a4 0401 	sub.w	r4, r4, #1
   bbc10:	f1d5 0e20 	rsbs	lr, r5, #32
   bbc14:	db0d      	blt.n	bbc32 <__adddf3+0xb2>
   bbc16:	fa02 fc0e 	lsl.w	ip, r2, lr
   bbc1a:	fa22 f205 	lsr.w	r2, r2, r5
   bbc1e:	1880      	adds	r0, r0, r2
   bbc20:	f141 0100 	adc.w	r1, r1, #0
   bbc24:	fa03 f20e 	lsl.w	r2, r3, lr
   bbc28:	1880      	adds	r0, r0, r2
   bbc2a:	fa43 f305 	asr.w	r3, r3, r5
   bbc2e:	4159      	adcs	r1, r3
   bbc30:	e00e      	b.n	bbc50 <__adddf3+0xd0>
   bbc32:	f1a5 0520 	sub.w	r5, r5, #32
   bbc36:	f10e 0e20 	add.w	lr, lr, #32
   bbc3a:	2a01      	cmp	r2, #1
   bbc3c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bbc40:	bf28      	it	cs
   bbc42:	f04c 0c02 	orrcs.w	ip, ip, #2
   bbc46:	fa43 f305 	asr.w	r3, r3, r5
   bbc4a:	18c0      	adds	r0, r0, r3
   bbc4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bbc50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbc54:	d507      	bpl.n	bbc66 <__adddf3+0xe6>
   bbc56:	f04f 0e00 	mov.w	lr, #0
   bbc5a:	f1dc 0c00 	rsbs	ip, ip, #0
   bbc5e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bbc62:	eb6e 0101 	sbc.w	r1, lr, r1
   bbc66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bbc6a:	d31b      	bcc.n	bbca4 <__adddf3+0x124>
   bbc6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bbc70:	d30c      	bcc.n	bbc8c <__adddf3+0x10c>
   bbc72:	0849      	lsrs	r1, r1, #1
   bbc74:	ea5f 0030 	movs.w	r0, r0, rrx
   bbc78:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bbc7c:	f104 0401 	add.w	r4, r4, #1
   bbc80:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bbc84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bbc88:	f080 809a 	bcs.w	bbdc0 <__adddf3+0x240>
   bbc8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bbc90:	bf08      	it	eq
   bbc92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbc96:	f150 0000 	adcs.w	r0, r0, #0
   bbc9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbc9e:	ea41 0105 	orr.w	r1, r1, r5
   bbca2:	bd30      	pop	{r4, r5, pc}
   bbca4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bbca8:	4140      	adcs	r0, r0
   bbcaa:	eb41 0101 	adc.w	r1, r1, r1
   bbcae:	3c01      	subs	r4, #1
   bbcb0:	bf28      	it	cs
   bbcb2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bbcb6:	d2e9      	bcs.n	bbc8c <__adddf3+0x10c>
   bbcb8:	f091 0f00 	teq	r1, #0
   bbcbc:	bf04      	itt	eq
   bbcbe:	4601      	moveq	r1, r0
   bbcc0:	2000      	moveq	r0, #0
   bbcc2:	fab1 f381 	clz	r3, r1
   bbcc6:	bf08      	it	eq
   bbcc8:	3320      	addeq	r3, #32
   bbcca:	f1a3 030b 	sub.w	r3, r3, #11
   bbcce:	f1b3 0220 	subs.w	r2, r3, #32
   bbcd2:	da0c      	bge.n	bbcee <__adddf3+0x16e>
   bbcd4:	320c      	adds	r2, #12
   bbcd6:	dd08      	ble.n	bbcea <__adddf3+0x16a>
   bbcd8:	f102 0c14 	add.w	ip, r2, #20
   bbcdc:	f1c2 020c 	rsb	r2, r2, #12
   bbce0:	fa01 f00c 	lsl.w	r0, r1, ip
   bbce4:	fa21 f102 	lsr.w	r1, r1, r2
   bbce8:	e00c      	b.n	bbd04 <__adddf3+0x184>
   bbcea:	f102 0214 	add.w	r2, r2, #20
   bbcee:	bfd8      	it	le
   bbcf0:	f1c2 0c20 	rsble	ip, r2, #32
   bbcf4:	fa01 f102 	lsl.w	r1, r1, r2
   bbcf8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bbcfc:	bfdc      	itt	le
   bbcfe:	ea41 010c 	orrle.w	r1, r1, ip
   bbd02:	4090      	lslle	r0, r2
   bbd04:	1ae4      	subs	r4, r4, r3
   bbd06:	bfa2      	ittt	ge
   bbd08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bbd0c:	4329      	orrge	r1, r5
   bbd0e:	bd30      	popge	{r4, r5, pc}
   bbd10:	ea6f 0404 	mvn.w	r4, r4
   bbd14:	3c1f      	subs	r4, #31
   bbd16:	da1c      	bge.n	bbd52 <__adddf3+0x1d2>
   bbd18:	340c      	adds	r4, #12
   bbd1a:	dc0e      	bgt.n	bbd3a <__adddf3+0x1ba>
   bbd1c:	f104 0414 	add.w	r4, r4, #20
   bbd20:	f1c4 0220 	rsb	r2, r4, #32
   bbd24:	fa20 f004 	lsr.w	r0, r0, r4
   bbd28:	fa01 f302 	lsl.w	r3, r1, r2
   bbd2c:	ea40 0003 	orr.w	r0, r0, r3
   bbd30:	fa21 f304 	lsr.w	r3, r1, r4
   bbd34:	ea45 0103 	orr.w	r1, r5, r3
   bbd38:	bd30      	pop	{r4, r5, pc}
   bbd3a:	f1c4 040c 	rsb	r4, r4, #12
   bbd3e:	f1c4 0220 	rsb	r2, r4, #32
   bbd42:	fa20 f002 	lsr.w	r0, r0, r2
   bbd46:	fa01 f304 	lsl.w	r3, r1, r4
   bbd4a:	ea40 0003 	orr.w	r0, r0, r3
   bbd4e:	4629      	mov	r1, r5
   bbd50:	bd30      	pop	{r4, r5, pc}
   bbd52:	fa21 f004 	lsr.w	r0, r1, r4
   bbd56:	4629      	mov	r1, r5
   bbd58:	bd30      	pop	{r4, r5, pc}
   bbd5a:	f094 0f00 	teq	r4, #0
   bbd5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bbd62:	bf06      	itte	eq
   bbd64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bbd68:	3401      	addeq	r4, #1
   bbd6a:	3d01      	subne	r5, #1
   bbd6c:	e74e      	b.n	bbc0c <__adddf3+0x8c>
   bbd6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbd72:	bf18      	it	ne
   bbd74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbd78:	d029      	beq.n	bbdce <__adddf3+0x24e>
   bbd7a:	ea94 0f05 	teq	r4, r5
   bbd7e:	bf08      	it	eq
   bbd80:	ea90 0f02 	teqeq	r0, r2
   bbd84:	d005      	beq.n	bbd92 <__adddf3+0x212>
   bbd86:	ea54 0c00 	orrs.w	ip, r4, r0
   bbd8a:	bf04      	itt	eq
   bbd8c:	4619      	moveq	r1, r3
   bbd8e:	4610      	moveq	r0, r2
   bbd90:	bd30      	pop	{r4, r5, pc}
   bbd92:	ea91 0f03 	teq	r1, r3
   bbd96:	bf1e      	ittt	ne
   bbd98:	2100      	movne	r1, #0
   bbd9a:	2000      	movne	r0, #0
   bbd9c:	bd30      	popne	{r4, r5, pc}
   bbd9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bbda2:	d105      	bne.n	bbdb0 <__adddf3+0x230>
   bbda4:	0040      	lsls	r0, r0, #1
   bbda6:	4149      	adcs	r1, r1
   bbda8:	bf28      	it	cs
   bbdaa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bbdae:	bd30      	pop	{r4, r5, pc}
   bbdb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bbdb4:	bf3c      	itt	cc
   bbdb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bbdba:	bd30      	popcc	{r4, r5, pc}
   bbdbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbdc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bbdc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbdc8:	f04f 0000 	mov.w	r0, #0
   bbdcc:	bd30      	pop	{r4, r5, pc}
   bbdce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbdd2:	bf1a      	itte	ne
   bbdd4:	4619      	movne	r1, r3
   bbdd6:	4610      	movne	r0, r2
   bbdd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bbddc:	bf1c      	itt	ne
   bbdde:	460b      	movne	r3, r1
   bbde0:	4602      	movne	r2, r0
   bbde2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbde6:	bf06      	itte	eq
   bbde8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bbdec:	ea91 0f03 	teqeq	r1, r3
   bbdf0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bbdf4:	bd30      	pop	{r4, r5, pc}
   bbdf6:	bf00      	nop

000bbdf8 <__aeabi_ui2d>:
   bbdf8:	f090 0f00 	teq	r0, #0
   bbdfc:	bf04      	itt	eq
   bbdfe:	2100      	moveq	r1, #0
   bbe00:	4770      	bxeq	lr
   bbe02:	b530      	push	{r4, r5, lr}
   bbe04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe0c:	f04f 0500 	mov.w	r5, #0
   bbe10:	f04f 0100 	mov.w	r1, #0
   bbe14:	e750      	b.n	bbcb8 <__adddf3+0x138>
   bbe16:	bf00      	nop

000bbe18 <__aeabi_i2d>:
   bbe18:	f090 0f00 	teq	r0, #0
   bbe1c:	bf04      	itt	eq
   bbe1e:	2100      	moveq	r1, #0
   bbe20:	4770      	bxeq	lr
   bbe22:	b530      	push	{r4, r5, lr}
   bbe24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bbe30:	bf48      	it	mi
   bbe32:	4240      	negmi	r0, r0
   bbe34:	f04f 0100 	mov.w	r1, #0
   bbe38:	e73e      	b.n	bbcb8 <__adddf3+0x138>
   bbe3a:	bf00      	nop

000bbe3c <__aeabi_f2d>:
   bbe3c:	0042      	lsls	r2, r0, #1
   bbe3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bbe42:	ea4f 0131 	mov.w	r1, r1, rrx
   bbe46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bbe4a:	bf1f      	itttt	ne
   bbe4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bbe50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bbe54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bbe58:	4770      	bxne	lr
   bbe5a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bbe5e:	bf08      	it	eq
   bbe60:	4770      	bxeq	lr
   bbe62:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bbe66:	bf04      	itt	eq
   bbe68:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bbe6c:	4770      	bxeq	lr
   bbe6e:	b530      	push	{r4, r5, lr}
   bbe70:	f44f 7460 	mov.w	r4, #896	; 0x380
   bbe74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbe78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbe7c:	e71c      	b.n	bbcb8 <__adddf3+0x138>
   bbe7e:	bf00      	nop

000bbe80 <__aeabi_ul2d>:
   bbe80:	ea50 0201 	orrs.w	r2, r0, r1
   bbe84:	bf08      	it	eq
   bbe86:	4770      	bxeq	lr
   bbe88:	b530      	push	{r4, r5, lr}
   bbe8a:	f04f 0500 	mov.w	r5, #0
   bbe8e:	e00a      	b.n	bbea6 <__aeabi_l2d+0x16>

000bbe90 <__aeabi_l2d>:
   bbe90:	ea50 0201 	orrs.w	r2, r0, r1
   bbe94:	bf08      	it	eq
   bbe96:	4770      	bxeq	lr
   bbe98:	b530      	push	{r4, r5, lr}
   bbe9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bbe9e:	d502      	bpl.n	bbea6 <__aeabi_l2d+0x16>
   bbea0:	4240      	negs	r0, r0
   bbea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbea6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbeaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbeae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbeb2:	f43f aed8 	beq.w	bbc66 <__adddf3+0xe6>
   bbeb6:	f04f 0203 	mov.w	r2, #3
   bbeba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbebe:	bf18      	it	ne
   bbec0:	3203      	addne	r2, #3
   bbec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbec6:	bf18      	it	ne
   bbec8:	3203      	addne	r2, #3
   bbeca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbece:	f1c2 0320 	rsb	r3, r2, #32
   bbed2:	fa00 fc03 	lsl.w	ip, r0, r3
   bbed6:	fa20 f002 	lsr.w	r0, r0, r2
   bbeda:	fa01 fe03 	lsl.w	lr, r1, r3
   bbede:	ea40 000e 	orr.w	r0, r0, lr
   bbee2:	fa21 f102 	lsr.w	r1, r1, r2
   bbee6:	4414      	add	r4, r2
   bbee8:	e6bd      	b.n	bbc66 <__adddf3+0xe6>
   bbeea:	bf00      	nop

000bbeec <__aeabi_dmul>:
   bbeec:	b570      	push	{r4, r5, r6, lr}
   bbeee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbef2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbef6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbefa:	bf1d      	ittte	ne
   bbefc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbf00:	ea94 0f0c 	teqne	r4, ip
   bbf04:	ea95 0f0c 	teqne	r5, ip
   bbf08:	f000 f8de 	bleq	bc0c8 <__aeabi_dmul+0x1dc>
   bbf0c:	442c      	add	r4, r5
   bbf0e:	ea81 0603 	eor.w	r6, r1, r3
   bbf12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbf16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbf1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbf1e:	bf18      	it	ne
   bbf20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbf24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbf28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbf2c:	d038      	beq.n	bbfa0 <__aeabi_dmul+0xb4>
   bbf2e:	fba0 ce02 	umull	ip, lr, r0, r2
   bbf32:	f04f 0500 	mov.w	r5, #0
   bbf36:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbf3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbf3e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbf42:	f04f 0600 	mov.w	r6, #0
   bbf46:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbf4a:	f09c 0f00 	teq	ip, #0
   bbf4e:	bf18      	it	ne
   bbf50:	f04e 0e01 	orrne.w	lr, lr, #1
   bbf54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbf58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbf5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbf60:	d204      	bcs.n	bbf6c <__aeabi_dmul+0x80>
   bbf62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbf66:	416d      	adcs	r5, r5
   bbf68:	eb46 0606 	adc.w	r6, r6, r6
   bbf6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbf70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbf74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbf78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbf7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbf80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbf84:	bf88      	it	hi
   bbf86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbf8a:	d81e      	bhi.n	bbfca <__aeabi_dmul+0xde>
   bbf8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbf90:	bf08      	it	eq
   bbf92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbf96:	f150 0000 	adcs.w	r0, r0, #0
   bbf9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbf9e:	bd70      	pop	{r4, r5, r6, pc}
   bbfa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbfa4:	ea46 0101 	orr.w	r1, r6, r1
   bbfa8:	ea40 0002 	orr.w	r0, r0, r2
   bbfac:	ea81 0103 	eor.w	r1, r1, r3
   bbfb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbfb4:	bfc2      	ittt	gt
   bbfb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbfba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbfbe:	bd70      	popgt	{r4, r5, r6, pc}
   bbfc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbfc4:	f04f 0e00 	mov.w	lr, #0
   bbfc8:	3c01      	subs	r4, #1
   bbfca:	f300 80ab 	bgt.w	bc124 <__aeabi_dmul+0x238>
   bbfce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbfd2:	bfde      	ittt	le
   bbfd4:	2000      	movle	r0, #0
   bbfd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbfda:	bd70      	pople	{r4, r5, r6, pc}
   bbfdc:	f1c4 0400 	rsb	r4, r4, #0
   bbfe0:	3c20      	subs	r4, #32
   bbfe2:	da35      	bge.n	bc050 <__aeabi_dmul+0x164>
   bbfe4:	340c      	adds	r4, #12
   bbfe6:	dc1b      	bgt.n	bc020 <__aeabi_dmul+0x134>
   bbfe8:	f104 0414 	add.w	r4, r4, #20
   bbfec:	f1c4 0520 	rsb	r5, r4, #32
   bbff0:	fa00 f305 	lsl.w	r3, r0, r5
   bbff4:	fa20 f004 	lsr.w	r0, r0, r4
   bbff8:	fa01 f205 	lsl.w	r2, r1, r5
   bbffc:	ea40 0002 	orr.w	r0, r0, r2
   bc000:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bc004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc008:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc00c:	fa21 f604 	lsr.w	r6, r1, r4
   bc010:	eb42 0106 	adc.w	r1, r2, r6
   bc014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc018:	bf08      	it	eq
   bc01a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc01e:	bd70      	pop	{r4, r5, r6, pc}
   bc020:	f1c4 040c 	rsb	r4, r4, #12
   bc024:	f1c4 0520 	rsb	r5, r4, #32
   bc028:	fa00 f304 	lsl.w	r3, r0, r4
   bc02c:	fa20 f005 	lsr.w	r0, r0, r5
   bc030:	fa01 f204 	lsl.w	r2, r1, r4
   bc034:	ea40 0002 	orr.w	r0, r0, r2
   bc038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc03c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc040:	f141 0100 	adc.w	r1, r1, #0
   bc044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc048:	bf08      	it	eq
   bc04a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc04e:	bd70      	pop	{r4, r5, r6, pc}
   bc050:	f1c4 0520 	rsb	r5, r4, #32
   bc054:	fa00 f205 	lsl.w	r2, r0, r5
   bc058:	ea4e 0e02 	orr.w	lr, lr, r2
   bc05c:	fa20 f304 	lsr.w	r3, r0, r4
   bc060:	fa01 f205 	lsl.w	r2, r1, r5
   bc064:	ea43 0302 	orr.w	r3, r3, r2
   bc068:	fa21 f004 	lsr.w	r0, r1, r4
   bc06c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc070:	fa21 f204 	lsr.w	r2, r1, r4
   bc074:	ea20 0002 	bic.w	r0, r0, r2
   bc078:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc07c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc080:	bf08      	it	eq
   bc082:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc086:	bd70      	pop	{r4, r5, r6, pc}
   bc088:	f094 0f00 	teq	r4, #0
   bc08c:	d10f      	bne.n	bc0ae <__aeabi_dmul+0x1c2>
   bc08e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc092:	0040      	lsls	r0, r0, #1
   bc094:	eb41 0101 	adc.w	r1, r1, r1
   bc098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc09c:	bf08      	it	eq
   bc09e:	3c01      	subeq	r4, #1
   bc0a0:	d0f7      	beq.n	bc092 <__aeabi_dmul+0x1a6>
   bc0a2:	ea41 0106 	orr.w	r1, r1, r6
   bc0a6:	f095 0f00 	teq	r5, #0
   bc0aa:	bf18      	it	ne
   bc0ac:	4770      	bxne	lr
   bc0ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc0b2:	0052      	lsls	r2, r2, #1
   bc0b4:	eb43 0303 	adc.w	r3, r3, r3
   bc0b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc0bc:	bf08      	it	eq
   bc0be:	3d01      	subeq	r5, #1
   bc0c0:	d0f7      	beq.n	bc0b2 <__aeabi_dmul+0x1c6>
   bc0c2:	ea43 0306 	orr.w	r3, r3, r6
   bc0c6:	4770      	bx	lr
   bc0c8:	ea94 0f0c 	teq	r4, ip
   bc0cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc0d0:	bf18      	it	ne
   bc0d2:	ea95 0f0c 	teqne	r5, ip
   bc0d6:	d00c      	beq.n	bc0f2 <__aeabi_dmul+0x206>
   bc0d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc0dc:	bf18      	it	ne
   bc0de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc0e2:	d1d1      	bne.n	bc088 <__aeabi_dmul+0x19c>
   bc0e4:	ea81 0103 	eor.w	r1, r1, r3
   bc0e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc0ec:	f04f 0000 	mov.w	r0, #0
   bc0f0:	bd70      	pop	{r4, r5, r6, pc}
   bc0f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc0f6:	bf06      	itte	eq
   bc0f8:	4610      	moveq	r0, r2
   bc0fa:	4619      	moveq	r1, r3
   bc0fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc100:	d019      	beq.n	bc136 <__aeabi_dmul+0x24a>
   bc102:	ea94 0f0c 	teq	r4, ip
   bc106:	d102      	bne.n	bc10e <__aeabi_dmul+0x222>
   bc108:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc10c:	d113      	bne.n	bc136 <__aeabi_dmul+0x24a>
   bc10e:	ea95 0f0c 	teq	r5, ip
   bc112:	d105      	bne.n	bc120 <__aeabi_dmul+0x234>
   bc114:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc118:	bf1c      	itt	ne
   bc11a:	4610      	movne	r0, r2
   bc11c:	4619      	movne	r1, r3
   bc11e:	d10a      	bne.n	bc136 <__aeabi_dmul+0x24a>
   bc120:	ea81 0103 	eor.w	r1, r1, r3
   bc124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc128:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc12c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc130:	f04f 0000 	mov.w	r0, #0
   bc134:	bd70      	pop	{r4, r5, r6, pc}
   bc136:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc13a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc13e:	bd70      	pop	{r4, r5, r6, pc}

000bc140 <__aeabi_ddiv>:
   bc140:	b570      	push	{r4, r5, r6, lr}
   bc142:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc146:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc14a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc14e:	bf1d      	ittte	ne
   bc150:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc154:	ea94 0f0c 	teqne	r4, ip
   bc158:	ea95 0f0c 	teqne	r5, ip
   bc15c:	f000 f8a7 	bleq	bc2ae <__aeabi_ddiv+0x16e>
   bc160:	eba4 0405 	sub.w	r4, r4, r5
   bc164:	ea81 0e03 	eor.w	lr, r1, r3
   bc168:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc16c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc170:	f000 8088 	beq.w	bc284 <__aeabi_ddiv+0x144>
   bc174:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc178:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc17c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc180:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc184:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc188:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc18c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc190:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc194:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc198:	429d      	cmp	r5, r3
   bc19a:	bf08      	it	eq
   bc19c:	4296      	cmpeq	r6, r2
   bc19e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc1a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc1a6:	d202      	bcs.n	bc1ae <__aeabi_ddiv+0x6e>
   bc1a8:	085b      	lsrs	r3, r3, #1
   bc1aa:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1ae:	1ab6      	subs	r6, r6, r2
   bc1b0:	eb65 0503 	sbc.w	r5, r5, r3
   bc1b4:	085b      	lsrs	r3, r3, #1
   bc1b6:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc1be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc1c2:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1ca:	bf22      	ittt	cs
   bc1cc:	1ab6      	subcs	r6, r6, r2
   bc1ce:	4675      	movcs	r5, lr
   bc1d0:	ea40 000c 	orrcs.w	r0, r0, ip
   bc1d4:	085b      	lsrs	r3, r3, #1
   bc1d6:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1da:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1de:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1e2:	bf22      	ittt	cs
   bc1e4:	1ab6      	subcs	r6, r6, r2
   bc1e6:	4675      	movcs	r5, lr
   bc1e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc1ec:	085b      	lsrs	r3, r3, #1
   bc1ee:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1fa:	bf22      	ittt	cs
   bc1fc:	1ab6      	subcs	r6, r6, r2
   bc1fe:	4675      	movcs	r5, lr
   bc200:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc204:	085b      	lsrs	r3, r3, #1
   bc206:	ea4f 0232 	mov.w	r2, r2, rrx
   bc20a:	ebb6 0e02 	subs.w	lr, r6, r2
   bc20e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc212:	bf22      	ittt	cs
   bc214:	1ab6      	subcs	r6, r6, r2
   bc216:	4675      	movcs	r5, lr
   bc218:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc21c:	ea55 0e06 	orrs.w	lr, r5, r6
   bc220:	d018      	beq.n	bc254 <__aeabi_ddiv+0x114>
   bc222:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc226:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc22a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc22e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc232:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc236:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc23a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc23e:	d1c0      	bne.n	bc1c2 <__aeabi_ddiv+0x82>
   bc240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc244:	d10b      	bne.n	bc25e <__aeabi_ddiv+0x11e>
   bc246:	ea41 0100 	orr.w	r1, r1, r0
   bc24a:	f04f 0000 	mov.w	r0, #0
   bc24e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc252:	e7b6      	b.n	bc1c2 <__aeabi_ddiv+0x82>
   bc254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc258:	bf04      	itt	eq
   bc25a:	4301      	orreq	r1, r0
   bc25c:	2000      	moveq	r0, #0
   bc25e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc262:	bf88      	it	hi
   bc264:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc268:	f63f aeaf 	bhi.w	bbfca <__aeabi_dmul+0xde>
   bc26c:	ebb5 0c03 	subs.w	ip, r5, r3
   bc270:	bf04      	itt	eq
   bc272:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc27a:	f150 0000 	adcs.w	r0, r0, #0
   bc27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc282:	bd70      	pop	{r4, r5, r6, pc}
   bc284:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc288:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc28c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc290:	bfc2      	ittt	gt
   bc292:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc29a:	bd70      	popgt	{r4, r5, r6, pc}
   bc29c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc2a0:	f04f 0e00 	mov.w	lr, #0
   bc2a4:	3c01      	subs	r4, #1
   bc2a6:	e690      	b.n	bbfca <__aeabi_dmul+0xde>
   bc2a8:	ea45 0e06 	orr.w	lr, r5, r6
   bc2ac:	e68d      	b.n	bbfca <__aeabi_dmul+0xde>
   bc2ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc2b2:	ea94 0f0c 	teq	r4, ip
   bc2b6:	bf08      	it	eq
   bc2b8:	ea95 0f0c 	teqeq	r5, ip
   bc2bc:	f43f af3b 	beq.w	bc136 <__aeabi_dmul+0x24a>
   bc2c0:	ea94 0f0c 	teq	r4, ip
   bc2c4:	d10a      	bne.n	bc2dc <__aeabi_ddiv+0x19c>
   bc2c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc2ca:	f47f af34 	bne.w	bc136 <__aeabi_dmul+0x24a>
   bc2ce:	ea95 0f0c 	teq	r5, ip
   bc2d2:	f47f af25 	bne.w	bc120 <__aeabi_dmul+0x234>
   bc2d6:	4610      	mov	r0, r2
   bc2d8:	4619      	mov	r1, r3
   bc2da:	e72c      	b.n	bc136 <__aeabi_dmul+0x24a>
   bc2dc:	ea95 0f0c 	teq	r5, ip
   bc2e0:	d106      	bne.n	bc2f0 <__aeabi_ddiv+0x1b0>
   bc2e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc2e6:	f43f aefd 	beq.w	bc0e4 <__aeabi_dmul+0x1f8>
   bc2ea:	4610      	mov	r0, r2
   bc2ec:	4619      	mov	r1, r3
   bc2ee:	e722      	b.n	bc136 <__aeabi_dmul+0x24a>
   bc2f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc2f4:	bf18      	it	ne
   bc2f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc2fa:	f47f aec5 	bne.w	bc088 <__aeabi_dmul+0x19c>
   bc2fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc302:	f47f af0d 	bne.w	bc120 <__aeabi_dmul+0x234>
   bc306:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc30a:	f47f aeeb 	bne.w	bc0e4 <__aeabi_dmul+0x1f8>
   bc30e:	e712      	b.n	bc136 <__aeabi_dmul+0x24a>

000bc310 <__gedf2>:
   bc310:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc314:	e006      	b.n	bc324 <__cmpdf2+0x4>
   bc316:	bf00      	nop

000bc318 <__ledf2>:
   bc318:	f04f 0c01 	mov.w	ip, #1
   bc31c:	e002      	b.n	bc324 <__cmpdf2+0x4>
   bc31e:	bf00      	nop

000bc320 <__cmpdf2>:
   bc320:	f04f 0c01 	mov.w	ip, #1
   bc324:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc328:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc32c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc330:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc334:	bf18      	it	ne
   bc336:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc33a:	d01b      	beq.n	bc374 <__cmpdf2+0x54>
   bc33c:	b001      	add	sp, #4
   bc33e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc342:	bf0c      	ite	eq
   bc344:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc348:	ea91 0f03 	teqne	r1, r3
   bc34c:	bf02      	ittt	eq
   bc34e:	ea90 0f02 	teqeq	r0, r2
   bc352:	2000      	moveq	r0, #0
   bc354:	4770      	bxeq	lr
   bc356:	f110 0f00 	cmn.w	r0, #0
   bc35a:	ea91 0f03 	teq	r1, r3
   bc35e:	bf58      	it	pl
   bc360:	4299      	cmppl	r1, r3
   bc362:	bf08      	it	eq
   bc364:	4290      	cmpeq	r0, r2
   bc366:	bf2c      	ite	cs
   bc368:	17d8      	asrcs	r0, r3, #31
   bc36a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc36e:	f040 0001 	orr.w	r0, r0, #1
   bc372:	4770      	bx	lr
   bc374:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc378:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc37c:	d102      	bne.n	bc384 <__cmpdf2+0x64>
   bc37e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc382:	d107      	bne.n	bc394 <__cmpdf2+0x74>
   bc384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc38c:	d1d6      	bne.n	bc33c <__cmpdf2+0x1c>
   bc38e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc392:	d0d3      	beq.n	bc33c <__cmpdf2+0x1c>
   bc394:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc398:	4770      	bx	lr
   bc39a:	bf00      	nop

000bc39c <__aeabi_cdrcmple>:
   bc39c:	4684      	mov	ip, r0
   bc39e:	4610      	mov	r0, r2
   bc3a0:	4662      	mov	r2, ip
   bc3a2:	468c      	mov	ip, r1
   bc3a4:	4619      	mov	r1, r3
   bc3a6:	4663      	mov	r3, ip
   bc3a8:	e000      	b.n	bc3ac <__aeabi_cdcmpeq>
   bc3aa:	bf00      	nop

000bc3ac <__aeabi_cdcmpeq>:
   bc3ac:	b501      	push	{r0, lr}
   bc3ae:	f7ff ffb7 	bl	bc320 <__cmpdf2>
   bc3b2:	2800      	cmp	r0, #0
   bc3b4:	bf48      	it	mi
   bc3b6:	f110 0f00 	cmnmi.w	r0, #0
   bc3ba:	bd01      	pop	{r0, pc}

000bc3bc <__aeabi_dcmpeq>:
   bc3bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3c0:	f7ff fff4 	bl	bc3ac <__aeabi_cdcmpeq>
   bc3c4:	bf0c      	ite	eq
   bc3c6:	2001      	moveq	r0, #1
   bc3c8:	2000      	movne	r0, #0
   bc3ca:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3ce:	bf00      	nop

000bc3d0 <__aeabi_dcmplt>:
   bc3d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3d4:	f7ff ffea 	bl	bc3ac <__aeabi_cdcmpeq>
   bc3d8:	bf34      	ite	cc
   bc3da:	2001      	movcc	r0, #1
   bc3dc:	2000      	movcs	r0, #0
   bc3de:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3e2:	bf00      	nop

000bc3e4 <__aeabi_dcmple>:
   bc3e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3e8:	f7ff ffe0 	bl	bc3ac <__aeabi_cdcmpeq>
   bc3ec:	bf94      	ite	ls
   bc3ee:	2001      	movls	r0, #1
   bc3f0:	2000      	movhi	r0, #0
   bc3f2:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3f6:	bf00      	nop

000bc3f8 <__aeabi_dcmpge>:
   bc3f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3fc:	f7ff ffce 	bl	bc39c <__aeabi_cdrcmple>
   bc400:	bf94      	ite	ls
   bc402:	2001      	movls	r0, #1
   bc404:	2000      	movhi	r0, #0
   bc406:	f85d fb08 	ldr.w	pc, [sp], #8
   bc40a:	bf00      	nop

000bc40c <__aeabi_dcmpgt>:
   bc40c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc410:	f7ff ffc4 	bl	bc39c <__aeabi_cdrcmple>
   bc414:	bf34      	ite	cc
   bc416:	2001      	movcc	r0, #1
   bc418:	2000      	movcs	r0, #0
   bc41a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc41e:	bf00      	nop

000bc420 <__aeabi_d2iz>:
   bc420:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc424:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc428:	d215      	bcs.n	bc456 <__aeabi_d2iz+0x36>
   bc42a:	d511      	bpl.n	bc450 <__aeabi_d2iz+0x30>
   bc42c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc430:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc434:	d912      	bls.n	bc45c <__aeabi_d2iz+0x3c>
   bc436:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc43a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc43e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc442:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc446:	fa23 f002 	lsr.w	r0, r3, r2
   bc44a:	bf18      	it	ne
   bc44c:	4240      	negne	r0, r0
   bc44e:	4770      	bx	lr
   bc450:	f04f 0000 	mov.w	r0, #0
   bc454:	4770      	bx	lr
   bc456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc45a:	d105      	bne.n	bc468 <__aeabi_d2iz+0x48>
   bc45c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bc460:	bf08      	it	eq
   bc462:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bc466:	4770      	bx	lr
   bc468:	f04f 0000 	mov.w	r0, #0
   bc46c:	4770      	bx	lr
   bc46e:	bf00      	nop

000bc470 <__aeabi_d2f>:
   bc470:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc474:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc478:	bf24      	itt	cs
   bc47a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc47e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc482:	d90d      	bls.n	bc4a0 <__aeabi_d2f+0x30>
   bc484:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc488:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc48c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc490:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc494:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc498:	bf08      	it	eq
   bc49a:	f020 0001 	biceq.w	r0, r0, #1
   bc49e:	4770      	bx	lr
   bc4a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc4a4:	d121      	bne.n	bc4ea <__aeabi_d2f+0x7a>
   bc4a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc4aa:	bfbc      	itt	lt
   bc4ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc4b0:	4770      	bxlt	lr
   bc4b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc4b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc4ba:	f1c2 0218 	rsb	r2, r2, #24
   bc4be:	f1c2 0c20 	rsb	ip, r2, #32
   bc4c2:	fa10 f30c 	lsls.w	r3, r0, ip
   bc4c6:	fa20 f002 	lsr.w	r0, r0, r2
   bc4ca:	bf18      	it	ne
   bc4cc:	f040 0001 	orrne.w	r0, r0, #1
   bc4d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc4d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc4d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc4dc:	ea40 000c 	orr.w	r0, r0, ip
   bc4e0:	fa23 f302 	lsr.w	r3, r3, r2
   bc4e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc4e8:	e7cc      	b.n	bc484 <__aeabi_d2f+0x14>
   bc4ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc4ee:	d107      	bne.n	bc500 <__aeabi_d2f+0x90>
   bc4f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc4f4:	bf1e      	ittt	ne
   bc4f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc4fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc4fe:	4770      	bxne	lr
   bc500:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc50c:	4770      	bx	lr
   bc50e:	bf00      	nop

000bc510 <atexit>:
   bc510:	2300      	movs	r3, #0
   bc512:	4601      	mov	r1, r0
   bc514:	461a      	mov	r2, r3
   bc516:	4618      	mov	r0, r3
   bc518:	f000 b982 	b.w	bc820 <__register_exitproc>

000bc51c <atol>:
   bc51c:	220a      	movs	r2, #10
   bc51e:	2100      	movs	r1, #0
   bc520:	f000 b974 	b.w	bc80c <strtol>

000bc524 <isprint>:
   bc524:	4b02      	ldr	r3, [pc, #8]	; (bc530 <isprint+0xc>)
   bc526:	4418      	add	r0, r3
   bc528:	7840      	ldrb	r0, [r0, #1]
   bc52a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bc52e:	4770      	bx	lr
   bc530:	000be539 	.word	0x000be539

000bc534 <memcmp>:
   bc534:	b510      	push	{r4, lr}
   bc536:	3901      	subs	r1, #1
   bc538:	4402      	add	r2, r0
   bc53a:	4290      	cmp	r0, r2
   bc53c:	d101      	bne.n	bc542 <memcmp+0xe>
   bc53e:	2000      	movs	r0, #0
   bc540:	e005      	b.n	bc54e <memcmp+0x1a>
   bc542:	7803      	ldrb	r3, [r0, #0]
   bc544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc548:	42a3      	cmp	r3, r4
   bc54a:	d001      	beq.n	bc550 <memcmp+0x1c>
   bc54c:	1b18      	subs	r0, r3, r4
   bc54e:	bd10      	pop	{r4, pc}
   bc550:	3001      	adds	r0, #1
   bc552:	e7f2      	b.n	bc53a <memcmp+0x6>

000bc554 <memcpy>:
   bc554:	440a      	add	r2, r1
   bc556:	4291      	cmp	r1, r2
   bc558:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc55c:	d100      	bne.n	bc560 <memcpy+0xc>
   bc55e:	4770      	bx	lr
   bc560:	b510      	push	{r4, lr}
   bc562:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc566:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc56a:	4291      	cmp	r1, r2
   bc56c:	d1f9      	bne.n	bc562 <memcpy+0xe>
   bc56e:	bd10      	pop	{r4, pc}

000bc570 <memmove>:
   bc570:	4288      	cmp	r0, r1
   bc572:	b510      	push	{r4, lr}
   bc574:	eb01 0402 	add.w	r4, r1, r2
   bc578:	d902      	bls.n	bc580 <memmove+0x10>
   bc57a:	4284      	cmp	r4, r0
   bc57c:	4623      	mov	r3, r4
   bc57e:	d807      	bhi.n	bc590 <memmove+0x20>
   bc580:	1e43      	subs	r3, r0, #1
   bc582:	42a1      	cmp	r1, r4
   bc584:	d008      	beq.n	bc598 <memmove+0x28>
   bc586:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc58a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc58e:	e7f8      	b.n	bc582 <memmove+0x12>
   bc590:	4402      	add	r2, r0
   bc592:	4601      	mov	r1, r0
   bc594:	428a      	cmp	r2, r1
   bc596:	d100      	bne.n	bc59a <memmove+0x2a>
   bc598:	bd10      	pop	{r4, pc}
   bc59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc5a2:	e7f7      	b.n	bc594 <memmove+0x24>

000bc5a4 <memset>:
   bc5a4:	4402      	add	r2, r0
   bc5a6:	4603      	mov	r3, r0
   bc5a8:	4293      	cmp	r3, r2
   bc5aa:	d100      	bne.n	bc5ae <memset+0xa>
   bc5ac:	4770      	bx	lr
   bc5ae:	f803 1b01 	strb.w	r1, [r3], #1
   bc5b2:	e7f9      	b.n	bc5a8 <memset+0x4>

000bc5b4 <srand>:
   bc5b4:	b538      	push	{r3, r4, r5, lr}
   bc5b6:	4b10      	ldr	r3, [pc, #64]	; (bc5f8 <srand+0x44>)
   bc5b8:	681d      	ldr	r5, [r3, #0]
   bc5ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc5bc:	4604      	mov	r4, r0
   bc5be:	b9b3      	cbnz	r3, bc5ee <srand+0x3a>
   bc5c0:	2018      	movs	r0, #24
   bc5c2:	f7fa fb75 	bl	b6cb0 <malloc>
   bc5c6:	4602      	mov	r2, r0
   bc5c8:	63a8      	str	r0, [r5, #56]	; 0x38
   bc5ca:	b920      	cbnz	r0, bc5d6 <srand+0x22>
   bc5cc:	4b0b      	ldr	r3, [pc, #44]	; (bc5fc <srand+0x48>)
   bc5ce:	480c      	ldr	r0, [pc, #48]	; (bc600 <srand+0x4c>)
   bc5d0:	2142      	movs	r1, #66	; 0x42
   bc5d2:	f7fa fb9d 	bl	b6d10 <__assert_func>
   bc5d6:	490b      	ldr	r1, [pc, #44]	; (bc604 <srand+0x50>)
   bc5d8:	4b0b      	ldr	r3, [pc, #44]	; (bc608 <srand+0x54>)
   bc5da:	e9c0 1300 	strd	r1, r3, [r0]
   bc5de:	4b0b      	ldr	r3, [pc, #44]	; (bc60c <srand+0x58>)
   bc5e0:	6083      	str	r3, [r0, #8]
   bc5e2:	230b      	movs	r3, #11
   bc5e4:	8183      	strh	r3, [r0, #12]
   bc5e6:	2100      	movs	r1, #0
   bc5e8:	2001      	movs	r0, #1
   bc5ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc5ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc5f0:	2200      	movs	r2, #0
   bc5f2:	611c      	str	r4, [r3, #16]
   bc5f4:	615a      	str	r2, [r3, #20]
   bc5f6:	bd38      	pop	{r3, r4, r5, pc}
   bc5f8:	2003e484 	.word	0x2003e484
   bc5fc:	000be4a5 	.word	0x000be4a5
   bc600:	000be4bc 	.word	0x000be4bc
   bc604:	abcd330e 	.word	0xabcd330e
   bc608:	e66d1234 	.word	0xe66d1234
   bc60c:	0005deec 	.word	0x0005deec

000bc610 <strchr>:
   bc610:	b2c9      	uxtb	r1, r1
   bc612:	4603      	mov	r3, r0
   bc614:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc618:	b11a      	cbz	r2, bc622 <strchr+0x12>
   bc61a:	428a      	cmp	r2, r1
   bc61c:	d1f9      	bne.n	bc612 <strchr+0x2>
   bc61e:	4618      	mov	r0, r3
   bc620:	4770      	bx	lr
   bc622:	2900      	cmp	r1, #0
   bc624:	bf18      	it	ne
   bc626:	2300      	movne	r3, #0
   bc628:	e7f9      	b.n	bc61e <strchr+0xe>

000bc62a <strchrnul>:
   bc62a:	b510      	push	{r4, lr}
   bc62c:	4604      	mov	r4, r0
   bc62e:	f7ff ffef 	bl	bc610 <strchr>
   bc632:	b918      	cbnz	r0, bc63c <strchrnul+0x12>
   bc634:	4620      	mov	r0, r4
   bc636:	f000 f814 	bl	bc662 <strlen>
   bc63a:	4420      	add	r0, r4
   bc63c:	bd10      	pop	{r4, pc}

000bc63e <strcmp>:
   bc63e:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc642:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc646:	2a01      	cmp	r2, #1
   bc648:	bf28      	it	cs
   bc64a:	429a      	cmpcs	r2, r3
   bc64c:	d0f7      	beq.n	bc63e <strcmp>
   bc64e:	1ad0      	subs	r0, r2, r3
   bc650:	4770      	bx	lr

000bc652 <strcpy>:
   bc652:	4603      	mov	r3, r0
   bc654:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc658:	f803 2b01 	strb.w	r2, [r3], #1
   bc65c:	2a00      	cmp	r2, #0
   bc65e:	d1f9      	bne.n	bc654 <strcpy+0x2>
   bc660:	4770      	bx	lr

000bc662 <strlen>:
   bc662:	4603      	mov	r3, r0
   bc664:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc668:	2a00      	cmp	r2, #0
   bc66a:	d1fb      	bne.n	bc664 <strlen+0x2>
   bc66c:	1a18      	subs	r0, r3, r0
   bc66e:	3801      	subs	r0, #1
   bc670:	4770      	bx	lr

000bc672 <strncmp>:
   bc672:	b510      	push	{r4, lr}
   bc674:	b17a      	cbz	r2, bc696 <strncmp+0x24>
   bc676:	4603      	mov	r3, r0
   bc678:	3901      	subs	r1, #1
   bc67a:	1884      	adds	r4, r0, r2
   bc67c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc680:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc684:	4290      	cmp	r0, r2
   bc686:	d101      	bne.n	bc68c <strncmp+0x1a>
   bc688:	42a3      	cmp	r3, r4
   bc68a:	d101      	bne.n	bc690 <strncmp+0x1e>
   bc68c:	1a80      	subs	r0, r0, r2
   bc68e:	bd10      	pop	{r4, pc}
   bc690:	2800      	cmp	r0, #0
   bc692:	d1f3      	bne.n	bc67c <strncmp+0xa>
   bc694:	e7fa      	b.n	bc68c <strncmp+0x1a>
   bc696:	4610      	mov	r0, r2
   bc698:	e7f9      	b.n	bc68e <strncmp+0x1c>

000bc69a <strnlen>:
   bc69a:	b510      	push	{r4, lr}
   bc69c:	4602      	mov	r2, r0
   bc69e:	4401      	add	r1, r0
   bc6a0:	428a      	cmp	r2, r1
   bc6a2:	4613      	mov	r3, r2
   bc6a4:	d003      	beq.n	bc6ae <strnlen+0x14>
   bc6a6:	781c      	ldrb	r4, [r3, #0]
   bc6a8:	3201      	adds	r2, #1
   bc6aa:	2c00      	cmp	r4, #0
   bc6ac:	d1f8      	bne.n	bc6a0 <strnlen+0x6>
   bc6ae:	1a18      	subs	r0, r3, r0
   bc6b0:	bd10      	pop	{r4, pc}

000bc6b2 <strrchr>:
   bc6b2:	b538      	push	{r3, r4, r5, lr}
   bc6b4:	4603      	mov	r3, r0
   bc6b6:	460c      	mov	r4, r1
   bc6b8:	b969      	cbnz	r1, bc6d6 <strrchr+0x24>
   bc6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc6be:	f7ff bfa7 	b.w	bc610 <strchr>
   bc6c2:	1c43      	adds	r3, r0, #1
   bc6c4:	4605      	mov	r5, r0
   bc6c6:	4621      	mov	r1, r4
   bc6c8:	4618      	mov	r0, r3
   bc6ca:	f7ff ffa1 	bl	bc610 <strchr>
   bc6ce:	2800      	cmp	r0, #0
   bc6d0:	d1f7      	bne.n	bc6c2 <strrchr+0x10>
   bc6d2:	4628      	mov	r0, r5
   bc6d4:	bd38      	pop	{r3, r4, r5, pc}
   bc6d6:	2500      	movs	r5, #0
   bc6d8:	e7f5      	b.n	bc6c6 <strrchr+0x14>

000bc6da <strstr>:
   bc6da:	780a      	ldrb	r2, [r1, #0]
   bc6dc:	b570      	push	{r4, r5, r6, lr}
   bc6de:	b96a      	cbnz	r2, bc6fc <strstr+0x22>
   bc6e0:	bd70      	pop	{r4, r5, r6, pc}
   bc6e2:	429a      	cmp	r2, r3
   bc6e4:	d109      	bne.n	bc6fa <strstr+0x20>
   bc6e6:	460c      	mov	r4, r1
   bc6e8:	4605      	mov	r5, r0
   bc6ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc6ee:	2b00      	cmp	r3, #0
   bc6f0:	d0f6      	beq.n	bc6e0 <strstr+0x6>
   bc6f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc6f6:	429e      	cmp	r6, r3
   bc6f8:	d0f7      	beq.n	bc6ea <strstr+0x10>
   bc6fa:	3001      	adds	r0, #1
   bc6fc:	7803      	ldrb	r3, [r0, #0]
   bc6fe:	2b00      	cmp	r3, #0
   bc700:	d1ef      	bne.n	bc6e2 <strstr+0x8>
   bc702:	4618      	mov	r0, r3
   bc704:	e7ec      	b.n	bc6e0 <strstr+0x6>
	...

000bc708 <_strtol_l.constprop.0>:
   bc708:	2b01      	cmp	r3, #1
   bc70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc70e:	d001      	beq.n	bc714 <_strtol_l.constprop.0+0xc>
   bc710:	2b24      	cmp	r3, #36	; 0x24
   bc712:	d906      	bls.n	bc722 <_strtol_l.constprop.0+0x1a>
   bc714:	f7fa faf4 	bl	b6d00 <__errno>
   bc718:	2316      	movs	r3, #22
   bc71a:	6003      	str	r3, [r0, #0]
   bc71c:	2000      	movs	r0, #0
   bc71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc722:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc808 <_strtol_l.constprop.0+0x100>
   bc726:	460d      	mov	r5, r1
   bc728:	462e      	mov	r6, r5
   bc72a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc72e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc732:	f017 0708 	ands.w	r7, r7, #8
   bc736:	d1f7      	bne.n	bc728 <_strtol_l.constprop.0+0x20>
   bc738:	2c2d      	cmp	r4, #45	; 0x2d
   bc73a:	d132      	bne.n	bc7a2 <_strtol_l.constprop.0+0x9a>
   bc73c:	782c      	ldrb	r4, [r5, #0]
   bc73e:	2701      	movs	r7, #1
   bc740:	1cb5      	adds	r5, r6, #2
   bc742:	2b00      	cmp	r3, #0
   bc744:	d05b      	beq.n	bc7fe <_strtol_l.constprop.0+0xf6>
   bc746:	2b10      	cmp	r3, #16
   bc748:	d109      	bne.n	bc75e <_strtol_l.constprop.0+0x56>
   bc74a:	2c30      	cmp	r4, #48	; 0x30
   bc74c:	d107      	bne.n	bc75e <_strtol_l.constprop.0+0x56>
   bc74e:	782c      	ldrb	r4, [r5, #0]
   bc750:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc754:	2c58      	cmp	r4, #88	; 0x58
   bc756:	d14d      	bne.n	bc7f4 <_strtol_l.constprop.0+0xec>
   bc758:	786c      	ldrb	r4, [r5, #1]
   bc75a:	2310      	movs	r3, #16
   bc75c:	3502      	adds	r5, #2
   bc75e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc762:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc766:	f04f 0c00 	mov.w	ip, #0
   bc76a:	fbb8 f9f3 	udiv	r9, r8, r3
   bc76e:	4666      	mov	r6, ip
   bc770:	fb03 8a19 	mls	sl, r3, r9, r8
   bc774:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc778:	f1be 0f09 	cmp.w	lr, #9
   bc77c:	d816      	bhi.n	bc7ac <_strtol_l.constprop.0+0xa4>
   bc77e:	4674      	mov	r4, lr
   bc780:	42a3      	cmp	r3, r4
   bc782:	dd24      	ble.n	bc7ce <_strtol_l.constprop.0+0xc6>
   bc784:	f1bc 0f00 	cmp.w	ip, #0
   bc788:	db1e      	blt.n	bc7c8 <_strtol_l.constprop.0+0xc0>
   bc78a:	45b1      	cmp	r9, r6
   bc78c:	d31c      	bcc.n	bc7c8 <_strtol_l.constprop.0+0xc0>
   bc78e:	d101      	bne.n	bc794 <_strtol_l.constprop.0+0x8c>
   bc790:	45a2      	cmp	sl, r4
   bc792:	db19      	blt.n	bc7c8 <_strtol_l.constprop.0+0xc0>
   bc794:	fb06 4603 	mla	r6, r6, r3, r4
   bc798:	f04f 0c01 	mov.w	ip, #1
   bc79c:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc7a0:	e7e8      	b.n	bc774 <_strtol_l.constprop.0+0x6c>
   bc7a2:	2c2b      	cmp	r4, #43	; 0x2b
   bc7a4:	bf04      	itt	eq
   bc7a6:	782c      	ldrbeq	r4, [r5, #0]
   bc7a8:	1cb5      	addeq	r5, r6, #2
   bc7aa:	e7ca      	b.n	bc742 <_strtol_l.constprop.0+0x3a>
   bc7ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc7b0:	f1be 0f19 	cmp.w	lr, #25
   bc7b4:	d801      	bhi.n	bc7ba <_strtol_l.constprop.0+0xb2>
   bc7b6:	3c37      	subs	r4, #55	; 0x37
   bc7b8:	e7e2      	b.n	bc780 <_strtol_l.constprop.0+0x78>
   bc7ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc7be:	f1be 0f19 	cmp.w	lr, #25
   bc7c2:	d804      	bhi.n	bc7ce <_strtol_l.constprop.0+0xc6>
   bc7c4:	3c57      	subs	r4, #87	; 0x57
   bc7c6:	e7db      	b.n	bc780 <_strtol_l.constprop.0+0x78>
   bc7c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc7cc:	e7e6      	b.n	bc79c <_strtol_l.constprop.0+0x94>
   bc7ce:	f1bc 0f00 	cmp.w	ip, #0
   bc7d2:	da05      	bge.n	bc7e0 <_strtol_l.constprop.0+0xd8>
   bc7d4:	2322      	movs	r3, #34	; 0x22
   bc7d6:	6003      	str	r3, [r0, #0]
   bc7d8:	4646      	mov	r6, r8
   bc7da:	b942      	cbnz	r2, bc7ee <_strtol_l.constprop.0+0xe6>
   bc7dc:	4630      	mov	r0, r6
   bc7de:	e79e      	b.n	bc71e <_strtol_l.constprop.0+0x16>
   bc7e0:	b107      	cbz	r7, bc7e4 <_strtol_l.constprop.0+0xdc>
   bc7e2:	4276      	negs	r6, r6
   bc7e4:	2a00      	cmp	r2, #0
   bc7e6:	d0f9      	beq.n	bc7dc <_strtol_l.constprop.0+0xd4>
   bc7e8:	f1bc 0f00 	cmp.w	ip, #0
   bc7ec:	d000      	beq.n	bc7f0 <_strtol_l.constprop.0+0xe8>
   bc7ee:	1e69      	subs	r1, r5, #1
   bc7f0:	6011      	str	r1, [r2, #0]
   bc7f2:	e7f3      	b.n	bc7dc <_strtol_l.constprop.0+0xd4>
   bc7f4:	2430      	movs	r4, #48	; 0x30
   bc7f6:	2b00      	cmp	r3, #0
   bc7f8:	d1b1      	bne.n	bc75e <_strtol_l.constprop.0+0x56>
   bc7fa:	2308      	movs	r3, #8
   bc7fc:	e7af      	b.n	bc75e <_strtol_l.constprop.0+0x56>
   bc7fe:	2c30      	cmp	r4, #48	; 0x30
   bc800:	d0a5      	beq.n	bc74e <_strtol_l.constprop.0+0x46>
   bc802:	230a      	movs	r3, #10
   bc804:	e7ab      	b.n	bc75e <_strtol_l.constprop.0+0x56>
   bc806:	bf00      	nop
   bc808:	000be53a 	.word	0x000be53a

000bc80c <strtol>:
   bc80c:	4613      	mov	r3, r2
   bc80e:	460a      	mov	r2, r1
   bc810:	4601      	mov	r1, r0
   bc812:	4802      	ldr	r0, [pc, #8]	; (bc81c <strtol+0x10>)
   bc814:	6800      	ldr	r0, [r0, #0]
   bc816:	f7ff bf77 	b.w	bc708 <_strtol_l.constprop.0>
   bc81a:	bf00      	nop
   bc81c:	2003e484 	.word	0x2003e484

000bc820 <__register_exitproc>:
   bc820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc824:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc8e0 <__register_exitproc+0xc0>
   bc828:	4606      	mov	r6, r0
   bc82a:	f8d8 0000 	ldr.w	r0, [r8]
   bc82e:	461f      	mov	r7, r3
   bc830:	460d      	mov	r5, r1
   bc832:	4691      	mov	r9, r2
   bc834:	f000 f856 	bl	bc8e4 <__retarget_lock_acquire_recursive>
   bc838:	4b25      	ldr	r3, [pc, #148]	; (bc8d0 <__register_exitproc+0xb0>)
   bc83a:	681c      	ldr	r4, [r3, #0]
   bc83c:	b934      	cbnz	r4, bc84c <__register_exitproc+0x2c>
   bc83e:	4c25      	ldr	r4, [pc, #148]	; (bc8d4 <__register_exitproc+0xb4>)
   bc840:	601c      	str	r4, [r3, #0]
   bc842:	4b25      	ldr	r3, [pc, #148]	; (bc8d8 <__register_exitproc+0xb8>)
   bc844:	b113      	cbz	r3, bc84c <__register_exitproc+0x2c>
   bc846:	681b      	ldr	r3, [r3, #0]
   bc848:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc84c:	6863      	ldr	r3, [r4, #4]
   bc84e:	2b1f      	cmp	r3, #31
   bc850:	dd07      	ble.n	bc862 <__register_exitproc+0x42>
   bc852:	f8d8 0000 	ldr.w	r0, [r8]
   bc856:	f000 f847 	bl	bc8e8 <__retarget_lock_release_recursive>
   bc85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc862:	b34e      	cbz	r6, bc8b8 <__register_exitproc+0x98>
   bc864:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc868:	b988      	cbnz	r0, bc88e <__register_exitproc+0x6e>
   bc86a:	4b1c      	ldr	r3, [pc, #112]	; (bc8dc <__register_exitproc+0xbc>)
   bc86c:	b923      	cbnz	r3, bc878 <__register_exitproc+0x58>
   bc86e:	f8d8 0000 	ldr.w	r0, [r8]
   bc872:	f000 f838 	bl	bc8e6 <__retarget_lock_release>
   bc876:	e7f0      	b.n	bc85a <__register_exitproc+0x3a>
   bc878:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc87c:	f7fa fa18 	bl	b6cb0 <malloc>
   bc880:	2800      	cmp	r0, #0
   bc882:	d0f4      	beq.n	bc86e <__register_exitproc+0x4e>
   bc884:	2300      	movs	r3, #0
   bc886:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc88a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc88e:	6863      	ldr	r3, [r4, #4]
   bc890:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc894:	2201      	movs	r2, #1
   bc896:	409a      	lsls	r2, r3
   bc898:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc89c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc8a0:	4313      	orrs	r3, r2
   bc8a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc8a6:	2e02      	cmp	r6, #2
   bc8a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc8ac:	bf02      	ittt	eq
   bc8ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc8b2:	4313      	orreq	r3, r2
   bc8b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc8b8:	6863      	ldr	r3, [r4, #4]
   bc8ba:	f8d8 0000 	ldr.w	r0, [r8]
   bc8be:	1c5a      	adds	r2, r3, #1
   bc8c0:	3302      	adds	r3, #2
   bc8c2:	6062      	str	r2, [r4, #4]
   bc8c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc8c8:	f000 f80e 	bl	bc8e8 <__retarget_lock_release_recursive>
   bc8cc:	2000      	movs	r0, #0
   bc8ce:	e7c6      	b.n	bc85e <__register_exitproc+0x3e>
   bc8d0:	2003e7ec 	.word	0x2003e7ec
   bc8d4:	2003e760 	.word	0x2003e760
   bc8d8:	00000000 	.word	0x00000000
   bc8dc:	000b6cb1 	.word	0x000b6cb1
   bc8e0:	2003e4e8 	.word	0x2003e4e8

000bc8e4 <__retarget_lock_acquire_recursive>:
   bc8e4:	4770      	bx	lr

000bc8e6 <__retarget_lock_release>:
   bc8e6:	4770      	bx	lr

000bc8e8 <__retarget_lock_release_recursive>:
   bc8e8:	4770      	bx	lr

000bc8ea <link_code_end>:
	...

000bc8ec <dynalib_user>:
   bc8ec:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc8fc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc90c:	7620 7269 7574 6c61 2c00 0020 696c 646e      virtual., .lind
   bc91c:	6e65 696c 656e 6c2f 6165 6564 6272 616f     enline/leaderboa
   bc92c:	6472 736d 0067 6974 656d 2072 7473 706f     rdmsg.timer stop
   bc93c:	6570 0064 7550 6c62 7369 6968 676e 003a     ped.Publishing:.
   bc94c:	696c 646e 6e65 696c 656e 6c2f 6165 6564     lindenline/leade
   bc95c:	6272 616f 6472 7400 6d69 7265 7320 6174     rboard.timer sta
   bc96c:	7472 6465 6300 6e6f 2500 2064 6564 6976     rted.con.%d devi
   bc97c:	6563 2073 6f66 6e75 0064 616d 6978 756d     ces found.maximu
   bc98c:	0073 6f43 6e6e 6365 6974 676e 7420 3a6f     s.Connecting to:
   bc99c:	2520 0073 7463 3600 3445 3030 3030 2d31      %s.ct.6E400001-
   bc9ac:	3542 3341 462d 3933 2d33 3045 3941 452d     B5A3-F393-E0A9-E
   bc9bc:	3035 3245 4434 4343 3941 0045 4536 3034     50E24DCCA9E.6E40
   bc9cc:	3030 3230 422d 4135 2d33 3346 3339 452d     0002-B5A3-F393-E
   bc9dc:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   bc9ec:	3600 3445 3030 3030 2d33 3542 3341 462d     .6E400003-B5A3-F
   bc9fc:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   bca0c:	4343 3941 0045 616c 2e62 6874 7765 6c63     CCA9E.lab.thewcl
   bca1c:	632e 6d6f 0000 0000                         .com....

000bca24 <_ZTVN5spark10LogHandlerE>:
	...
   bca34:	40a9 000b 40d1 000b                         .@...@..

000bca3c <_ZTVN5spark16SerialLogHandlerE>:
	...
   bca44:	41c1 000b 41f5 000b 8acd 000b 40d3 000b     .A...A.......@..

000bca54 <_ZL10eighthMaze>:
	...
   bca64:	0200 0101 0202 0202 0202 0202 0202 0002     ................
   bca74:	0200 0201 0201 0200 0102 0101 0202 0001     ................
   bca84:	0200 0201 0202 0302 0102 0103 0102 0001     ................
   bca94:	0200 0201 0000 0202 0102 0102 0102 0003     ................
   bcaa4:	0200 0201 0002 0200 0102 0102 0202 0002     ................
   bcab4:	0200 0201 0202 0200 0102 0102 0202 0002     ................
   bcac4:	0200 0202 0202 0202 0102 0102 0101 0002     ................
   bcad4:	0200 0201 0202 0202 0102 0102 0101 0002     ................
   bcae4:	0200 0201 0202 0000 0202 0202 0202 0002     ................
   bcaf4:	0200 0101 0301 0002 0202 0202 0000 0002     ................
   bcb04:	0200 0201 0103 0002 0202 0002 0200 0002     ................
   bcb14:	0200 0201 0202 0002 0202 0202 0202 0002     ................
   bcb24:	0200 0101 0101 0101 0101 0101 0101 0001     ................
   bcb34:	0200 0202 0202 0202 0202 0202 0202 0002     ................
	...

000bcb54 <_ZL10fourthMaze>:
	...
   bcb64:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcb74:	0100 0101 0101 0101 0101 0101 0101 0002     ................
   bcb84:	0200 0302 0202 0302 0202 0202 0202 0002     ................
   bcb94:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcba4:	0300 0202 0202 0202 0202 0202 0202 0002     ................
   bcbb4:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcbc4:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcbd4:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcbe4:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcbf4:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcc04:	0300 0202 0202 0202 0202 0202 0202 0002     ................
   bcc14:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcc24:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcc34:	0200 0302 0202 0202 0202 0202 0202 0002     ................
	...

000bcc54 <_ZL10secretMaze>:
   bcc54:	0200 0000 0000 0000 0000 0000 0000 0000     ................
   bcc64:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcc74:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcc84:	0200 0202 0202 0202 0606 0202 0202 0002     ................
   bcc94:	0200 0202 0202 0202 0602 0206 0202 0002     ................
   bcca4:	0200 0202 0606 0206 0202 0206 0202 0002     ................
   bccb4:	0200 0202 0202 0202 0202 0206 0202 0002     ................
   bccc4:	0200 0202 0202 0202 0202 0206 0202 0002     ................
   bccd4:	0200 0202 0606 0206 0202 0206 0202 0002     ................
   bcce4:	0200 0202 0202 0202 0602 0206 0202 0002     ................
   bccf4:	0200 0202 0202 0202 0606 0202 0202 0002     ................
   bcd04:	0200 0202 0202 0202 0206 0202 0202 0002     ................
   bcd14:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcd24:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bcd34:	0200 0202 0202 0202 0202 0202 0202 0202     ................
	...

000bcd54 <_ZL11seventhMaze>:
	...
   bcd64:	0200 0202 0202 0201 0202 0202 0202 0002     ................
   bcd74:	0200 0202 0202 0101 0201 0202 0101 0002     ................
   bcd84:	0200 0202 0202 0202 0101 0202 0102 0002     ................
   bcd94:	0200 0202 0202 0202 0102 0201 0202 0002     ................
   bcda4:	0200 0202 0302 0202 0102 0101 0202 0002     ................
   bcdb4:	0100 0201 0202 0202 0202 0102 0201 0001     ................
   bcdc4:	0200 0101 0201 0102 0201 0202 0201 0002     ................
   bcdd4:	0200 0101 0201 0102 0203 0202 0101 0001     ................
   bcde4:	0200 0201 0202 0202 0202 0202 0202 0001     ................
   bcdf4:	0100 0201 0102 0201 0202 0203 0201 0001     ................
   bce04:	0100 0202 0202 0101 0202 0202 0202 0002     ................
   bce14:	0200 0102 0202 0102 0201 0102 0302 0002     ................
   bce24:	0200 0102 0102 0202 0101 0202 0202 0002     ................
   bce34:	0300 0202 0102 0202 0102 0201 0202 0002     ................
	...

000bce54 <_ZL6youWin>:
   bce54:	0200 0002 0202 0202 0202 0202 0201 0202     ................
   bce64:	0200 0002 0000 0202 0202 0202 0101 0201     ................
   bce74:	0300 0202 0002 0200 0202 0202 0202 0101     ................
   bce84:	0300 0202 0202 0000 0000 0200 0202 0102     ................
   bce94:	0300 0202 0002 0200 0202 0202 0202 0101     ................
   bcea4:	0300 0002 0000 0202 0202 0202 0101 0201     ................
   bceb4:	0300 0002 0202 0002 0000 0202 0201 0202     ................
   bcec4:	0200 0202 0202 0200 0202 0200 0202 0202     ................
   bced4:	0200 0202 0202 0200 0202 0200 0201 0101     ................
   bcee4:	0200 0202 0202 0200 0202 0200 0202 0202     ................
   bcef4:	0200 0202 0202 0002 0000 0202 0202 0202     ................
   bcf04:	0200 0202 0202 0202 0202 0202 0101 0201     ................
   bcf14:	0200 0202 0202 0002 0000 0202 0102 0202     ................
   bcf24:	0200 0202 0202 0202 0202 0200 0201 0202     ................
   bcf34:	0200 0202 0202 0202 0202 0200 0201 0202     ................
   bcf44:	0200 0202 0202 0002 0000 0202 0102 0201     ................

000bcf54 <_ZL7mazeOne>:
	...
   bcf64:	0200 0202 0202 0202 0203 0202 0202 0003     ................
   bcf74:	0200 0202 0202 0101 0101 0101 0101 0001     ................
   bcf84:	0100 0201 0102 0201 0202 0202 0202 0002     ................
   bcf94:	0100 0202 0101 0202 0202 0202 0202 0002     ................
   bcfa4:	0100 0102 0101 0202 0202 0202 0202 0002     ................
   bcfb4:	0100 0102 0202 0202 0202 0202 0202 0002     ................
   bcfc4:	0100 0102 0202 0202 0202 0202 0202 0002     ................
   bcfd4:	0100 0102 0202 0202 0202 0202 0202 0002     ................
   bcfe4:	0100 0103 0202 0202 0202 0202 0202 0002     ................
   bcff4:	0100 0102 0202 0202 0202 0202 0202 0002     ................
   bd004:	0100 0102 0101 0101 0201 0202 0202 0002     ................
   bd014:	0100 0202 0203 0202 0101 0201 0202 0002     ................
   bd024:	0100 0101 0101 0201 0202 0101 0101 0001     ................
   bd034:	0100 0101 0101 0101 0201 0302 0202 0002     ................
	...

000bd054 <_ZL7mazeTwo>:
	...
   bd064:	0200 0202 0302 0202 0102 0000 0000 0000     ................
   bd074:	0100 0101 0101 0101 0102 0000 0000 0000     ................
   bd084:	0000 0000 0000 0100 0102 0101 0101 0101     ................
   bd094:	0000 0000 0000 0100 0202 0202 0202 0103     ................
   bd0a4:	0101 0101 0101 0101 0102 0101 0101 0101     ................
   bd0b4:	0301 0202 0202 0202 0102 0000 0000 0000     ................
   bd0c4:	0101 0101 0101 0101 0102 0000 0000 0000     ................
   bd0d4:	0000 0000 0000 0100 0102 0000 0000 0000     ................
   bd0e4:	0101 0101 0101 0101 0102 0101 0101 0101     ................
   bd0f4:	0301 0202 0202 0202 0202 0202 0202 0103     ................
   bd104:	0101 0101 0101 0101 0102 0101 0101 0101     ................
   bd114:	0000 0000 0000 0100 0102 0000 0000 0000     ................
   bd124:	0000 0000 0000 0100 0102 0101 0101 0001     ................
   bd134:	0000 0000 0000 0100 0202 0202 0202 0002     ................
	...

000bd154 <_ZL8lindLine>:
	...
   bd164:	0200 0202 0202 0203 0203 0203 0202 0002     ................
	...
   bd180:	0000 0002 0100 0101 0201 0202 0202 0102     ................
   bd190:	0002 0002 0200 0202 0201 0101 0101 0102     ................
   bd1a0:	0001 0002 0200 0202 0202 0202 0102 0202     ................
   bd1b0:	0001 0003 0100 0102 0201 0202 0202 0102     ................
   bd1c0:	0002 0002 0200 0202 0202 0201 0101 0102     ................
   bd1d0:	0001 0002 0200 0101 0201 0202 0202 0202     ................
   bd1e0:	0001 0002 0200 0102 0202 0102 0101 0102     ................
   bd1f0:	0002 0003 0200 0202 0201 0202 0201 0102     ................
   bd200:	0001 0002 0200 0202 0202 0202 0102 0202     ................
   bd210:	0001 0002 0200 0102 0201 0202 0202 0102     ................
   bd220:	0002 0002 0100 0101 0201 0202 0201 0102     ................
   bd230:	0001 0002 0200 0202 0202 0102 0102 0202     ................
   bd240:	0001 0002 0000 0000 0000 0000 0000 0000     ................
   bd250:	0000 0000                                   ....

000bd254 <_ZL9fifthMaze>:
	...
   bd264:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bd274:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd284:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd294:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd2a4:	0200 0202 0302 0201 0301 0202 0202 0002     ................
   bd2b4:	0200 0101 0101 0201 0101 0101 0101 0002     ................
   bd2c4:	0200 0202 0202 0302 0202 0202 0202 0002     ................
   bd2d4:	0200 0101 0101 0201 0101 0101 0101 0002     ................
   bd2e4:	0200 0202 0302 0201 0301 0202 0202 0002     ................
   bd2f4:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd304:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd314:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd324:	0200 0202 0202 0201 0201 0202 0202 0002     ................
   bd334:	0200 0202 0202 0202 0202 0202 0202 0002     ................
	...

000bd354 <_ZL9finalMaze>:
	...
   bd364:	0100 0300 0001 0103 0100 0300 0001 0002     ................
   bd374:	0300 0001 0103 0300 0001 0001 0003 0002     ................
   bd384:	0000 0103 0300 0001 0103 0100 0000 0002     ................
   bd394:	0100 0300 0001 0103 0300 0001 0001 0002     ................
   bd3a4:	0300 0001 0103 0300 0001 0103 0000 0002     ................
   bd3b4:	0000 0103 0300 0001 0103 0300 0001 0002     ................
   bd3c4:	0100 0300 0001 0103 0300 0001 0003 0002     ................
   bd3d4:	0300 0001 0103 0300 0001 0103 0000 0002     ................
   bd3e4:	0000 0103 0300 0001 0103 0300 0001 0002     ................
   bd3f4:	0100 0300 0001 0103 0300 0001 0003 0002     ................
   bd404:	0300 0001 0103 0300 0001 0103 0000 0002     ................
   bd414:	0000 0103 0300 0001 0103 0300 0001 0002     ................
   bd424:	0100 0300 0001 0103 0300 0001 0003 0002     ................
   bd434:	0300 0001 0103 0300 0001 0103 0000 0002     ................
	...

000bd454 <_ZL9ninthMaze>:
	...
   bd464:	0200 0303 0303 0203 0202 0202 0202 0002     ................
   bd474:	0100 0101 0101 0101 0101 0101 0101 0002     ................
   bd484:	0200 0202 0202 0202 0202 0202 0102 0002     ................
   bd494:	0200 0101 0101 0101 0101 0101 0102 0002     ................
   bd4a4:	0200 0201 0202 0102 0202 0202 0102 0002     ................
   bd4b4:	0200 0201 0101 0102 0102 0101 0102 0002     ................
   bd4c4:	0200 0201 0101 0202 0102 0101 0102 0002     ................
   bd4d4:	0200 0201 0101 0101 0101 0101 0202 0002     ................
   bd4e4:	0200 0201 0202 0202 0202 0101 0102 0002     ................
   bd4f4:	0200 0101 0101 0101 0201 0101 0102 0002     ................
   bd504:	0200 0201 0102 0201 0202 0101 0102 0002     ................
   bd514:	0200 0101 0202 0202 0101 0101 0102 0002     ................
   bd524:	0200 0101 0101 0101 0101 0101 0102 0002     ................
   bd534:	0200 0201 0202 0202 0202 0202 0102 0002     ................
	...

000bd554 <_ZL9sixthMaze>:
	...
   bd564:	0200 0202 0202 0202 0202 0202 0202 0003     ................
   bd574:	0200 0101 0101 0101 0101 0101 0101 0002     ................
   bd584:	0200 0201 0202 0202 0202 0202 0102 0002     ................
   bd594:	0200 0201 0202 0202 0202 0202 0102 0002     ................
   bd5a4:	0200 0201 0202 0202 0202 0202 0102 0002     ................
   bd5b4:	0200 0201 0101 0101 0201 0202 0102 0002     ................
   bd5c4:	0200 0201 0202 0202 0101 0201 0101 0002     ................
   bd5d4:	0200 0101 0101 0201 0101 0201 0101 0002     ................
   bd5e4:	0200 0201 0202 0201 0101 0201 0101 0002     ................
   bd5f4:	0200 0201 0201 0201 0201 0202 0102 0002     ................
   bd604:	0200 0201 0201 0201 0201 0202 0102 0002     ................
   bd614:	0200 0202 0201 0202 0301 0202 0103 0002     ................
   bd624:	0200 0101 0101 0101 0101 0101 0101 0002     ................
   bd634:	0300 0202 0202 0202 0202 0202 0202 0003     ................
	...

000bd654 <_ZL9thirdMaze>:
	...
   bd664:	0200 0202 0202 0202 0202 0202 0202 0002     ................
   bd674:	0200 0101 0101 0101 0101 0101 0101 0002     ................
   bd684:	0200 0001 0000 0000 0000 0000 0000 0002     ................
   bd694:	0200 0001 0101 0101 0101 0101 0001 0002     ................
   bd6a4:	0200 0001 0001 0000 0000 0000 0001 0002     ................
   bd6b4:	0200 0001 0001 0101 0101 0001 0001 0002     ................
   bd6c4:	0200 0001 0001 0301 0303 0001 0001 0002     ................
   bd6d4:	0200 0001 0001 0301 0202 0001 0001 0002     ................
   bd6e4:	0200 0001 0001 0301 0202 0001 0001 0002     ................
   bd6f4:	0200 0001 0001 0101 0201 0002 0001 0002     ................
   bd704:	0200 0001 0001 0000 0000 0202 0001 0002     ................
   bd714:	0200 0001 0101 0101 0101 0201 0002 0002     ................
   bd724:	0200 0001 0000 0000 0000 0000 0202 0002     ................
   bd734:	0200 0202 0202 0202 0202 0202 0202 0002     ................
	...

000bd754 <_ZL6gamma5>:
   bd754:	0100 0302 0705 0b09 110e 1814 221d 2e28     ............."(.
   bd764:	3d36 4f46 6459 7c6f 9789 b6a6 d9c7 ffeb     6=FOYdo|........

000bd774 <_ZL6gamma6>:
   bd774:	0100 0302 0504 0806 0a09 0d0b 100e 1312     ................
   bd784:	1715 1b19 201d 2522 2a27 302d 3733 3e3a     ..... "%'*-037:>
   bd794:	4541 4d49 5652 5f5b 6964 746e 7f79 8b85     AEIMRV[_dinty...
   bd7a4:	9791 a49d b2ab c0b9 cfc7 ded6 eee6 fff7     ................

000bd7b4 <_ZTV18Adafruit_NeoMatrix>:
	...
   bd7bc:	528d 000b 52a5 000b 5ccd 000b 8de5 000b     .R...R...\......
   bd7cc:	52b9 000b 59e5 000b 5b0b 000b 5b27 000b     .R...Y...[..'[..
   bd7dc:	5aa3 000b 5b41 000b 5255 000b 5b93 000b     .Z..A[..UR...[..

000bd7ec <CSWTCH.86>:
   bd7ec:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   bd7fc:	0050 0000                                   P...

000bd800 <_ZL4font>:
   bd800:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bd810:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bd820:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bd830:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bd840:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bd850:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bd860:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bd870:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bd880:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bd890:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bd8a0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bd8b0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bd8c0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bd8d0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bd8e0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bd8f0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bd900:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bd910:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bd920:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bd930:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bd940:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bd950:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bd960:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bd970:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bd980:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bd990:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bd9a0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bd9b0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bd9c0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bd9d0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bd9e0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bd9f0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bda00:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bda10:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bda20:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bda30:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bda40:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bda50:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bda60:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bda70:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bda80:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bda90:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   bdaa0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bdab0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bdac0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   bdad0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bdae0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   bdaf0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   bdb00:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   bdb10:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bdb20:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bdb30:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bdb40:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bdb50:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bdb60:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bdb70:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   bdb80:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   bdb90:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   bdba0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   bdbb0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   bdbc0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   bdbd0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   bdbe0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   bdbf0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   bdc00:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   bdc10:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   bdc20:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   bdc30:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   bdc40:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   bdc50:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   bdc60:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   bdc70:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   bdc80:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   bdc90:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   bdca0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   bdcb0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   bdcc0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   bdcd0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   bdce0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   bdcf0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000bdcfc <_ZTV12Adafruit_GFX>:
	...
   bdd0c:	5ccd 000b 8de5 000b 40a9 000b 59e5 000b     .\.......@...Y..
   bdd1c:	5b0b 000b 5b27 000b 5aa3 000b 5b41 000b     .[..'[...Z..A[..
   bdd2c:	5b77 000b 5b93 000b                         w[...[..

000bdd34 <_ZL14alphafonttable>:
   bdd34:	0001 0002 0004 0008 0010 0020 0040 0080     .......... .@...
   bdd44:	0100 0200 0400 0800 1000 2000 4000 8000     ........... .@..
	...
   bdd64:	12c9 15c0 12f9 00e3 0530 12c8 3a00 1700     ........0....:..
   bdd74:	0000 0006 0220 12ce 12ed 0c24 235d 0400     .... .....$.]#..
   bdd84:	2400 0900 3fc0 12c0 0800 00c0 0000 0c00     .$...?..........
   bdd94:	0c3f 0006 00db 008f 00e6 2069 00fd 0007     ?.........i ....
   bdda4:	00ff 00ef 1200 0a00 2400 00c8 0900 1083     .........$......
   bddb4:	02bb 00f7 128f 0039 120f 00f9 0071 00bd     ......9.....q...
   bddc4:	00f6 1200 001e 2470 0038 0536 2136 003f     ......p$8.6.6!?.
   bddd4:	00f3 203f 20f3 00ed 1201 003e 0c30 2836     ..? . ....>.0.6(
   bdde4:	2d00 1500 0c09 0039 2100 000f 0c03 0008     .-....9..!......
   bddf4:	0100 1058 2078 00d8 088e 0858 0071 048e     ..X.x ....X.q...
   bde04:	1070 1000 000e 3600 0030 10d4 1050 00dc     p......60...P...
   bde14:	0170 0486 0050 2088 0078 001c 2004 2814     p...P.. x.... .(
   bde24:	28c0 200c 0848 0949 1200 2489 0520 3fff     .(. H.I....$ ..?
   bde34:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.
   bde44:	7525 7500 3025 7834 0000 0000               %u.u%04x....

000bde50 <_ZTVN5spark12NetworkClassE>:
	...
   bde58:	7119 000b 7123 000b 712d 000b 7137 000b     .q..#q..-q..7q..
   bde68:	7141 000b 714d 000b 7159 000b 7161 000b     Aq..Mq..Yq..aq..
   bde78:	7169 000b 7175 000b 717d 000b 7187 000b     iq..uq..}q...q..
   bde88:	7191 000b                                   .q..

000bde8c <_ZTVN5spark9WiFiClassE>:
	...
   bde94:	72db 000b 72d1 000b 72c7 000b 727d 000b     .r...r...r..}r..
   bdea4:	72bb 000b 72af 000b 7159 000b 7161 000b     .r...r..Yq..aq..
   bdeb4:	72a3 000b 729b 000b 7291 000b 7287 000b     .r...r...r...r..
   bdec4:	7191 000b 6977 6972 676e 7200 6365 2076     .q..wiring.recv 
   bded4:	7265 6f72 2072 203d 6425 0000               error = %d..

000bdee0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdee8:	737d 000b 73a1 000b 78d3 000b 73af 000b     }s...s...x...s..
   bdef8:	7381 000b                                   .s..

000bdefc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bdf04 <_ZTV9TCPClient>:
	...
   bdf0c:	742d 000b 7461 000b 72f9 000b 7313 000b     -t..at...r...s..
   bdf1c:	7769 000b 733d 000b 75df 000b 7371 000b     iw..=s...u..qs..
   bdf2c:	7671 000b 74b1 000b 760d 000b 781d 000b     qv...t...v...x..
   bdf3c:	75ad 000b 7373 000b 7325 000b 73b5 000b     .u..ss..%s...s..
   bdf4c:	7491 000b                                   .t..

000bdf50 <_ZTV11USARTSerial>:
	...
   bdf58:	78d9 000b 7945 000b 791d 000b 8de5 000b     .x..Ey...y......
   bdf68:	78ed 000b 7909 000b 78fb 000b 7917 000b     .x...y...x...y..
   bdf78:	78db 000b 78df 000b                         .x...x..

000bdf80 <_ZTV7TwoWire>:
	...
   bdf88:	7991 000b 79db 000b 79b3 000b 7993 000b     .y...y...y...y..
   bdf98:	79bb 000b 79c3 000b 79cb 000b 79d3 000b     .y...y...y...y..

000bdfa8 <_ZTV9USBSerial>:
	...
   bdfb0:	7a97 000b 7aff 000b 7ad5 000b 8de5 000b     .z...z...z......
   bdfc0:	7ac7 000b 7a99 000b 7aa9 000b 7af9 000b     .z...z...z...z..
   bdfd0:	7ab9 000b 7a91 000b                         .z...z..

000bdfd8 <_ZTV9IPAddress>:
	...
   bdfe0:	7bb1 000b 7ba1 000b 7ba3 000b 5925 252d     .{...{...{..%Y-%
   bdff0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   be000:	7361 7463 6d69 0065 6162 6475 5300 7265     asctime.baud.Ser
   be010:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   be020:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   be030:	6100 7070 2500 3130 7530 0020 205d 2800     .app.%010u .] .(
   be040:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   be050:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   be060:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   be070:	6961 006c                                   ail.

000be074 <_ZTVN5spark16JSONStreamWriterE>:
	...
   be07c:	7ef5 000b 7f1b 000b 7ed9 000b 6d5f 000b     .~.......~.._m..

000be08c <_ZTVN5spark16StreamLogHandlerE>:
	...
   be094:	8375 000b 838d 000b 8acd 000b 40d3 000b     u............@..

000be0a4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   be0ac:	83a1 000b 83b5 000b 8c71 000b 7ee1 000b     ........q....~..

000be0bc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   be0c4:	7ef3 000b 7f29 000b 8a31 000b 7ee3 000b     .~..)...1....~..

000be0d4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   be0dc:	7ef1 000b 7f37 000b 82b9 000b 7f59 000b     .~..7.......Y...
   be0ec:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   be0fc:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   be10c:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   be11c:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   be12c:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   be13c:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   be14c:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   be15c:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   be16c:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   be17c:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   be18c:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   be19c:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   be1ac:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   be1bc:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   be1cc:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   be1dc:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   be1ec:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   be1fc:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   be20c:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   be21c:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   be22c:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   be23c:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   be24c:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   be25c:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   be26c:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   be27c:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   be28c:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   be29c:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   be2ac:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   be2bc:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   be2cc:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   be2dc:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   be2ec:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   be2fc:	7463 7265 7369 6974 2e63 0000               cteristic...

000be308 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be310:	8f13 000b 8f75 000b 90eb 000b 8f9f 000b     ....u...........
   be320:	8f15 000b                                   ....

000be324 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be32c:	8f0f 000b 8f83 000b 8f11 000b 8fa5 000b     ................
   be33c:	8f35 000b                                   5...

000be340 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be348:	8f0d 000b 8f91 000b 9aa5 000b 8fab 000b     ................
   be358:	8f55 000b 0000 0000 0000 34fb 5f9b 0080     U..........4._..
   be368:	8000 1000 0000 0000 0000 0000               ............

000be374 <_ZTVN5spark13EthernetClassE>:
	...
   be37c:	b75b 000b b751 000b b747 000b b73d 000b     [...Q...G...=...
   be38c:	b731 000b b725 000b 7159 000b 7161 000b     1...%...Yq..aq..
   be39c:	b719 000b b711 000b b707 000b b6fd 000b     ................
   be3ac:	7191 000b                                   .q..

000be3b0 <_ZSt7nothrow>:
	...

000be3b1 <_ZTSSt19_Sp_make_shared_tag>:
   be3b1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   be3c1:	6572 5f64 6174 0067 0000                     red_tag....

000be3cc <_ZTISt19_Sp_make_shared_tag>:
   be3cc:	e40c 000b e3b1 000b                         ........

000be3d4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be3d4:	e46c 000b e3e0 000b e490 000b               l...........

000be3e0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   be3e0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be3f0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be400:	0045 0000                                   E...

000be404 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be404:	0000 0000 e3d4 000b b99d 000b b9b1 000b     ................
   be414:	bb45 000b bb45 000b ba1b 000b b95d 000b     E...E.......]...
   be424:	ba03 000b b9c5 000b b98f 000b               ............

000be430 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be430:	e46c 000b e43c 000b e3d4 000b               l...<.......

000be43c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be43c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be44c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be45c:	666e 456f 0000 0000                         nfoE....

000be464 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be464:	0000 0000 e430 000b ba45 000b ba59 000b     ....0...E...Y...
   be474:	bb45 000b bb45 000b ba1b 000b b95d 000b     E...E.......]...
   be484:	bb19 000b baa5 000b ba6d 000b               ........m...

000be490 <_ZTISt9type_info>:
   be490:	e40c 000b e498 000b                         ........

000be498 <_ZTSSt9type_info>:
   be498:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be4a8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be4b8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   be4c8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   be4d8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   be4e8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be4f8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be508:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   be518:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be528:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000be539 <_ctype_>:
   be539:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be549:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be559:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be569:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be579:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be589:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be599:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be5a9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be5b9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000be63a <link_const_variable_data_end>:
	...

000be63c <link_constructors_location>:
   be63c:	000b50d5 	.word	0x000b50d5
   be640:	000b59d5 	.word	0x000b59d5
   be644:	000b7269 	.word	0x000b7269
   be648:	000b72e5 	.word	0x000b72e5
   be64c:	000b7eb9 	.word	0x000b7eb9
   be650:	000b7ec5 	.word	0x000b7ec5
   be654:	000b8abd 	.word	0x000b8abd
   be658:	000bb339 	.word	0x000bb339
   be65c:	000bb6c5 	.word	0x000bb6c5
   be660:	000bb765 	.word	0x000bb765

000be664 <link_constructors_end>:
	...
