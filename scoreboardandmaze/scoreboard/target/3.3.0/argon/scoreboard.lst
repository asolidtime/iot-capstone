
/home/maxwell/CTD-IoT/capstone/scoreboardandmaze/scoreboard/target/3.3.0/argon/scoreboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001874  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5890  000b5890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b58b4  000b58b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b58bc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e5f8  000b58c0  0001e5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000018c  2003e668  2003e668  0002e668  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b592c  000b592c  0002592c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5954  000b5954  00025954  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000e0879  00000000  00000000  00025958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e3be  00000000  00000000  001061d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002348  00000000  00000000  0011458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e2a  00000000  00000000  001168d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00030819  00000000  00000000  0014a701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012d01a  00000000  00000000  0017af1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00030a5b  00000000  00000000  002a7f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00008f40  00000000  00000000  002d898f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000622c  00000000  00000000  002e18d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f9db 	bl	b53e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f9e3 	bl	b5404 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5f8 	.word	0x2003e5f8
   b4048:	000b58c0 	.word	0x000b58c0
   b404c:	2003e664 	.word	0x2003e664
   b4050:	2003e668 	.word	0x2003e668
   b4054:	2003e7f1 	.word	0x2003e7f1

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fe99 	bl	b4d94 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5868 	.word	0x000b5868
   b407c:	000b588c 	.word	0x000b588c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b90c 	b.w	b429c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f92f 	bl	b42e8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 be39 	b.w	b4d04 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bb63 	b.w	b475c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bb69 	b.w	b476c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr
	...

000b40ac <_Z8writeNumx>:
}
int getNthDigit(long long number, int digit) {
  for (int place = 0; place < digit; place++) number = number / 10;
  return number % 10;
}
void writeNum(long long num) {
   b40ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return number % 10;
   b40ae:	220a      	movs	r2, #10
   b40b0:	2300      	movs	r3, #0
void writeNum(long long num) {
   b40b2:	4605      	mov	r5, r0
   b40b4:	460c      	mov	r4, r1
  return number % 10;
   b40b6:	f000 ffd7 	bl	b5068 <__aeabi_ldivmod>
  first.writeDigitAscii(3, getNthDigit(num, 0) + '0');
   b40ba:	3230      	adds	r2, #48	; 0x30
   b40bc:	4871      	ldr	r0, [pc, #452]	; (b4284 <_Z8writeNumx+0x1d8>)
   b40be:	2300      	movs	r3, #0
   b40c0:	b2d2      	uxtb	r2, r2
   b40c2:	2103      	movs	r1, #3
   b40c4:	f000 f9c0 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b40c8:	220a      	movs	r2, #10
   b40ca:	2300      	movs	r3, #0
   b40cc:	4628      	mov	r0, r5
   b40ce:	4621      	mov	r1, r4
   b40d0:	f000 ffca 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b40d4:	220a      	movs	r2, #10
   b40d6:	2300      	movs	r3, #0
   b40d8:	f000 ffc6 	bl	b5068 <__aeabi_ldivmod>
  first.writeDigitAscii(2, getNthDigit(num, 1) + '0');
   b40dc:	3230      	adds	r2, #48	; 0x30
   b40de:	4869      	ldr	r0, [pc, #420]	; (b4284 <_Z8writeNumx+0x1d8>)
   b40e0:	2300      	movs	r3, #0
   b40e2:	b2d2      	uxtb	r2, r2
   b40e4:	2102      	movs	r1, #2
   b40e6:	f000 f9af 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b40ea:	2264      	movs	r2, #100	; 0x64
   b40ec:	2300      	movs	r3, #0
   b40ee:	4628      	mov	r0, r5
   b40f0:	4621      	mov	r1, r4
   b40f2:	f000 ffb9 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b40f6:	220a      	movs	r2, #10
   b40f8:	2300      	movs	r3, #0
   b40fa:	f000 ffb5 	bl	b5068 <__aeabi_ldivmod>
  first.writeDigitAscii(1, getNthDigit(num, 2) + '0');
   b40fe:	3230      	adds	r2, #48	; 0x30
   b4100:	4860      	ldr	r0, [pc, #384]	; (b4284 <_Z8writeNumx+0x1d8>)
   b4102:	2300      	movs	r3, #0
   b4104:	b2d2      	uxtb	r2, r2
   b4106:	2101      	movs	r1, #1
   b4108:	f000 f99e 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b410c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4110:	2300      	movs	r3, #0
   b4112:	4628      	mov	r0, r5
   b4114:	4621      	mov	r1, r4
   b4116:	f000 ffa7 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b411a:	220a      	movs	r2, #10
   b411c:	2300      	movs	r3, #0
   b411e:	f000 ffa3 	bl	b5068 <__aeabi_ldivmod>
  first.writeDigitAscii(0, getNthDigit(num, 3) + '0');
   b4122:	2300      	movs	r3, #0
   b4124:	3230      	adds	r2, #48	; 0x30
   b4126:	4619      	mov	r1, r3
   b4128:	4856      	ldr	r0, [pc, #344]	; (b4284 <_Z8writeNumx+0x1d8>)
   b412a:	b2d2      	uxtb	r2, r2
   b412c:	f000 f98c 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b4130:	f242 7210 	movw	r2, #10000	; 0x2710
   b4134:	2300      	movs	r3, #0
   b4136:	4628      	mov	r0, r5
   b4138:	4621      	mov	r1, r4
   b413a:	f000 ff95 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b413e:	220a      	movs	r2, #10
   b4140:	2300      	movs	r3, #0
   b4142:	f000 ff91 	bl	b5068 <__aeabi_ldivmod>
  mid.writeDigitAscii(3, getNthDigit(num, 4) + '0');
   b4146:	3230      	adds	r2, #48	; 0x30
   b4148:	484f      	ldr	r0, [pc, #316]	; (b4288 <_Z8writeNumx+0x1dc>)
   b414a:	2300      	movs	r3, #0
   b414c:	b2d2      	uxtb	r2, r2
   b414e:	2103      	movs	r1, #3
   b4150:	f000 f97a 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b4154:	4a4d      	ldr	r2, [pc, #308]	; (b428c <_Z8writeNumx+0x1e0>)
   b4156:	2300      	movs	r3, #0
   b4158:	4628      	mov	r0, r5
   b415a:	4621      	mov	r1, r4
   b415c:	f000 ff84 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b4160:	220a      	movs	r2, #10
   b4162:	2300      	movs	r3, #0
   b4164:	f000 ff80 	bl	b5068 <__aeabi_ldivmod>
  mid.writeDigitAscii(2, getNthDigit(num, 5) + '0');
   b4168:	3230      	adds	r2, #48	; 0x30
   b416a:	4847      	ldr	r0, [pc, #284]	; (b4288 <_Z8writeNumx+0x1dc>)
   b416c:	2300      	movs	r3, #0
   b416e:	b2d2      	uxtb	r2, r2
   b4170:	2102      	movs	r1, #2
   b4172:	f000 f969 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b4176:	4a46      	ldr	r2, [pc, #280]	; (b4290 <_Z8writeNumx+0x1e4>)
   b4178:	2300      	movs	r3, #0
   b417a:	4628      	mov	r0, r5
   b417c:	4621      	mov	r1, r4
   b417e:	f000 ff73 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b4182:	220a      	movs	r2, #10
   b4184:	2300      	movs	r3, #0
   b4186:	f000 ff6f 	bl	b5068 <__aeabi_ldivmod>
  mid.writeDigitAscii(1, getNthDigit(num, 6) + '0');
   b418a:	3230      	adds	r2, #48	; 0x30
   b418c:	483e      	ldr	r0, [pc, #248]	; (b4288 <_Z8writeNumx+0x1dc>)
   b418e:	2300      	movs	r3, #0
   b4190:	b2d2      	uxtb	r2, r2
   b4192:	2101      	movs	r1, #1
   b4194:	f000 f958 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b4198:	4a3e      	ldr	r2, [pc, #248]	; (b4294 <_Z8writeNumx+0x1e8>)
   b419a:	2300      	movs	r3, #0
   b419c:	4628      	mov	r0, r5
   b419e:	4621      	mov	r1, r4
   b41a0:	f000 ff62 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b41a4:	220a      	movs	r2, #10
   b41a6:	2300      	movs	r3, #0
  for (int place = 0; place < digit; place++) number = number / 10;
   b41a8:	4607      	mov	r7, r0
   b41aa:	460e      	mov	r6, r1
  return number % 10;
   b41ac:	f000 ff5c 	bl	b5068 <__aeabi_ldivmod>
  mid.writeDigitAscii(0, getNthDigit(num, 7) + '0');
   b41b0:	2300      	movs	r3, #0
   b41b2:	3230      	adds	r2, #48	; 0x30
   b41b4:	4619      	mov	r1, r3
   b41b6:	4834      	ldr	r0, [pc, #208]	; (b4288 <_Z8writeNumx+0x1dc>)
   b41b8:	b2d2      	uxtb	r2, r2
   b41ba:	f000 f945 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  for (int place = 0; place < digit; place++) number = number / 10;
   b41be:	220a      	movs	r2, #10
   b41c0:	2300      	movs	r3, #0
   b41c2:	4638      	mov	r0, r7
   b41c4:	4631      	mov	r1, r6
   b41c6:	f000 ff4f 	bl	b5068 <__aeabi_ldivmod>
  return number % 10;
   b41ca:	220a      	movs	r2, #10
   b41cc:	2300      	movs	r3, #0
   b41ce:	f000 ff4b 	bl	b5068 <__aeabi_ldivmod>
  last.writeDigitAscii(3, getNthDigit(num, 8) + '0');
   b41d2:	3230      	adds	r2, #48	; 0x30
   b41d4:	4830      	ldr	r0, [pc, #192]	; (b4298 <_Z8writeNumx+0x1ec>)
   b41d6:	2300      	movs	r3, #0
   b41d8:	b2d2      	uxtb	r2, r2
   b41da:	2103      	movs	r1, #3
   b41dc:	f000 f934 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
   b41e0:	4627      	mov	r7, r4
   b41e2:	46ac      	mov	ip, r5
   b41e4:	2609      	movs	r6, #9
  for (int place = 0; place < digit; place++) number = number / 10;
   b41e6:	4660      	mov	r0, ip
   b41e8:	4639      	mov	r1, r7
   b41ea:	220a      	movs	r2, #10
   b41ec:	2300      	movs	r3, #0
   b41ee:	f000 ff3b 	bl	b5068 <__aeabi_ldivmod>
   b41f2:	3e01      	subs	r6, #1
   b41f4:	4684      	mov	ip, r0
   b41f6:	460f      	mov	r7, r1
   b41f8:	d1f5      	bne.n	b41e6 <_Z8writeNumx+0x13a>
  return number % 10;
   b41fa:	220a      	movs	r2, #10
   b41fc:	2300      	movs	r3, #0
   b41fe:	f000 ff33 	bl	b5068 <__aeabi_ldivmod>
  last.writeDigitAscii(2, getNthDigit(num, 9) + '0');
   b4202:	3230      	adds	r2, #48	; 0x30
   b4204:	4633      	mov	r3, r6
   b4206:	4824      	ldr	r0, [pc, #144]	; (b4298 <_Z8writeNumx+0x1ec>)
   b4208:	b2d2      	uxtb	r2, r2
   b420a:	2102      	movs	r1, #2
   b420c:	f000 f91c 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
   b4210:	4627      	mov	r7, r4
   b4212:	46ac      	mov	ip, r5
   b4214:	260a      	movs	r6, #10
  for (int place = 0; place < digit; place++) number = number / 10;
   b4216:	4660      	mov	r0, ip
   b4218:	4639      	mov	r1, r7
   b421a:	220a      	movs	r2, #10
   b421c:	2300      	movs	r3, #0
   b421e:	f000 ff23 	bl	b5068 <__aeabi_ldivmod>
   b4222:	3e01      	subs	r6, #1
   b4224:	4684      	mov	ip, r0
   b4226:	460f      	mov	r7, r1
   b4228:	d1f5      	bne.n	b4216 <_Z8writeNumx+0x16a>
  return number % 10;
   b422a:	220a      	movs	r2, #10
   b422c:	2300      	movs	r3, #0
   b422e:	f000 ff1b 	bl	b5068 <__aeabi_ldivmod>
  last.writeDigitAscii(1, getNthDigit(num, 10) + '0');
   b4232:	3230      	adds	r2, #48	; 0x30
   b4234:	4633      	mov	r3, r6
   b4236:	4818      	ldr	r0, [pc, #96]	; (b4298 <_Z8writeNumx+0x1ec>)
   b4238:	b2d2      	uxtb	r2, r2
   b423a:	2101      	movs	r1, #1
   b423c:	f000 f904 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
   b4240:	260b      	movs	r6, #11
  for (int place = 0; place < digit; place++) number = number / 10;
   b4242:	4628      	mov	r0, r5
   b4244:	4621      	mov	r1, r4
   b4246:	220a      	movs	r2, #10
   b4248:	2300      	movs	r3, #0
   b424a:	f000 ff0d 	bl	b5068 <__aeabi_ldivmod>
   b424e:	3e01      	subs	r6, #1
   b4250:	4605      	mov	r5, r0
   b4252:	460c      	mov	r4, r1
   b4254:	d1f5      	bne.n	b4242 <_Z8writeNumx+0x196>
  return number % 10;
   b4256:	220a      	movs	r2, #10
   b4258:	2300      	movs	r3, #0
   b425a:	f000 ff05 	bl	b5068 <__aeabi_ldivmod>
  last.writeDigitAscii(0, getNthDigit(num, 11) + '0');
   b425e:	3230      	adds	r2, #48	; 0x30
   b4260:	4633      	mov	r3, r6
   b4262:	4631      	mov	r1, r6
   b4264:	b2d2      	uxtb	r2, r2
   b4266:	480c      	ldr	r0, [pc, #48]	; (b4298 <_Z8writeNumx+0x1ec>)
   b4268:	f000 f8ee 	bl	b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>
  first.writeDisplay();
   b426c:	4805      	ldr	r0, [pc, #20]	; (b4284 <_Z8writeNumx+0x1d8>)
   b426e:	f000 f8c5 	bl	b43fc <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  mid.writeDisplay();
   b4272:	4805      	ldr	r0, [pc, #20]	; (b4288 <_Z8writeNumx+0x1dc>)
   b4274:	f000 f8c2 	bl	b43fc <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  last.writeDisplay();
  
}
   b4278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  last.writeDisplay();
   b427c:	4806      	ldr	r0, [pc, #24]	; (b4298 <_Z8writeNumx+0x1ec>)
   b427e:	f000 b8bd 	b.w	b43fc <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
   b4282:	bf00      	nop
   b4284:	2003e690 	.word	0x2003e690
   b4288:	2003e6b4 	.word	0x2003e6b4
   b428c:	000186a0 	.word	0x000186a0
   b4290:	000f4240 	.word	0x000f4240
   b4294:	00989680 	.word	0x00989680
   b4298:	2003e6a2 	.word	0x2003e6a2

000b429c <setup>:
void setup() {
   b429c:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b429e:	f000 fc71 	bl	b4b84 <_Z16_fetch_usbserialv>
   b42a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42a6:	f000 fc61 	bl	b4b6c <_ZN9USBSerial5beginEl>
  Wire.setSpeed(CLOCK_SPEED_400KHZ);
   b42aa:	f000 fe77 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b42ae:	490a      	ldr	r1, [pc, #40]	; (b42d8 <setup+0x3c>)
   b42b0:	f000 fbf4 	bl	b4a9c <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   b42b4:	f000 fe72 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b42b8:	f000 fbf4 	bl	b4aa4 <_ZN7TwoWire5beginEv>
  

  last.begin(0x70);  // pass in the address
   b42bc:	4807      	ldr	r0, [pc, #28]	; (b42dc <setup+0x40>)
   b42be:	2170      	movs	r1, #112	; 0x70
   b42c0:	f000 f87d 	bl	b43be <_ZN20Adafruit_LEDBackpack5beginEh>
  mid.begin(0x73);
   b42c4:	4806      	ldr	r0, [pc, #24]	; (b42e0 <setup+0x44>)
   b42c6:	2173      	movs	r1, #115	; 0x73
   b42c8:	f000 f879 	bl	b43be <_ZN20Adafruit_LEDBackpack5beginEh>
  first.begin(0x71);

  
}
   b42cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  first.begin(0x71);
   b42d0:	4804      	ldr	r0, [pc, #16]	; (b42e4 <setup+0x48>)
   b42d2:	2171      	movs	r1, #113	; 0x71
   b42d4:	f000 b873 	b.w	b43be <_ZN20Adafruit_LEDBackpack5beginEh>
   b42d8:	00061a80 	.word	0x00061a80
   b42dc:	2003e6a2 	.word	0x2003e6a2
   b42e0:	2003e6b4 	.word	0x2003e6b4
   b42e4:	2003e690 	.word	0x2003e690

000b42e8 <loop>:



void loop() {
   b42e8:	b510      	push	{r4, lr}
//Serial.println(getNthDigit(12345, 0));
writeNum(counter);
   b42ea:	4c06      	ldr	r4, [pc, #24]	; (b4304 <loop+0x1c>)
   b42ec:	e9d4 0100 	ldrd	r0, r1, [r4]
   b42f0:	f7ff fedc 	bl	b40ac <_Z8writeNumx>
counter++;
   b42f4:	e9d4 3200 	ldrd	r3, r2, [r4]
   b42f8:	3301      	adds	r3, #1
   b42fa:	f142 0200 	adc.w	r2, r2, #0
   b42fe:	e9c4 3200 	strd	r3, r2, [r4]
   b4302:	bd10      	pop	{r4, pc}
   b4304:	2003e688 	.word	0x2003e688

000b4308 <_GLOBAL__sub_I_SystemMode>:
   b4308:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   b430a:	2100      	movs	r1, #0
   b430c:	2001      	movs	r0, #1
   b430e:	f000 fa09 	bl	b4724 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4312:	4b0c      	ldr	r3, [pc, #48]	; (b4344 <_GLOBAL__sub_I_SystemMode+0x3c>)
   b4314:	2200      	movs	r2, #0
   b4316:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b431a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b431e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4320:	2003      	movs	r0, #3
   b4322:	f000 f9f7 	bl	b4714 <set_system_mode>
Adafruit_AlphaNum4 alpha4 = Adafruit_AlphaNum4();
   b4326:	4808      	ldr	r0, [pc, #32]	; (b4348 <_GLOBAL__sub_I_SystemMode+0x40>)
   b4328:	f000 f88c 	bl	b4444 <_ZN18Adafruit_AlphaNum4C1Ev>
Adafruit_AlphaNum4 last = Adafruit_AlphaNum4();
   b432c:	4807      	ldr	r0, [pc, #28]	; (b434c <_GLOBAL__sub_I_SystemMode+0x44>)
   b432e:	f000 f889 	bl	b4444 <_ZN18Adafruit_AlphaNum4C1Ev>
Adafruit_AlphaNum4 mid = Adafruit_AlphaNum4();
   b4332:	4807      	ldr	r0, [pc, #28]	; (b4350 <_GLOBAL__sub_I_SystemMode+0x48>)
   b4334:	f000 f886 	bl	b4444 <_ZN18Adafruit_AlphaNum4C1Ev>
   b4338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_AlphaNum4 first = Adafruit_AlphaNum4();
   b433c:	4805      	ldr	r0, [pc, #20]	; (b4354 <_GLOBAL__sub_I_SystemMode+0x4c>)
   b433e:	f000 b881 	b.w	b4444 <_ZN18Adafruit_AlphaNum4C1Ev>
   b4342:	bf00      	nop
   b4344:	2003e668 	.word	0x2003e668
   b4348:	2003e674 	.word	0x2003e674
   b434c:	2003e6a2 	.word	0x2003e6a2
   b4350:	2003e6b4 	.word	0x2003e6b4
   b4354:	2003e690 	.word	0x2003e690

000b4358 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4358:	6803      	ldr	r3, [r0, #0]
   b435a:	b2c9      	uxtb	r1, r1
   b435c:	689b      	ldr	r3, [r3, #8]
   b435e:	4718      	bx	r3

000b4360 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>:
0b0010010010001001, // }
0b0000010100100000, // ~
0b0011111111111111,

};
void Adafruit_LEDBackpack::setBrightness(uint8_t b) {
   b4360:	b538      	push	{r3, r4, r5, lr}
   b4362:	4605      	mov	r5, r0
   b4364:	460c      	mov	r4, r1
  if (b > 15) b = 15;
  Wire.beginTransmission(i2c_addr);
   b4366:	f000 fe19 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b436a:	7c29      	ldrb	r1, [r5, #16]
   b436c:	f000 fba0 	bl	b4ab0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(HT16K33_CMD_BRIGHTNESS | b);
   b4370:	f000 fe14 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b4374:	2c0f      	cmp	r4, #15
   b4376:	bf28      	it	cs
   b4378:	240f      	movcs	r4, #15
   b437a:	f044 01e0 	orr.w	r1, r4, #224	; 0xe0
   b437e:	f7ff ffeb 	bl	b4358 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b4382:	f000 fe0b 	bl	b4f9c <_Z19__fetch_global_Wirev>
}
   b4386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b438a:	f000 bb99 	b.w	b4ac0 <_ZN7TwoWire15endTransmissionEv>

000b438e <_ZN20Adafruit_LEDBackpack9blinkRateEh>:

void Adafruit_LEDBackpack::blinkRate(uint8_t b) {
   b438e:	b538      	push	{r3, r4, r5, lr}
   b4390:	4605      	mov	r5, r0
   b4392:	460c      	mov	r4, r1
  Wire.beginTransmission(i2c_addr);
   b4394:	f000 fe02 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b4398:	7c29      	ldrb	r1, [r5, #16]
   b439a:	f000 fb89 	bl	b4ab0 <_ZN7TwoWire17beginTransmissionEh>
  if (b > 3) b = 0; // turn off if not sure
   b439e:	2c04      	cmp	r4, #4
   b43a0:	bf28      	it	cs
   b43a2:	2400      	movcs	r4, #0

  Wire.write(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1));
   b43a4:	f000 fdfa 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b43a8:	0061      	lsls	r1, r4, #1
   b43aa:	f041 0181 	orr.w	r1, r1, #129	; 0x81
   b43ae:	f7ff ffd3 	bl	b4358 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b43b2:	f000 fdf3 	bl	b4f9c <_Z19__fetch_global_Wirev>
}
   b43b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b43ba:	f000 bb81 	b.w	b4ac0 <_ZN7TwoWire15endTransmissionEv>

000b43be <_ZN20Adafruit_LEDBackpack5beginEh>:

Adafruit_LEDBackpack::Adafruit_LEDBackpack(void) {
}

void Adafruit_LEDBackpack::begin(uint8_t _addr = 0x70) {
   b43be:	b510      	push	{r4, lr}
   b43c0:	4604      	mov	r4, r0
  i2c_addr = _addr;
   b43c2:	7401      	strb	r1, [r0, #16]

  Wire.begin();
   b43c4:	f000 fdea 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b43c8:	f000 fb6c 	bl	b4aa4 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(i2c_addr);
   b43cc:	f000 fde6 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b43d0:	7c21      	ldrb	r1, [r4, #16]
   b43d2:	f000 fb6d 	bl	b4ab0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x21);  // turn on oscillator
   b43d6:	f000 fde1 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b43da:	2121      	movs	r1, #33	; 0x21
   b43dc:	f7ff ffbc 	bl	b4358 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b43e0:	f000 fddc 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b43e4:	f000 fb6c 	bl	b4ac0 <_ZN7TwoWire15endTransmissionEv>
  blinkRate(HT16K33_BLINK_OFF);
   b43e8:	4620      	mov	r0, r4
   b43ea:	2100      	movs	r1, #0
   b43ec:	f7ff ffcf 	bl	b438e <_ZN20Adafruit_LEDBackpack9blinkRateEh>

  setBrightness(15); // max brightness
   b43f0:	4620      	mov	r0, r4
   b43f2:	210f      	movs	r1, #15
}
   b43f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setBrightness(15); // max brightness
   b43f8:	f7ff bfb2 	b.w	b4360 <_ZN20Adafruit_LEDBackpack13setBrightnessEh>

000b43fc <_ZN20Adafruit_LEDBackpack12writeDisplayEv>:

void Adafruit_LEDBackpack::writeDisplay(void) {
   b43fc:	b538      	push	{r3, r4, r5, lr}
   b43fe:	4604      	mov	r4, r0
  Wire.beginTransmission(i2c_addr);
   b4400:	f000 fdcc 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b4404:	7c21      	ldrb	r1, [r4, #16]
   b4406:	f000 fb53 	bl	b4ab0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)0x00); // start at address $00
   b440a:	f000 fdc7 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b440e:	6803      	ldr	r3, [r0, #0]
   b4410:	2100      	movs	r1, #0
   b4412:	689b      	ldr	r3, [r3, #8]
   b4414:	4798      	blx	r3

  for (uint8_t i=0; i<8; i++) {
   b4416:	1ea5      	subs	r5, r4, #2
   b4418:	340e      	adds	r4, #14
    Wire.write(displaybuffer[i] & 0xFF);
   b441a:	f000 fdbf 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b441e:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   b4422:	b2c9      	uxtb	r1, r1
   b4424:	f7ff ff98 	bl	b4358 <_ZN7TwoWire5writeEi.isra.0>
    Wire.write(displaybuffer[i] >> 8);
   b4428:	f000 fdb8 	bl	b4f9c <_Z19__fetch_global_Wirev>
   b442c:	8829      	ldrh	r1, [r5, #0]
   b442e:	0a09      	lsrs	r1, r1, #8
   b4430:	f7ff ff92 	bl	b4358 <_ZN7TwoWire5writeEi.isra.0>
  for (uint8_t i=0; i<8; i++) {
   b4434:	42a5      	cmp	r5, r4
   b4436:	d1f0      	bne.n	b441a <_ZN20Adafruit_LEDBackpack12writeDisplayEv+0x1e>
  }
  Wire.endTransmission();
   b4438:	f000 fdb0 	bl	b4f9c <_Z19__fetch_global_Wirev>
}
   b443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   b4440:	f000 bb3e 	b.w	b4ac0 <_ZN7TwoWire15endTransmissionEv>

000b4444 <_ZN18Adafruit_AlphaNum4C1Ev>:

/******************************* QUAD ALPHANUM OBJECT */

Adafruit_AlphaNum4::Adafruit_AlphaNum4(void) {

}
   b4444:	4770      	bx	lr
	...

000b4448 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb>:

void Adafruit_AlphaNum4::writeDigitRaw(uint8_t n, uint16_t bitmask) {
  displaybuffer[n] = bitmask;
}

void Adafruit_AlphaNum4::writeDigitAscii(uint8_t n, uint8_t a,  boolean d) {
   b4448:	b510      	push	{r4, lr}
  uint16_t font = alphafonttable[a];
   b444a:	4c05      	ldr	r4, [pc, #20]	; (b4460 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb+0x18>)
   b444c:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  Serial.print(a, DEC);
  Serial.print(" / '"); Serial.write(a);
  Serial.print("' = 0x"); Serial.println(font, HEX);
  */

  if (d) displaybuffer[n] |= (1<<14);
   b4450:	b913      	cbnz	r3, b4458 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb+0x10>
   b4452:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
}
   b4456:	bd10      	pop	{r4, pc}
  if (d) displaybuffer[n] |= (1<<14);
   b4458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   b445c:	e7f9      	b.n	b4452 <_ZN18Adafruit_AlphaNum415writeDigitAsciiEhhb+0xa>
   b445e:	bf00      	nop
   b4460:	000b5560 	.word	0x000b5560

000b4464 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <HAL_USB_USART_Init+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	681b      	ldr	r3, [r3, #0]
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	0003024c 	.word	0x0003024c

000b4474 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <HAL_USB_USART_Begin+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	685b      	ldr	r3, [r3, #4]
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	0003024c 	.word	0x0003024c

000b4484 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <HAL_USB_USART_Available_Data+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	691b      	ldr	r3, [r3, #16]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	0003024c 	.word	0x0003024c

000b4494 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	695b      	ldr	r3, [r3, #20]
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	0003024c 	.word	0x0003024c

000b44a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <HAL_USB_USART_Receive_Data+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	699b      	ldr	r3, [r3, #24]
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	0003024c 	.word	0x0003024c

000b44b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <HAL_USB_USART_Send_Data+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	69db      	ldr	r3, [r3, #28]
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	0003024c 	.word	0x0003024c

000b44c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <HAL_USB_USART_Flush_Data+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	6a1b      	ldr	r3, [r3, #32]
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	0003024c 	.word	0x0003024c

000b44d4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <hal_i2c_set_speed+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	681b      	ldr	r3, [r3, #0]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030228 	.word	0x00030228

000b44e4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <hal_i2c_begin+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	68db      	ldr	r3, [r3, #12]
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	00030228 	.word	0x00030228

000b44f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <hal_i2c_begin_transmission+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	699b      	ldr	r3, [r3, #24]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030228 	.word	0x00030228

000b4504 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <hal_i2c_end_transmission+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	69db      	ldr	r3, [r3, #28]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030228 	.word	0x00030228

000b4514 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <hal_i2c_write+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	6a1b      	ldr	r3, [r3, #32]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	00030228 	.word	0x00030228

000b4524 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <hal_i2c_available+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	00030228 	.word	0x00030228

000b4534 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <hal_i2c_read+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	00030228 	.word	0x00030228

000b4544 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <hal_i2c_peek+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030228 	.word	0x00030228

000b4554 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <hal_i2c_flush+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030228 	.word	0x00030228

000b4564 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <hal_i2c_init+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030228 	.word	0x00030228

000b4574 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <hal_usart_write+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	68db      	ldr	r3, [r3, #12]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003023c 	.word	0x0003023c

000b4584 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <hal_usart_available+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	691b      	ldr	r3, [r3, #16]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003023c 	.word	0x0003023c

000b4594 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <hal_usart_read+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	695b      	ldr	r3, [r3, #20]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003023c 	.word	0x0003023c

000b45a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <hal_usart_peek+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	699b      	ldr	r3, [r3, #24]
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003023c 	.word	0x0003023c

000b45b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <hal_usart_flush+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	69db      	ldr	r3, [r3, #28]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	0003023c 	.word	0x0003023c

000b45c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <hal_usart_available_data_for_write+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003023c 	.word	0x0003023c

000b45d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_usart_init_ex+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003023c 	.word	0x0003023c

000b45e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <inet_inet_ntop+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	695b      	ldr	r3, [r3, #20]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030264 	.word	0x00030264

000b45f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <os_mutex_recursive_create+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030248 	.word	0x00030248

000b4604 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <HAL_RNG_GetRandomNumber+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	685b      	ldr	r3, [r3, #4]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030218 	.word	0x00030218

000b4614 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	695b      	ldr	r3, [r3, #20]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030218 	.word	0x00030218

000b4624 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <netdb_freeaddrinfo+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	689b      	ldr	r3, [r3, #8]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030268 	.word	0x00030268

000b4634 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <netdb_getaddrinfo+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	68db      	ldr	r3, [r3, #12]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030268 	.word	0x00030268

000b4644 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030244 	.word	0x00030244

000b4654 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <network_connect+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	685b      	ldr	r3, [r3, #4]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030240 	.word	0x00030240

000b4664 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <network_connecting+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	689b      	ldr	r3, [r3, #8]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030240 	.word	0x00030240

000b4674 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <network_disconnect+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	68db      	ldr	r3, [r3, #12]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030240 	.word	0x00030240

000b4684 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <network_ready+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	691b      	ldr	r3, [r3, #16]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030240 	.word	0x00030240

000b4694 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <network_on+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	695b      	ldr	r3, [r3, #20]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030240 	.word	0x00030240

000b46a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <network_off+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	699b      	ldr	r3, [r3, #24]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030240 	.word	0x00030240

000b46b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <network_listen+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	69db      	ldr	r3, [r3, #28]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030240 	.word	0x00030240

000b46c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <network_listening+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6a1b      	ldr	r3, [r3, #32]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030240 	.word	0x00030240

000b46d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <network_set_listen_timeout+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030240 	.word	0x00030240

000b46e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <network_get_listen_timeout+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030240 	.word	0x00030240

000b46f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <network_is_on+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030240 	.word	0x00030240

000b4704 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <network_is_off+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030240 	.word	0x00030240

000b4714 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <set_system_mode+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	685b      	ldr	r3, [r3, #4]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030220 	.word	0x00030220

000b4724 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <system_thread_set_state+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030220 	.word	0x00030220

000b4734 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b03      	ldr	r3, [pc, #12]	; (b4744 <system_ctrl_set_app_request_handler+0x10>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b473e:	9301      	str	r3, [sp, #4]
   b4740:	bd08      	pop	{r3, pc}
   b4742:	0000      	.short	0x0000
   b4744:	00030220 	.word	0x00030220

000b4748 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b03      	ldr	r3, [pc, #12]	; (b4758 <system_ctrl_set_result+0x10>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4752:	9301      	str	r3, [sp, #4]
   b4754:	bd08      	pop	{r3, pc}
   b4756:	0000      	.short	0x0000
   b4758:	00030220 	.word	0x00030220

000b475c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <malloc+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	681b      	ldr	r3, [r3, #0]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	0003021c 	.word	0x0003021c

000b476c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <free+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	685b      	ldr	r3, [r3, #4]
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	0003021c 	.word	0x0003021c

000b477c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <__assert_func+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	0003021c 	.word	0x0003021c

000b478c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <newlib_impure_ptr_callback+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	0003021c 	.word	0x0003021c

000b479c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b479c:	2300      	movs	r3, #0
   b479e:	6840      	ldr	r0, [r0, #4]
   b47a0:	461a      	mov	r2, r3
   b47a2:	f7ff bf57 	b.w	b4654 <network_connect>

000b47a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b47a6:	6840      	ldr	r0, [r0, #4]
   b47a8:	2200      	movs	r2, #0
   b47aa:	2102      	movs	r1, #2
   b47ac:	f7ff bf62 	b.w	b4674 <network_disconnect>

000b47b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b47b0:	2200      	movs	r2, #0
   b47b2:	6840      	ldr	r0, [r0, #4]
   b47b4:	4611      	mov	r1, r2
   b47b6:	f7ff bf55 	b.w	b4664 <network_connecting>

000b47ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b47ba:	2200      	movs	r2, #0
   b47bc:	6840      	ldr	r0, [r0, #4]
   b47be:	4611      	mov	r1, r2
   b47c0:	f7ff bf60 	b.w	b4684 <network_ready>

000b47c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b47c4:	2300      	movs	r3, #0
   b47c6:	6840      	ldr	r0, [r0, #4]
   b47c8:	461a      	mov	r2, r3
   b47ca:	4619      	mov	r1, r3
   b47cc:	f7ff bf62 	b.w	b4694 <network_on>

000b47d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b47d0:	2300      	movs	r3, #0
   b47d2:	6840      	ldr	r0, [r0, #4]
   b47d4:	461a      	mov	r2, r3
   b47d6:	4619      	mov	r1, r3
   b47d8:	f7ff bf64 	b.w	b46a4 <network_off>

000b47dc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b47dc:	6840      	ldr	r0, [r0, #4]
   b47de:	2100      	movs	r1, #0
   b47e0:	f7ff bf88 	b.w	b46f4 <network_is_on>

000b47e4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b47e4:	6840      	ldr	r0, [r0, #4]
   b47e6:	2100      	movs	r1, #0
   b47e8:	f7ff bf8c 	b.w	b4704 <network_is_off>

000b47ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b47ec:	6840      	ldr	r0, [r0, #4]
   b47ee:	2200      	movs	r2, #0
   b47f0:	f081 0101 	eor.w	r1, r1, #1
   b47f4:	f7ff bf5e 	b.w	b46b4 <network_listen>

000b47f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b47f8:	6840      	ldr	r0, [r0, #4]
   b47fa:	2200      	movs	r2, #0
   b47fc:	f7ff bf6a 	b.w	b46d4 <network_set_listen_timeout>

000b4800 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4800:	2200      	movs	r2, #0
   b4802:	6840      	ldr	r0, [r0, #4]
   b4804:	4611      	mov	r1, r2
   b4806:	f7ff bf6d 	b.w	b46e4 <network_get_listen_timeout>

000b480a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b480a:	2200      	movs	r2, #0
   b480c:	6840      	ldr	r0, [r0, #4]
   b480e:	4611      	mov	r1, r2
   b4810:	f7ff bf58 	b.w	b46c4 <network_listening>

000b4814 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4818:	b095      	sub	sp, #84	; 0x54
   b481a:	4614      	mov	r4, r2
   b481c:	460d      	mov	r5, r1
   b481e:	4607      	mov	r7, r0
    IPAddress addr;
   b4820:	f000 fa10 	bl	b4c44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4824:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4826:	221c      	movs	r2, #28
   b4828:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b482a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b482c:	f000 fdea 	bl	b5404 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4830:	2340      	movs	r3, #64	; 0x40
   b4832:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4834:	4620      	mov	r0, r4
   b4836:	466b      	mov	r3, sp
   b4838:	aa0c      	add	r2, sp, #48	; 0x30
   b483a:	2100      	movs	r1, #0
   b483c:	f7ff fefa 	bl	b4634 <netdb_getaddrinfo>
    if (!r) {
   b4840:	4604      	mov	r4, r0
   b4842:	2800      	cmp	r0, #0
   b4844:	d14b      	bne.n	b48de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4846:	4602      	mov	r2, r0
   b4848:	2101      	movs	r1, #1
   b484a:	6868      	ldr	r0, [r5, #4]
   b484c:	f7ff ff1a 	bl	b4684 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4850:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4852:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4854:	4622      	mov	r2, r4
   b4856:	6868      	ldr	r0, [r5, #4]
   b4858:	f7ff ff14 	bl	b4684 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b485c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b485e:	4681      	mov	r9, r0
        bool ok = false;
   b4860:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4862:	2e00      	cmp	r6, #0
   b4864:	d03b      	beq.n	b48de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4866:	2900      	cmp	r1, #0
   b4868:	d139      	bne.n	b48de <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b486a:	6873      	ldr	r3, [r6, #4]
   b486c:	2b02      	cmp	r3, #2
   b486e:	d003      	beq.n	b4878 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4870:	2b0a      	cmp	r3, #10
   b4872:	d011      	beq.n	b4898 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4874:	69f6      	ldr	r6, [r6, #28]
   b4876:	e7f4      	b.n	b4862 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4878:	f1b8 0f00 	cmp.w	r8, #0
   b487c:	d0fa      	beq.n	b4874 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b487e:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4880:	a806      	add	r0, sp, #24
   b4882:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4884:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4886:	f000 fa0b 	bl	b4ca0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b488a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b488c:	1d3c      	adds	r4, r7, #4
   b488e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4890:	682b      	ldr	r3, [r5, #0]
   b4892:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4894:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4896:	e7ed      	b.n	b4874 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4898:	f1b9 0f00 	cmp.w	r9, #0
   b489c:	d0ea      	beq.n	b4874 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b489e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b48a0:	2210      	movs	r2, #16
   b48a2:	a801      	add	r0, sp, #4
   b48a4:	f000 fdae 	bl	b5404 <memset>
                    a.v = 6;
   b48a8:	2306      	movs	r3, #6
   b48aa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b48ae:	ad01      	add	r5, sp, #4
   b48b0:	f104 0308 	add.w	r3, r4, #8
   b48b4:	3418      	adds	r4, #24
   b48b6:	6818      	ldr	r0, [r3, #0]
   b48b8:	6859      	ldr	r1, [r3, #4]
   b48ba:	462a      	mov	r2, r5
   b48bc:	c203      	stmia	r2!, {r0, r1}
   b48be:	3308      	adds	r3, #8
   b48c0:	42a3      	cmp	r3, r4
   b48c2:	4615      	mov	r5, r2
   b48c4:	d1f7      	bne.n	b48b6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b48c6:	a901      	add	r1, sp, #4
   b48c8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b48ca:	ad07      	add	r5, sp, #28
   b48cc:	f000 f9c8 	bl	b4c60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b48d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b48d2:	1d3c      	adds	r4, r7, #4
   b48d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b48d6:	682b      	ldr	r3, [r5, #0]
   b48d8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b48da:	4649      	mov	r1, r9
   b48dc:	e7ca      	b.n	b4874 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b48de:	9800      	ldr	r0, [sp, #0]
   b48e0:	f7ff fea0 	bl	b4624 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b48e4:	4638      	mov	r0, r7
   b48e6:	b015      	add	sp, #84	; 0x54
   b48e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b48ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b48ec:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b48ee:	4a03      	ldr	r2, [pc, #12]	; (b48fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b48f0:	601a      	str	r2, [r3, #0]
   b48f2:	2200      	movs	r2, #0
   b48f4:	605a      	str	r2, [r3, #4]

} // spark
   b48f6:	4770      	bx	lr
   b48f8:	2003e6c8 	.word	0x2003e6c8
   b48fc:	000b5668 	.word	0x000b5668

000b4900 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4900:	2200      	movs	r2, #0
   b4902:	6840      	ldr	r0, [r0, #4]
   b4904:	4611      	mov	r1, r2
   b4906:	f7ff bebd 	b.w	b4684 <network_ready>

000b490a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b490a:	2200      	movs	r2, #0
   b490c:	6840      	ldr	r0, [r0, #4]
   b490e:	4611      	mov	r1, r2
   b4910:	f7ff bed8 	b.w	b46c4 <network_listening>

000b4914 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4914:	2200      	movs	r2, #0
   b4916:	6840      	ldr	r0, [r0, #4]
   b4918:	4611      	mov	r1, r2
   b491a:	f7ff bee3 	b.w	b46e4 <network_get_listen_timeout>

000b491e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b491e:	6840      	ldr	r0, [r0, #4]
   b4920:	2200      	movs	r2, #0
   b4922:	f7ff bed7 	b.w	b46d4 <network_set_listen_timeout>

000b4926 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4926:	6840      	ldr	r0, [r0, #4]
   b4928:	2200      	movs	r2, #0
   b492a:	f081 0101 	eor.w	r1, r1, #1
   b492e:	f7ff bec1 	b.w	b46b4 <network_listen>

000b4932 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4932:	2300      	movs	r3, #0
   b4934:	6840      	ldr	r0, [r0, #4]
   b4936:	461a      	mov	r2, r3
   b4938:	4619      	mov	r1, r3
   b493a:	f7ff beb3 	b.w	b46a4 <network_off>

000b493e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b493e:	2300      	movs	r3, #0
   b4940:	6840      	ldr	r0, [r0, #4]
   b4942:	461a      	mov	r2, r3
   b4944:	4619      	mov	r1, r3
   b4946:	f7ff bea5 	b.w	b4694 <network_on>

000b494a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b494a:	2200      	movs	r2, #0
   b494c:	6840      	ldr	r0, [r0, #4]
   b494e:	4611      	mov	r1, r2
   b4950:	f7ff be88 	b.w	b4664 <network_connecting>

000b4954 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4954:	6840      	ldr	r0, [r0, #4]
   b4956:	2200      	movs	r2, #0
   b4958:	2102      	movs	r1, #2
   b495a:	f7ff be8b 	b.w	b4674 <network_disconnect>

000b495e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b495e:	2300      	movs	r3, #0
   b4960:	6840      	ldr	r0, [r0, #4]
   b4962:	461a      	mov	r2, r3
   b4964:	f7ff be76 	b.w	b4654 <network_connect>

000b4968 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4968:	4b02      	ldr	r3, [pc, #8]	; (b4974 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b496a:	2204      	movs	r2, #4
   b496c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b496e:	4a02      	ldr	r2, [pc, #8]	; (b4978 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4970:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4972:	4770      	bx	lr
   b4974:	2003e6d0 	.word	0x2003e6d0
   b4978:	000b56a4 	.word	0x000b56a4

000b497c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b497c:	4770      	bx	lr

000b497e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b497e:	7441      	strb	r1, [r0, #17]
}
   b4980:	4770      	bx	lr

000b4982 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4982:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4984:	7c00      	ldrb	r0, [r0, #16]
   b4986:	f7ff fe1d 	bl	b45c4 <hal_usart_available_data_for_write>
}
   b498a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b498e:	bd08      	pop	{r3, pc}

000b4990 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4990:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4992:	7c00      	ldrb	r0, [r0, #16]
   b4994:	f7ff fdf6 	bl	b4584 <hal_usart_available>
}
   b4998:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b499c:	bd08      	pop	{r3, pc}

000b499e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b499e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b49a0:	7c00      	ldrb	r0, [r0, #16]
   b49a2:	f7ff fdff 	bl	b45a4 <hal_usart_peek>
}
   b49a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49aa:	bd08      	pop	{r3, pc}

000b49ac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b49ac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b49ae:	7c00      	ldrb	r0, [r0, #16]
   b49b0:	f7ff fdf0 	bl	b4594 <hal_usart_read>
}
   b49b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49b8:	bd08      	pop	{r3, pc}

000b49ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b49ba:	7c00      	ldrb	r0, [r0, #16]
   b49bc:	f7ff bdfa 	b.w	b45b4 <hal_usart_flush>

000b49c0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b49c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b49c2:	7c45      	ldrb	r5, [r0, #17]
{
   b49c4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b49c6:	b12d      	cbz	r5, b49d4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b49c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b49ca:	b003      	add	sp, #12
   b49cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b49d0:	f7ff bdd0 	b.w	b4574 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b49d4:	7c00      	ldrb	r0, [r0, #16]
   b49d6:	9101      	str	r1, [sp, #4]
   b49d8:	f7ff fdf4 	bl	b45c4 <hal_usart_available_data_for_write>
   b49dc:	2800      	cmp	r0, #0
   b49de:	9901      	ldr	r1, [sp, #4]
   b49e0:	dcf2      	bgt.n	b49c8 <_ZN11USARTSerial5writeEh+0x8>
}
   b49e2:	4628      	mov	r0, r5
   b49e4:	b003      	add	sp, #12
   b49e6:	bd30      	pop	{r4, r5, pc}

000b49e8 <_ZN11USARTSerialD0Ev>:
   b49e8:	b510      	push	{r4, lr}
   b49ea:	2114      	movs	r1, #20
   b49ec:	4604      	mov	r4, r0
   b49ee:	f7ff fb52 	bl	b4096 <_ZdlPvj>
   b49f2:	4620      	mov	r0, r4
   b49f4:	bd10      	pop	{r4, pc}
	...

000b49f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b49f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b49fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b49fe:	4604      	mov	r4, r0
   b4a00:	4608      	mov	r0, r1
   b4a02:	4611      	mov	r1, r2
   b4a04:	2200      	movs	r2, #0
   b4a06:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4a0a:	4b04      	ldr	r3, [pc, #16]	; (b4a1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4a0c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4a0e:	2301      	movs	r3, #1
  _serial = serial;
   b4a10:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4a12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4a14:	f7ff fdde 	bl	b45d4 <hal_usart_init_ex>
}
   b4a18:	4620      	mov	r0, r4
   b4a1a:	bd10      	pop	{r4, pc}
   b4a1c:	000b56e0 	.word	0x000b56e0

000b4a20 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4a20:	4770      	bx	lr

000b4a22 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a24:	4606      	mov	r6, r0
   b4a26:	4615      	mov	r5, r2
   b4a28:	460c      	mov	r4, r1
   b4a2a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4a2c:	42bc      	cmp	r4, r7
   b4a2e:	d006      	beq.n	b4a3e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4a30:	6833      	ldr	r3, [r6, #0]
   b4a32:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4a36:	689b      	ldr	r3, [r3, #8]
   b4a38:	4630      	mov	r0, r6
   b4a3a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4a3c:	e7f6      	b.n	b4a2c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4a3e:	4628      	mov	r0, r5
   b4a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a42 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4a42:	7c00      	ldrb	r0, [r0, #16]
   b4a44:	2200      	movs	r2, #0
   b4a46:	f7ff bd65 	b.w	b4514 <hal_i2c_write>

000b4a4a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4a4a:	7c00      	ldrb	r0, [r0, #16]
   b4a4c:	2100      	movs	r1, #0
   b4a4e:	f7ff bd69 	b.w	b4524 <hal_i2c_available>

000b4a52 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4a52:	7c00      	ldrb	r0, [r0, #16]
   b4a54:	2100      	movs	r1, #0
   b4a56:	f7ff bd6d 	b.w	b4534 <hal_i2c_read>

000b4a5a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4a5a:	7c00      	ldrb	r0, [r0, #16]
   b4a5c:	2100      	movs	r1, #0
   b4a5e:	f7ff bd71 	b.w	b4544 <hal_i2c_peek>

000b4a62 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4a62:	7c00      	ldrb	r0, [r0, #16]
   b4a64:	2100      	movs	r1, #0
   b4a66:	f7ff bd75 	b.w	b4554 <hal_i2c_flush>

000b4a6a <_ZN7TwoWireD0Ev>:
   b4a6a:	b510      	push	{r4, lr}
   b4a6c:	2114      	movs	r1, #20
   b4a6e:	4604      	mov	r4, r0
   b4a70:	f7ff fb11 	bl	b4096 <_ZdlPvj>
   b4a74:	4620      	mov	r0, r4
   b4a76:	bd10      	pop	{r4, pc}

000b4a78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4a78:	b510      	push	{r4, lr}
   b4a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4a7e:	4604      	mov	r4, r0
   b4a80:	4608      	mov	r0, r1
   b4a82:	2100      	movs	r1, #0
   b4a84:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4a88:	4b03      	ldr	r3, [pc, #12]	; (b4a98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4a8a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4a8c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4a8e:	4611      	mov	r1, r2
   b4a90:	f7ff fd68 	bl	b4564 <hal_i2c_init>
}
   b4a94:	4620      	mov	r0, r4
   b4a96:	bd10      	pop	{r4, pc}
   b4a98:	000b5710 	.word	0x000b5710

000b4a9c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b4a9c:	7c00      	ldrb	r0, [r0, #16]
   b4a9e:	2200      	movs	r2, #0
   b4aa0:	f7ff bd18 	b.w	b44d4 <hal_i2c_set_speed>

000b4aa4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4aa4:	2300      	movs	r3, #0
   b4aa6:	7c00      	ldrb	r0, [r0, #16]
   b4aa8:	461a      	mov	r2, r3
   b4aaa:	4619      	mov	r1, r3
   b4aac:	f7ff bd1a 	b.w	b44e4 <hal_i2c_begin>

000b4ab0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4ab0:	7c00      	ldrb	r0, [r0, #16]
   b4ab2:	2200      	movs	r2, #0
   b4ab4:	f7ff bd1e 	b.w	b44f4 <hal_i2c_begin_transmission>

000b4ab8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4ab8:	7c00      	ldrb	r0, [r0, #16]
   b4aba:	2200      	movs	r2, #0
   b4abc:	f7ff bd22 	b.w	b4504 <hal_i2c_end_transmission>

000b4ac0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4ac0:	2101      	movs	r1, #1
   b4ac2:	f7ff bff9 	b.w	b4ab8 <_ZN7TwoWire15endTransmissionEh>

000b4ac6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ac6:	7441      	strb	r1, [r0, #17]
}
   b4ac8:	4770      	bx	lr

000b4aca <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4aca:	4770      	bx	lr

000b4acc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4acc:	4770      	bx	lr

000b4ace <_ZN9USBSerial4readEv>:
{
   b4ace:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ad0:	2100      	movs	r1, #0
   b4ad2:	7c00      	ldrb	r0, [r0, #16]
   b4ad4:	f7ff fce6 	bl	b44a4 <HAL_USB_USART_Receive_Data>
}
   b4ad8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4adc:	bd08      	pop	{r3, pc}

000b4ade <_ZN9USBSerial4peekEv>:
{
   b4ade:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4ae0:	2101      	movs	r1, #1
   b4ae2:	7c00      	ldrb	r0, [r0, #16]
   b4ae4:	f7ff fcde 	bl	b44a4 <HAL_USB_USART_Receive_Data>
}
   b4ae8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4aec:	bd08      	pop	{r3, pc}

000b4aee <_ZN9USBSerial17availableForWriteEv>:
{
   b4aee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4af0:	7c00      	ldrb	r0, [r0, #16]
   b4af2:	f7ff fccf 	bl	b4494 <HAL_USB_USART_Available_Data_For_Write>
}
   b4af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4afa:	bd08      	pop	{r3, pc}

000b4afc <_ZN9USBSerial9availableEv>:
{
   b4afc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4afe:	7c00      	ldrb	r0, [r0, #16]
   b4b00:	f7ff fcc0 	bl	b4484 <HAL_USB_USART_Available_Data>
}
   b4b04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b08:	bd08      	pop	{r3, pc}

000b4b0a <_ZN9USBSerial5writeEh>:
{
   b4b0a:	b513      	push	{r0, r1, r4, lr}
   b4b0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b0e:	7c00      	ldrb	r0, [r0, #16]
{
   b4b10:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b12:	f7ff fcbf 	bl	b4494 <HAL_USB_USART_Available_Data_For_Write>
   b4b16:	2800      	cmp	r0, #0
   b4b18:	9901      	ldr	r1, [sp, #4]
   b4b1a:	dc01      	bgt.n	b4b20 <_ZN9USBSerial5writeEh+0x16>
   b4b1c:	7c60      	ldrb	r0, [r4, #17]
   b4b1e:	b120      	cbz	r0, b4b2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4b20:	7c20      	ldrb	r0, [r4, #16]
   b4b22:	f7ff fcc7 	bl	b44b4 <HAL_USB_USART_Send_Data>
   b4b26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4b2a:	b002      	add	sp, #8
   b4b2c:	bd10      	pop	{r4, pc}

000b4b2e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4b2e:	7c00      	ldrb	r0, [r0, #16]
   b4b30:	f7ff bcc8 	b.w	b44c4 <HAL_USB_USART_Flush_Data>

000b4b34 <_ZN9USBSerialD0Ev>:
   b4b34:	b510      	push	{r4, lr}
   b4b36:	2114      	movs	r1, #20
   b4b38:	4604      	mov	r4, r0
   b4b3a:	f7ff faac 	bl	b4096 <_ZdlPvj>
   b4b3e:	4620      	mov	r0, r4
   b4b40:	bd10      	pop	{r4, pc}
	...

000b4b44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4b44:	b510      	push	{r4, lr}
   b4b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b4a:	4604      	mov	r4, r0
   b4b4c:	4608      	mov	r0, r1
   b4b4e:	2100      	movs	r1, #0
   b4b50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4b54:	4b04      	ldr	r3, [pc, #16]	; (b4b68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4b56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4b58:	2301      	movs	r3, #1
  _serial = serial;
   b4b5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4b5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4b5e:	4611      	mov	r1, r2
   b4b60:	f7ff fc80 	bl	b4464 <HAL_USB_USART_Init>
}
   b4b64:	4620      	mov	r0, r4
   b4b66:	bd10      	pop	{r4, pc}
   b4b68:	000b5738 	.word	0x000b5738

000b4b6c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4b6c:	7c00      	ldrb	r0, [r0, #16]
   b4b6e:	2200      	movs	r2, #0
   b4b70:	f7ff bc80 	b.w	b4474 <HAL_USB_USART_Begin>

000b4b74 <_Z19acquireSerialBufferv>:
{
   b4b74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4b76:	2214      	movs	r2, #20
{
   b4b78:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4b7a:	2100      	movs	r1, #0
   b4b7c:	f000 fc42 	bl	b5404 <memset>
}
   b4b80:	4620      	mov	r0, r4
   b4b82:	bd10      	pop	{r4, pc}

000b4b84 <_Z16_fetch_usbserialv>:
{
   b4b84:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b86:	4c0f      	ldr	r4, [pc, #60]	; (b4bc4 <_Z16_fetch_usbserialv+0x40>)
{
   b4b88:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4b8a:	a803      	add	r0, sp, #12
   b4b8c:	f7ff fff2 	bl	b4b74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b90:	7821      	ldrb	r1, [r4, #0]
   b4b92:	f3bf 8f5b 	dmb	ish
   b4b96:	f011 0101 	ands.w	r1, r1, #1
   b4b9a:	d10f      	bne.n	b4bbc <_Z16_fetch_usbserialv+0x38>
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	9101      	str	r1, [sp, #4]
   b4ba0:	f7ff fa7b 	bl	b409a <__cxa_guard_acquire>
   b4ba4:	9901      	ldr	r1, [sp, #4]
   b4ba6:	b148      	cbz	r0, b4bbc <_Z16_fetch_usbserialv+0x38>
   b4ba8:	aa03      	add	r2, sp, #12
   b4baa:	4807      	ldr	r0, [pc, #28]	; (b4bc8 <_Z16_fetch_usbserialv+0x44>)
   b4bac:	f7ff ffca 	bl	b4b44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	f7ff fa77 	bl	b40a4 <__cxa_guard_release>
   b4bb6:	4805      	ldr	r0, [pc, #20]	; (b4bcc <_Z16_fetch_usbserialv+0x48>)
   b4bb8:	f000 fc10 	bl	b53dc <atexit>
	return _usbserial;
}
   b4bbc:	4802      	ldr	r0, [pc, #8]	; (b4bc8 <_Z16_fetch_usbserialv+0x44>)
   b4bbe:	b008      	add	sp, #32
   b4bc0:	bd10      	pop	{r4, pc}
   b4bc2:	bf00      	nop
   b4bc4:	2003e6d8 	.word	0x2003e6d8
   b4bc8:	2003e6dc 	.word	0x2003e6dc
   b4bcc:	000b4acb 	.word	0x000b4acb

000b4bd0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b4bd0:	4770      	bx	lr

000b4bd2 <_ZN9IPAddressD0Ev>:
   b4bd2:	b510      	push	{r4, lr}
   b4bd4:	2118      	movs	r1, #24
   b4bd6:	4604      	mov	r4, r0
   b4bd8:	f7ff fa5d 	bl	b4096 <_ZdlPvj>
   b4bdc:	4620      	mov	r0, r4
   b4bde:	bd10      	pop	{r4, pc}

000b4be0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4be0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4be2:	7d03      	ldrb	r3, [r0, #20]
   b4be4:	2b06      	cmp	r3, #6
{
   b4be6:	b08d      	sub	sp, #52	; 0x34
   b4be8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4bea:	f100 0704 	add.w	r7, r0, #4
   b4bee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4bf2:	d012      	beq.n	b4c1a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4bf4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4bf8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4bfc:	220a      	movs	r2, #10
   b4bfe:	4630      	mov	r0, r6
   b4c00:	f000 f93d 	bl	b4e7e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4c04:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4c06:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4c08:	d019      	beq.n	b4c3e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4c0a:	2c00      	cmp	r4, #0
   b4c0c:	d0f4      	beq.n	b4bf8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4c0e:	212e      	movs	r1, #46	; 0x2e
   b4c10:	4630      	mov	r0, r6
   b4c12:	f000 f931 	bl	b4e78 <_ZN5Print5printEc>
   b4c16:	4404      	add	r4, r0
   b4c18:	e7ee      	b.n	b4bf8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c1a:	232f      	movs	r3, #47	; 0x2f
   b4c1c:	466a      	mov	r2, sp
   b4c1e:	4639      	mov	r1, r7
   b4c20:	200a      	movs	r0, #10
		buf[0] = 0;
   b4c22:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c26:	f7ff fcdd 	bl	b45e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4c2a:	4668      	mov	r0, sp
   b4c2c:	f000 fc20 	bl	b5470 <strlen>
   b4c30:	6833      	ldr	r3, [r6, #0]
   b4c32:	4602      	mov	r2, r0
   b4c34:	68db      	ldr	r3, [r3, #12]
   b4c36:	4669      	mov	r1, sp
   b4c38:	4630      	mov	r0, r6
   b4c3a:	4798      	blx	r3
   b4c3c:	4604      	mov	r4, r0
    }
    return n;
}
   b4c3e:	4620      	mov	r0, r4
   b4c40:	b00d      	add	sp, #52	; 0x34
   b4c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4c44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4c44:	b510      	push	{r4, lr}
   b4c46:	4b05      	ldr	r3, [pc, #20]	; (b4c5c <_ZN9IPAddressC1Ev+0x18>)
   b4c48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4c4a:	2211      	movs	r2, #17
   b4c4c:	f840 3b04 	str.w	r3, [r0], #4
   b4c50:	2100      	movs	r1, #0
   b4c52:	f000 fbd7 	bl	b5404 <memset>
}
   b4c56:	4620      	mov	r0, r4
   b4c58:	bd10      	pop	{r4, pc}
   b4c5a:	bf00      	nop
   b4c5c:	000b5768 	.word	0x000b5768

000b4c60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4c60:	4603      	mov	r3, r0
   b4c62:	4a07      	ldr	r2, [pc, #28]	; (b4c80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4c64:	b510      	push	{r4, lr}
   b4c66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4c6a:	f101 0210 	add.w	r2, r1, #16
   b4c6e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4c72:	f843 4b04 	str.w	r4, [r3], #4
   b4c76:	4291      	cmp	r1, r2
   b4c78:	d1f9      	bne.n	b4c6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4c7a:	780a      	ldrb	r2, [r1, #0]
   b4c7c:	701a      	strb	r2, [r3, #0]
}
   b4c7e:	bd10      	pop	{r4, pc}
   b4c80:	000b5768 	.word	0x000b5768

000b4c84 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4c84:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4c86:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4c8a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4c8e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4c92:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4c96:	2304      	movs	r3, #4
   b4c98:	6041      	str	r1, [r0, #4]
   b4c9a:	7503      	strb	r3, [r0, #20]
}
   b4c9c:	bd10      	pop	{r4, pc}
	...

000b4ca0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4ca0:	b507      	push	{r0, r1, r2, lr}
   b4ca2:	4b06      	ldr	r3, [pc, #24]	; (b4cbc <_ZN9IPAddressC1EPKh+0x1c>)
   b4ca4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4ca6:	78cb      	ldrb	r3, [r1, #3]
   b4ca8:	9300      	str	r3, [sp, #0]
   b4caa:	788b      	ldrb	r3, [r1, #2]
   b4cac:	784a      	ldrb	r2, [r1, #1]
   b4cae:	7809      	ldrb	r1, [r1, #0]
   b4cb0:	f7ff ffe8 	bl	b4c84 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4cb4:	b003      	add	sp, #12
   b4cb6:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cba:	bf00      	nop
   b4cbc:	000b5768 	.word	0x000b5768

000b4cc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4cc0:	4b01      	ldr	r3, [pc, #4]	; (b4cc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4cc2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4cc4:	4770      	bx	lr
   b4cc6:	bf00      	nop
   b4cc8:	2003e5fc 	.word	0x2003e5fc

000b4ccc <serialEventRun>:
{
   b4ccc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4cce:	4b0b      	ldr	r3, [pc, #44]	; (b4cfc <serialEventRun+0x30>)
   b4cd0:	b143      	cbz	r3, b4ce4 <serialEventRun+0x18>
   b4cd2:	f7ff ff57 	bl	b4b84 <_Z16_fetch_usbserialv>
   b4cd6:	6803      	ldr	r3, [r0, #0]
   b4cd8:	691b      	ldr	r3, [r3, #16]
   b4cda:	4798      	blx	r3
   b4cdc:	2800      	cmp	r0, #0
   b4cde:	dd01      	ble.n	b4ce4 <serialEventRun+0x18>
        serialEvent();
   b4ce0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4ce4:	4b06      	ldr	r3, [pc, #24]	; (b4d00 <serialEventRun+0x34>)
   b4ce6:	b143      	cbz	r3, b4cfa <serialEventRun+0x2e>
   b4ce8:	f000 f998 	bl	b501c <_Z22__fetch_global_Serial1v>
   b4cec:	6803      	ldr	r3, [r0, #0]
   b4cee:	691b      	ldr	r3, [r3, #16]
   b4cf0:	4798      	blx	r3
   b4cf2:	2800      	cmp	r0, #0
   b4cf4:	dd01      	ble.n	b4cfa <serialEventRun+0x2e>
        serialEvent1();
   b4cf6:	f3af 8000 	nop.w
}
   b4cfa:	bd08      	pop	{r3, pc}
	...

000b4d04 <_post_loop>:
{
   b4d04:	b508      	push	{r3, lr}
	serialEventRun();
   b4d06:	f7ff ffe1 	bl	b4ccc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d0a:	f7ff fc83 	bl	b4614 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d0e:	4b01      	ldr	r3, [pc, #4]	; (b4d14 <_post_loop+0x10>)
   b4d10:	6018      	str	r0, [r3, #0]
}
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	2003e744 	.word	0x2003e744

000b4d18 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d18:	4805      	ldr	r0, [pc, #20]	; (b4d30 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d1a:	4a06      	ldr	r2, [pc, #24]	; (b4d34 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4d1c:	4906      	ldr	r1, [pc, #24]	; (b4d38 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4d1e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d20:	1a12      	subs	r2, r2, r0
   b4d22:	f000 fb61 	bl	b53e8 <memcpy>
    __backup_sram_signature = signature;
   b4d26:	4b05      	ldr	r3, [pc, #20]	; (b4d3c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4d28:	4a05      	ldr	r2, [pc, #20]	; (b4d40 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4d2a:	601a      	str	r2, [r3, #0]
}
   b4d2c:	bd08      	pop	{r3, pc}
   b4d2e:	bf00      	nop
   b4d30:	2003f400 	.word	0x2003f400
   b4d34:	2003f404 	.word	0x2003f404
   b4d38:	000b58bc 	.word	0x000b58bc
   b4d3c:	2003f400 	.word	0x2003f400
   b4d40:	9a271c1e 	.word	0x9a271c1e

000b4d44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d46:	2300      	movs	r3, #0
   b4d48:	9300      	str	r3, [sp, #0]
   b4d4a:	461a      	mov	r2, r3
   b4d4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d50:	f7ff fcfa 	bl	b4748 <system_ctrl_set_result>
}
   b4d54:	b003      	add	sp, #12
   b4d56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4d5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4d5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4d5e:	8843      	ldrh	r3, [r0, #2]
   b4d60:	2b0a      	cmp	r3, #10
   b4d62:	d008      	beq.n	b4d76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4d64:	2b50      	cmp	r3, #80	; 0x50
   b4d66:	d10b      	bne.n	b4d80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4d68:	4b09      	ldr	r3, [pc, #36]	; (b4d90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4d6a:	681b      	ldr	r3, [r3, #0]
   b4d6c:	b14b      	cbz	r3, b4d82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4d6e:	b003      	add	sp, #12
   b4d70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4d74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4d76:	f7ff ffe5 	bl	b4d44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4d7a:	b003      	add	sp, #12
   b4d7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d80:	2300      	movs	r3, #0
   b4d82:	9300      	str	r3, [sp, #0]
   b4d84:	461a      	mov	r2, r3
   b4d86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d8a:	f7ff fcdd 	bl	b4748 <system_ctrl_set_result>
}
   b4d8e:	e7f4      	b.n	b4d7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4d90:	2003e6f4 	.word	0x2003e6f4

000b4d94 <module_user_init_hook>:
{
   b4d94:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4d96:	4812      	ldr	r0, [pc, #72]	; (b4de0 <module_user_init_hook+0x4c>)
   b4d98:	2100      	movs	r1, #0
   b4d9a:	f7ff fcf7 	bl	b478c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4d9e:	4b11      	ldr	r3, [pc, #68]	; (b4de4 <module_user_init_hook+0x50>)
   b4da0:	681a      	ldr	r2, [r3, #0]
   b4da2:	4b11      	ldr	r3, [pc, #68]	; (b4de8 <module_user_init_hook+0x54>)
   b4da4:	429a      	cmp	r2, r3
   b4da6:	4b11      	ldr	r3, [pc, #68]	; (b4dec <module_user_init_hook+0x58>)
   b4da8:	bf0c      	ite	eq
   b4daa:	2201      	moveq	r2, #1
   b4dac:	2200      	movne	r2, #0
   b4dae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4db0:	d001      	beq.n	b4db6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4db2:	f7ff ffb1 	bl	b4d18 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4db6:	f7ff fc25 	bl	b4604 <HAL_RNG_GetRandomNumber>
   b4dba:	4604      	mov	r4, r0
    srand(seed);
   b4dbc:	f000 fb2a 	bl	b5414 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4dc0:	4b0b      	ldr	r3, [pc, #44]	; (b4df0 <module_user_init_hook+0x5c>)
   b4dc2:	b113      	cbz	r3, b4dca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4dca:	2100      	movs	r1, #0
   b4dcc:	4808      	ldr	r0, [pc, #32]	; (b4df0 <module_user_init_hook+0x5c>)
   b4dce:	f7ff fc39 	bl	b4644 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4dd6:	4807      	ldr	r0, [pc, #28]	; (b4df4 <module_user_init_hook+0x60>)
   b4dd8:	2100      	movs	r1, #0
   b4dda:	f7ff bcab 	b.w	b4734 <system_ctrl_set_app_request_handler>
   b4dde:	bf00      	nop
   b4de0:	000b4cc1 	.word	0x000b4cc1
   b4de4:	2003f400 	.word	0x2003f400
   b4de8:	9a271c1e 	.word	0x9a271c1e
   b4dec:	2003e6f0 	.word	0x2003e6f0
   b4df0:	00000000 	.word	0x00000000
   b4df4:	000b4d5d 	.word	0x000b4d5d

000b4df8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4df8:	4b01      	ldr	r3, [pc, #4]	; (b4e00 <_GLOBAL__sub_I_RGB+0x8>)
   b4dfa:	2200      	movs	r2, #0
   b4dfc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4dfe:	4770      	bx	lr
   b4e00:	2003e6f8 	.word	0x2003e6f8

000b4e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4e04:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4e06:	681a      	ldr	r2, [r3, #0]
   b4e08:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4e0a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4e0c:	4770      	bx	lr
   b4e0e:	bf00      	nop
   b4e10:	2003e5f8 	.word	0x2003e5f8
   b4e14:	2003e708 	.word	0x2003e708

000b4e18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e18:	4b01      	ldr	r3, [pc, #4]	; (b4e20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e1a:	4a02      	ldr	r2, [pc, #8]	; (b4e24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4e1c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4e1e:	4770      	bx	lr
   b4e20:	2003e70c 	.word	0x2003e70c
   b4e24:	000b5790 	.word	0x000b5790

000b4e28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e2a:	4606      	mov	r6, r0
   b4e2c:	460d      	mov	r5, r1
  size_t n = 0;
   b4e2e:	188f      	adds	r7, r1, r2
   b4e30:	2400      	movs	r4, #0
  while (size--) {
   b4e32:	42bd      	cmp	r5, r7
   b4e34:	d00c      	beq.n	b4e50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4e36:	6833      	ldr	r3, [r6, #0]
   b4e38:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4e3c:	689b      	ldr	r3, [r3, #8]
   b4e3e:	4630      	mov	r0, r6
   b4e40:	4798      	blx	r3
     if (chunk>=0)
   b4e42:	1e03      	subs	r3, r0, #0
   b4e44:	db01      	blt.n	b4e4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4e46:	441c      	add	r4, r3
  while (size--) {
   b4e48:	e7f3      	b.n	b4e32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4e4a:	2c00      	cmp	r4, #0
   b4e4c:	bf08      	it	eq
   b4e4e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4e50:	4620      	mov	r0, r4
   b4e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e54 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4e54:	b513      	push	{r0, r1, r4, lr}
   b4e56:	4604      	mov	r4, r0
    }
   b4e58:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4e5a:	b159      	cbz	r1, b4e74 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4e5c:	9101      	str	r1, [sp, #4]
   b4e5e:	f000 fb07 	bl	b5470 <strlen>
   b4e62:	6823      	ldr	r3, [r4, #0]
   b4e64:	9901      	ldr	r1, [sp, #4]
   b4e66:	68db      	ldr	r3, [r3, #12]
   b4e68:	4602      	mov	r2, r0
   b4e6a:	4620      	mov	r0, r4
    }
   b4e6c:	b002      	add	sp, #8
   b4e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4e72:	4718      	bx	r3
    }
   b4e74:	b002      	add	sp, #8
   b4e76:	bd10      	pop	{r4, pc}

000b4e78 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4e78:	6803      	ldr	r3, [r0, #0]
   b4e7a:	689b      	ldr	r3, [r3, #8]
   b4e7c:	4718      	bx	r3

000b4e7e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4e7e:	b530      	push	{r4, r5, lr}
   b4e80:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4e82:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e84:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e8a:	bf98      	it	ls
   b4e8c:	220a      	movls	r2, #10
   b4e8e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e90:	460d      	mov	r5, r1
   b4e92:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e96:	fb01 5312 	mls	r3, r1, r2, r5
   b4e9a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e9e:	2b09      	cmp	r3, #9
   b4ea0:	bf94      	ite	ls
   b4ea2:	3330      	addls	r3, #48	; 0x30
   b4ea4:	3337      	addhi	r3, #55	; 0x37
   b4ea6:	b2db      	uxtb	r3, r3
  } while(n);
   b4ea8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4eaa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4eae:	d9ef      	bls.n	b4e90 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4eb0:	4621      	mov	r1, r4
   b4eb2:	f7ff ffcf 	bl	b4e54 <_ZN5Print5writeEPKc>
}
   b4eb6:	b00b      	add	sp, #44	; 0x2c
   b4eb8:	bd30      	pop	{r4, r5, pc}
	...

000b4ebc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ebc:	4802      	ldr	r0, [pc, #8]	; (b4ec8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ebe:	2300      	movs	r3, #0
   b4ec0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4ec2:	f7ff bb97 	b.w	b45f4 <os_mutex_recursive_create>
   b4ec6:	bf00      	nop
   b4ec8:	2003e710 	.word	0x2003e710

000b4ecc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4ecc:	4b05      	ldr	r3, [pc, #20]	; (b4ee4 <_GLOBAL__sub_I_System+0x18>)
   b4ece:	2202      	movs	r2, #2
   b4ed0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4ed2:	4b05      	ldr	r3, [pc, #20]	; (b4ee8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ed4:	4a05      	ldr	r2, [pc, #20]	; (b4eec <_GLOBAL__sub_I_System+0x20>)
   b4ed6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ed8:	2000      	movs	r0, #0
   b4eda:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4ede:	f7ff bc19 	b.w	b4714 <set_system_mode>
   b4ee2:	bf00      	nop
   b4ee4:	2003e720 	.word	0x2003e720
   b4ee8:	2003e714 	.word	0x2003e714
   b4eec:	ffff0000 	.word	0xffff0000

000b4ef0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ef0:	2200      	movs	r2, #0
   b4ef2:	6840      	ldr	r0, [r0, #4]
   b4ef4:	4611      	mov	r1, r2
   b4ef6:	f7ff bbe5 	b.w	b46c4 <network_listening>

000b4efa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4efa:	2200      	movs	r2, #0
   b4efc:	6840      	ldr	r0, [r0, #4]
   b4efe:	4611      	mov	r1, r2
   b4f00:	f7ff bbf0 	b.w	b46e4 <network_get_listen_timeout>

000b4f04 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4f04:	6840      	ldr	r0, [r0, #4]
   b4f06:	2200      	movs	r2, #0
   b4f08:	f7ff bbe4 	b.w	b46d4 <network_set_listen_timeout>

000b4f0c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4f0c:	6840      	ldr	r0, [r0, #4]
   b4f0e:	2200      	movs	r2, #0
   b4f10:	f081 0101 	eor.w	r1, r1, #1
   b4f14:	f7ff bbce 	b.w	b46b4 <network_listen>

000b4f18 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4f18:	2300      	movs	r3, #0
   b4f1a:	6840      	ldr	r0, [r0, #4]
   b4f1c:	461a      	mov	r2, r3
   b4f1e:	4619      	mov	r1, r3
   b4f20:	f7ff bbc0 	b.w	b46a4 <network_off>

000b4f24 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4f24:	2300      	movs	r3, #0
   b4f26:	6840      	ldr	r0, [r0, #4]
   b4f28:	461a      	mov	r2, r3
   b4f2a:	4619      	mov	r1, r3
   b4f2c:	f7ff bbb2 	b.w	b4694 <network_on>

000b4f30 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4f30:	2200      	movs	r2, #0
   b4f32:	6840      	ldr	r0, [r0, #4]
   b4f34:	4611      	mov	r1, r2
   b4f36:	f7ff bba5 	b.w	b4684 <network_ready>

000b4f3a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4f3a:	2200      	movs	r2, #0
   b4f3c:	6840      	ldr	r0, [r0, #4]
   b4f3e:	4611      	mov	r1, r2
   b4f40:	f7ff bb90 	b.w	b4664 <network_connecting>

000b4f44 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f44:	6840      	ldr	r0, [r0, #4]
   b4f46:	2200      	movs	r2, #0
   b4f48:	2102      	movs	r1, #2
   b4f4a:	f7ff bb93 	b.w	b4674 <network_disconnect>

000b4f4e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f4e:	2300      	movs	r3, #0
   b4f50:	6840      	ldr	r0, [r0, #4]
   b4f52:	461a      	mov	r2, r3
   b4f54:	f7ff bb7e 	b.w	b4654 <network_connect>

000b4f58 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b4f58:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4f5a:	2203      	movs	r2, #3
   b4f5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4f5e:	4a02      	ldr	r2, [pc, #8]	; (b4f68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f60:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f62:	4770      	bx	lr
   b4f64:	2003e724 	.word	0x2003e724
   b4f68:	000b579c 	.word	0x000b579c

000b4f6c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f6c:	4770      	bx	lr
	...

000b4f70 <_Z17acquireWireBufferv>:
{
   b4f70:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4f72:	2520      	movs	r5, #32
   b4f74:	2314      	movs	r3, #20
{
   b4f76:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4f78:	6003      	str	r3, [r0, #0]
   b4f7a:	6085      	str	r5, [r0, #8]
   b4f7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f7e:	4906      	ldr	r1, [pc, #24]	; (b4f98 <_Z17acquireWireBufferv+0x28>)
   b4f80:	4628      	mov	r0, r5
   b4f82:	f000 f86f 	bl	b5064 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f86:	4904      	ldr	r1, [pc, #16]	; (b4f98 <_Z17acquireWireBufferv+0x28>)
	};
   b4f88:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f8a:	4628      	mov	r0, r5
   b4f8c:	f000 f86a 	bl	b5064 <_ZnajRKSt9nothrow_t>
	};
   b4f90:	60e0      	str	r0, [r4, #12]
}
   b4f92:	4620      	mov	r0, r4
   b4f94:	bd38      	pop	{r3, r4, r5, pc}
   b4f96:	bf00      	nop
   b4f98:	000b57d0 	.word	0x000b57d0

000b4f9c <_Z19__fetch_global_Wirev>:
{
   b4f9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f9e:	4d0e      	ldr	r5, [pc, #56]	; (b4fd8 <_Z19__fetch_global_Wirev+0x3c>)
   b4fa0:	7829      	ldrb	r1, [r5, #0]
   b4fa2:	f3bf 8f5b 	dmb	ish
   b4fa6:	f011 0401 	ands.w	r4, r1, #1
{
   b4faa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4fac:	d111      	bne.n	b4fd2 <_Z19__fetch_global_Wirev+0x36>
   b4fae:	4628      	mov	r0, r5
   b4fb0:	f7ff f873 	bl	b409a <__cxa_guard_acquire>
   b4fb4:	b168      	cbz	r0, b4fd2 <_Z19__fetch_global_Wirev+0x36>
   b4fb6:	a801      	add	r0, sp, #4
   b4fb8:	f7ff ffda 	bl	b4f70 <_Z17acquireWireBufferv>
   b4fbc:	aa01      	add	r2, sp, #4
   b4fbe:	4621      	mov	r1, r4
   b4fc0:	4806      	ldr	r0, [pc, #24]	; (b4fdc <_Z19__fetch_global_Wirev+0x40>)
   b4fc2:	f7ff fd59 	bl	b4a78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4fc6:	4628      	mov	r0, r5
   b4fc8:	f7ff f86c 	bl	b40a4 <__cxa_guard_release>
   b4fcc:	4804      	ldr	r0, [pc, #16]	; (b4fe0 <_Z19__fetch_global_Wirev+0x44>)
   b4fce:	f000 fa05 	bl	b53dc <atexit>
	return wire;
}
   b4fd2:	4802      	ldr	r0, [pc, #8]	; (b4fdc <_Z19__fetch_global_Wirev+0x40>)
   b4fd4:	b007      	add	sp, #28
   b4fd6:	bd30      	pop	{r4, r5, pc}
   b4fd8:	2003e72c 	.word	0x2003e72c
   b4fdc:	2003e730 	.word	0x2003e730
   b4fe0:	000b4f6d 	.word	0x000b4f6d

000b4fe4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4fe4:	4770      	bx	lr
	...

000b4fe8 <_Z20acquireSerial1Bufferv>:
{
   b4fe8:	b538      	push	{r3, r4, r5, lr}
   b4fea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4fec:	2514      	movs	r5, #20
   b4fee:	462a      	mov	r2, r5
   b4ff0:	2100      	movs	r1, #0
   b4ff2:	f000 fa07 	bl	b5404 <memset>
   b4ff6:	8025      	strh	r5, [r4, #0]
   b4ff8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ffa:	4907      	ldr	r1, [pc, #28]	; (b5018 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4ffc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ffe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5000:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5002:	f000 f82f 	bl	b5064 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5006:	4904      	ldr	r1, [pc, #16]	; (b5018 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5008:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b500a:	4628      	mov	r0, r5
   b500c:	f000 f82a 	bl	b5064 <_ZnajRKSt9nothrow_t>
    };
   b5010:	60e0      	str	r0, [r4, #12]
}
   b5012:	4620      	mov	r0, r4
   b5014:	bd38      	pop	{r3, r4, r5, pc}
   b5016:	bf00      	nop
   b5018:	000b57d0 	.word	0x000b57d0

000b501c <_Z22__fetch_global_Serial1v>:
{
   b501c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b501e:	4d0e      	ldr	r5, [pc, #56]	; (b5058 <_Z22__fetch_global_Serial1v+0x3c>)
   b5020:	7829      	ldrb	r1, [r5, #0]
   b5022:	f3bf 8f5b 	dmb	ish
   b5026:	f011 0401 	ands.w	r4, r1, #1
{
   b502a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b502c:	d111      	bne.n	b5052 <_Z22__fetch_global_Serial1v+0x36>
   b502e:	4628      	mov	r0, r5
   b5030:	f7ff f833 	bl	b409a <__cxa_guard_acquire>
   b5034:	b168      	cbz	r0, b5052 <_Z22__fetch_global_Serial1v+0x36>
   b5036:	a801      	add	r0, sp, #4
   b5038:	f7ff ffd6 	bl	b4fe8 <_Z20acquireSerial1Bufferv>
   b503c:	aa01      	add	r2, sp, #4
   b503e:	4621      	mov	r1, r4
   b5040:	4806      	ldr	r0, [pc, #24]	; (b505c <_Z22__fetch_global_Serial1v+0x40>)
   b5042:	f7ff fcd9 	bl	b49f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5046:	4628      	mov	r0, r5
   b5048:	f7ff f82c 	bl	b40a4 <__cxa_guard_release>
   b504c:	4804      	ldr	r0, [pc, #16]	; (b5060 <_Z22__fetch_global_Serial1v+0x44>)
   b504e:	f000 f9c5 	bl	b53dc <atexit>
    return serial1;
}
   b5052:	4802      	ldr	r0, [pc, #8]	; (b505c <_Z22__fetch_global_Serial1v+0x40>)
   b5054:	b007      	add	sp, #28
   b5056:	bd30      	pop	{r4, r5, pc}
   b5058:	2003e748 	.word	0x2003e748
   b505c:	2003e74c 	.word	0x2003e74c
   b5060:	000b4fe5 	.word	0x000b4fe5

000b5064 <_ZnajRKSt9nothrow_t>:
   b5064:	f7ff b815 	b.w	b4092 <_Znaj>

000b5068 <__aeabi_ldivmod>:
   b5068:	b97b      	cbnz	r3, b508a <__aeabi_ldivmod+0x22>
   b506a:	b972      	cbnz	r2, b508a <__aeabi_ldivmod+0x22>
   b506c:	2900      	cmp	r1, #0
   b506e:	bfbe      	ittt	lt
   b5070:	2000      	movlt	r0, #0
   b5072:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b5076:	e006      	blt.n	b5086 <__aeabi_ldivmod+0x1e>
   b5078:	bf08      	it	eq
   b507a:	2800      	cmpeq	r0, #0
   b507c:	bf1c      	itt	ne
   b507e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b5082:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b5086:	f000 b9a7 	b.w	b53d8 <__aeabi_idiv0>
   b508a:	f1ad 0c08 	sub.w	ip, sp, #8
   b508e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b5092:	2900      	cmp	r1, #0
   b5094:	db09      	blt.n	b50aa <__aeabi_ldivmod+0x42>
   b5096:	2b00      	cmp	r3, #0
   b5098:	db1a      	blt.n	b50d0 <__aeabi_ldivmod+0x68>
   b509a:	f000 f835 	bl	b5108 <__udivmoddi4>
   b509e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b50a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b50a6:	b004      	add	sp, #16
   b50a8:	4770      	bx	lr
   b50aa:	4240      	negs	r0, r0
   b50ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b50b0:	2b00      	cmp	r3, #0
   b50b2:	db1b      	blt.n	b50ec <__aeabi_ldivmod+0x84>
   b50b4:	f000 f828 	bl	b5108 <__udivmoddi4>
   b50b8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b50bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b50c0:	b004      	add	sp, #16
   b50c2:	4240      	negs	r0, r0
   b50c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b50c8:	4252      	negs	r2, r2
   b50ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b50ce:	4770      	bx	lr
   b50d0:	4252      	negs	r2, r2
   b50d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b50d6:	f000 f817 	bl	b5108 <__udivmoddi4>
   b50da:	f8dd e004 	ldr.w	lr, [sp, #4]
   b50de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b50e2:	b004      	add	sp, #16
   b50e4:	4240      	negs	r0, r0
   b50e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b50ea:	4770      	bx	lr
   b50ec:	4252      	negs	r2, r2
   b50ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b50f2:	f000 f809 	bl	b5108 <__udivmoddi4>
   b50f6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b50fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b50fe:	b004      	add	sp, #16
   b5100:	4252      	negs	r2, r2
   b5102:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5106:	4770      	bx	lr

000b5108 <__udivmoddi4>:
   b5108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b510c:	9d08      	ldr	r5, [sp, #32]
   b510e:	4604      	mov	r4, r0
   b5110:	468e      	mov	lr, r1
   b5112:	2b00      	cmp	r3, #0
   b5114:	d14d      	bne.n	b51b2 <__udivmoddi4+0xaa>
   b5116:	428a      	cmp	r2, r1
   b5118:	4694      	mov	ip, r2
   b511a:	d969      	bls.n	b51f0 <__udivmoddi4+0xe8>
   b511c:	fab2 f282 	clz	r2, r2
   b5120:	b152      	cbz	r2, b5138 <__udivmoddi4+0x30>
   b5122:	fa01 f302 	lsl.w	r3, r1, r2
   b5126:	f1c2 0120 	rsb	r1, r2, #32
   b512a:	fa20 f101 	lsr.w	r1, r0, r1
   b512e:	fa0c fc02 	lsl.w	ip, ip, r2
   b5132:	ea41 0e03 	orr.w	lr, r1, r3
   b5136:	4094      	lsls	r4, r2
   b5138:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b513c:	0c21      	lsrs	r1, r4, #16
   b513e:	fbbe f6f8 	udiv	r6, lr, r8
   b5142:	fa1f f78c 	uxth.w	r7, ip
   b5146:	fb08 e316 	mls	r3, r8, r6, lr
   b514a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b514e:	fb06 f107 	mul.w	r1, r6, r7
   b5152:	4299      	cmp	r1, r3
   b5154:	d90a      	bls.n	b516c <__udivmoddi4+0x64>
   b5156:	eb1c 0303 	adds.w	r3, ip, r3
   b515a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b515e:	f080 811f 	bcs.w	b53a0 <__udivmoddi4+0x298>
   b5162:	4299      	cmp	r1, r3
   b5164:	f240 811c 	bls.w	b53a0 <__udivmoddi4+0x298>
   b5168:	3e02      	subs	r6, #2
   b516a:	4463      	add	r3, ip
   b516c:	1a5b      	subs	r3, r3, r1
   b516e:	b2a4      	uxth	r4, r4
   b5170:	fbb3 f0f8 	udiv	r0, r3, r8
   b5174:	fb08 3310 	mls	r3, r8, r0, r3
   b5178:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b517c:	fb00 f707 	mul.w	r7, r0, r7
   b5180:	42a7      	cmp	r7, r4
   b5182:	d90a      	bls.n	b519a <__udivmoddi4+0x92>
   b5184:	eb1c 0404 	adds.w	r4, ip, r4
   b5188:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b518c:	f080 810a 	bcs.w	b53a4 <__udivmoddi4+0x29c>
   b5190:	42a7      	cmp	r7, r4
   b5192:	f240 8107 	bls.w	b53a4 <__udivmoddi4+0x29c>
   b5196:	4464      	add	r4, ip
   b5198:	3802      	subs	r0, #2
   b519a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b519e:	1be4      	subs	r4, r4, r7
   b51a0:	2600      	movs	r6, #0
   b51a2:	b11d      	cbz	r5, b51ac <__udivmoddi4+0xa4>
   b51a4:	40d4      	lsrs	r4, r2
   b51a6:	2300      	movs	r3, #0
   b51a8:	e9c5 4300 	strd	r4, r3, [r5]
   b51ac:	4631      	mov	r1, r6
   b51ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b51b2:	428b      	cmp	r3, r1
   b51b4:	d909      	bls.n	b51ca <__udivmoddi4+0xc2>
   b51b6:	2d00      	cmp	r5, #0
   b51b8:	f000 80ef 	beq.w	b539a <__udivmoddi4+0x292>
   b51bc:	2600      	movs	r6, #0
   b51be:	e9c5 0100 	strd	r0, r1, [r5]
   b51c2:	4630      	mov	r0, r6
   b51c4:	4631      	mov	r1, r6
   b51c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b51ca:	fab3 f683 	clz	r6, r3
   b51ce:	2e00      	cmp	r6, #0
   b51d0:	d14a      	bne.n	b5268 <__udivmoddi4+0x160>
   b51d2:	428b      	cmp	r3, r1
   b51d4:	d302      	bcc.n	b51dc <__udivmoddi4+0xd4>
   b51d6:	4282      	cmp	r2, r0
   b51d8:	f200 80f9 	bhi.w	b53ce <__udivmoddi4+0x2c6>
   b51dc:	1a84      	subs	r4, r0, r2
   b51de:	eb61 0303 	sbc.w	r3, r1, r3
   b51e2:	2001      	movs	r0, #1
   b51e4:	469e      	mov	lr, r3
   b51e6:	2d00      	cmp	r5, #0
   b51e8:	d0e0      	beq.n	b51ac <__udivmoddi4+0xa4>
   b51ea:	e9c5 4e00 	strd	r4, lr, [r5]
   b51ee:	e7dd      	b.n	b51ac <__udivmoddi4+0xa4>
   b51f0:	b902      	cbnz	r2, b51f4 <__udivmoddi4+0xec>
   b51f2:	deff      	udf	#255	; 0xff
   b51f4:	fab2 f282 	clz	r2, r2
   b51f8:	2a00      	cmp	r2, #0
   b51fa:	f040 8092 	bne.w	b5322 <__udivmoddi4+0x21a>
   b51fe:	eba1 010c 	sub.w	r1, r1, ip
   b5202:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b5206:	fa1f fe8c 	uxth.w	lr, ip
   b520a:	2601      	movs	r6, #1
   b520c:	0c20      	lsrs	r0, r4, #16
   b520e:	fbb1 f3f7 	udiv	r3, r1, r7
   b5212:	fb07 1113 	mls	r1, r7, r3, r1
   b5216:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b521a:	fb0e f003 	mul.w	r0, lr, r3
   b521e:	4288      	cmp	r0, r1
   b5220:	d908      	bls.n	b5234 <__udivmoddi4+0x12c>
   b5222:	eb1c 0101 	adds.w	r1, ip, r1
   b5226:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b522a:	d202      	bcs.n	b5232 <__udivmoddi4+0x12a>
   b522c:	4288      	cmp	r0, r1
   b522e:	f200 80cb 	bhi.w	b53c8 <__udivmoddi4+0x2c0>
   b5232:	4643      	mov	r3, r8
   b5234:	1a09      	subs	r1, r1, r0
   b5236:	b2a4      	uxth	r4, r4
   b5238:	fbb1 f0f7 	udiv	r0, r1, r7
   b523c:	fb07 1110 	mls	r1, r7, r0, r1
   b5240:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b5244:	fb0e fe00 	mul.w	lr, lr, r0
   b5248:	45a6      	cmp	lr, r4
   b524a:	d908      	bls.n	b525e <__udivmoddi4+0x156>
   b524c:	eb1c 0404 	adds.w	r4, ip, r4
   b5250:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b5254:	d202      	bcs.n	b525c <__udivmoddi4+0x154>
   b5256:	45a6      	cmp	lr, r4
   b5258:	f200 80bb 	bhi.w	b53d2 <__udivmoddi4+0x2ca>
   b525c:	4608      	mov	r0, r1
   b525e:	eba4 040e 	sub.w	r4, r4, lr
   b5262:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b5266:	e79c      	b.n	b51a2 <__udivmoddi4+0x9a>
   b5268:	f1c6 0720 	rsb	r7, r6, #32
   b526c:	40b3      	lsls	r3, r6
   b526e:	fa22 fc07 	lsr.w	ip, r2, r7
   b5272:	ea4c 0c03 	orr.w	ip, ip, r3
   b5276:	fa20 f407 	lsr.w	r4, r0, r7
   b527a:	fa01 f306 	lsl.w	r3, r1, r6
   b527e:	431c      	orrs	r4, r3
   b5280:	40f9      	lsrs	r1, r7
   b5282:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b5286:	fa00 f306 	lsl.w	r3, r0, r6
   b528a:	fbb1 f8f9 	udiv	r8, r1, r9
   b528e:	0c20      	lsrs	r0, r4, #16
   b5290:	fa1f fe8c 	uxth.w	lr, ip
   b5294:	fb09 1118 	mls	r1, r9, r8, r1
   b5298:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b529c:	fb08 f00e 	mul.w	r0, r8, lr
   b52a0:	4288      	cmp	r0, r1
   b52a2:	fa02 f206 	lsl.w	r2, r2, r6
   b52a6:	d90b      	bls.n	b52c0 <__udivmoddi4+0x1b8>
   b52a8:	eb1c 0101 	adds.w	r1, ip, r1
   b52ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b52b0:	f080 8088 	bcs.w	b53c4 <__udivmoddi4+0x2bc>
   b52b4:	4288      	cmp	r0, r1
   b52b6:	f240 8085 	bls.w	b53c4 <__udivmoddi4+0x2bc>
   b52ba:	f1a8 0802 	sub.w	r8, r8, #2
   b52be:	4461      	add	r1, ip
   b52c0:	1a09      	subs	r1, r1, r0
   b52c2:	b2a4      	uxth	r4, r4
   b52c4:	fbb1 f0f9 	udiv	r0, r1, r9
   b52c8:	fb09 1110 	mls	r1, r9, r0, r1
   b52cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b52d0:	fb00 fe0e 	mul.w	lr, r0, lr
   b52d4:	458e      	cmp	lr, r1
   b52d6:	d908      	bls.n	b52ea <__udivmoddi4+0x1e2>
   b52d8:	eb1c 0101 	adds.w	r1, ip, r1
   b52dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b52e0:	d26c      	bcs.n	b53bc <__udivmoddi4+0x2b4>
   b52e2:	458e      	cmp	lr, r1
   b52e4:	d96a      	bls.n	b53bc <__udivmoddi4+0x2b4>
   b52e6:	3802      	subs	r0, #2
   b52e8:	4461      	add	r1, ip
   b52ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b52ee:	fba0 9402 	umull	r9, r4, r0, r2
   b52f2:	eba1 010e 	sub.w	r1, r1, lr
   b52f6:	42a1      	cmp	r1, r4
   b52f8:	46c8      	mov	r8, r9
   b52fa:	46a6      	mov	lr, r4
   b52fc:	d356      	bcc.n	b53ac <__udivmoddi4+0x2a4>
   b52fe:	d053      	beq.n	b53a8 <__udivmoddi4+0x2a0>
   b5300:	b15d      	cbz	r5, b531a <__udivmoddi4+0x212>
   b5302:	ebb3 0208 	subs.w	r2, r3, r8
   b5306:	eb61 010e 	sbc.w	r1, r1, lr
   b530a:	fa01 f707 	lsl.w	r7, r1, r7
   b530e:	fa22 f306 	lsr.w	r3, r2, r6
   b5312:	40f1      	lsrs	r1, r6
   b5314:	431f      	orrs	r7, r3
   b5316:	e9c5 7100 	strd	r7, r1, [r5]
   b531a:	2600      	movs	r6, #0
   b531c:	4631      	mov	r1, r6
   b531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5322:	f1c2 0320 	rsb	r3, r2, #32
   b5326:	40d8      	lsrs	r0, r3
   b5328:	fa0c fc02 	lsl.w	ip, ip, r2
   b532c:	fa21 f303 	lsr.w	r3, r1, r3
   b5330:	4091      	lsls	r1, r2
   b5332:	4301      	orrs	r1, r0
   b5334:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b5338:	fa1f fe8c 	uxth.w	lr, ip
   b533c:	fbb3 f0f7 	udiv	r0, r3, r7
   b5340:	fb07 3610 	mls	r6, r7, r0, r3
   b5344:	0c0b      	lsrs	r3, r1, #16
   b5346:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b534a:	fb00 f60e 	mul.w	r6, r0, lr
   b534e:	429e      	cmp	r6, r3
   b5350:	fa04 f402 	lsl.w	r4, r4, r2
   b5354:	d908      	bls.n	b5368 <__udivmoddi4+0x260>
   b5356:	eb1c 0303 	adds.w	r3, ip, r3
   b535a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b535e:	d22f      	bcs.n	b53c0 <__udivmoddi4+0x2b8>
   b5360:	429e      	cmp	r6, r3
   b5362:	d92d      	bls.n	b53c0 <__udivmoddi4+0x2b8>
   b5364:	3802      	subs	r0, #2
   b5366:	4463      	add	r3, ip
   b5368:	1b9b      	subs	r3, r3, r6
   b536a:	b289      	uxth	r1, r1
   b536c:	fbb3 f6f7 	udiv	r6, r3, r7
   b5370:	fb07 3316 	mls	r3, r7, r6, r3
   b5374:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b5378:	fb06 f30e 	mul.w	r3, r6, lr
   b537c:	428b      	cmp	r3, r1
   b537e:	d908      	bls.n	b5392 <__udivmoddi4+0x28a>
   b5380:	eb1c 0101 	adds.w	r1, ip, r1
   b5384:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b5388:	d216      	bcs.n	b53b8 <__udivmoddi4+0x2b0>
   b538a:	428b      	cmp	r3, r1
   b538c:	d914      	bls.n	b53b8 <__udivmoddi4+0x2b0>
   b538e:	3e02      	subs	r6, #2
   b5390:	4461      	add	r1, ip
   b5392:	1ac9      	subs	r1, r1, r3
   b5394:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b5398:	e738      	b.n	b520c <__udivmoddi4+0x104>
   b539a:	462e      	mov	r6, r5
   b539c:	4628      	mov	r0, r5
   b539e:	e705      	b.n	b51ac <__udivmoddi4+0xa4>
   b53a0:	4606      	mov	r6, r0
   b53a2:	e6e3      	b.n	b516c <__udivmoddi4+0x64>
   b53a4:	4618      	mov	r0, r3
   b53a6:	e6f8      	b.n	b519a <__udivmoddi4+0x92>
   b53a8:	454b      	cmp	r3, r9
   b53aa:	d2a9      	bcs.n	b5300 <__udivmoddi4+0x1f8>
   b53ac:	ebb9 0802 	subs.w	r8, r9, r2
   b53b0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b53b4:	3801      	subs	r0, #1
   b53b6:	e7a3      	b.n	b5300 <__udivmoddi4+0x1f8>
   b53b8:	4646      	mov	r6, r8
   b53ba:	e7ea      	b.n	b5392 <__udivmoddi4+0x28a>
   b53bc:	4620      	mov	r0, r4
   b53be:	e794      	b.n	b52ea <__udivmoddi4+0x1e2>
   b53c0:	4640      	mov	r0, r8
   b53c2:	e7d1      	b.n	b5368 <__udivmoddi4+0x260>
   b53c4:	46d0      	mov	r8, sl
   b53c6:	e77b      	b.n	b52c0 <__udivmoddi4+0x1b8>
   b53c8:	3b02      	subs	r3, #2
   b53ca:	4461      	add	r1, ip
   b53cc:	e732      	b.n	b5234 <__udivmoddi4+0x12c>
   b53ce:	4630      	mov	r0, r6
   b53d0:	e709      	b.n	b51e6 <__udivmoddi4+0xde>
   b53d2:	4464      	add	r4, ip
   b53d4:	3802      	subs	r0, #2
   b53d6:	e742      	b.n	b525e <__udivmoddi4+0x156>

000b53d8 <__aeabi_idiv0>:
   b53d8:	4770      	bx	lr
   b53da:	bf00      	nop

000b53dc <atexit>:
   b53dc:	2300      	movs	r3, #0
   b53de:	4601      	mov	r1, r0
   b53e0:	461a      	mov	r2, r3
   b53e2:	4618      	mov	r0, r3
   b53e4:	f000 b84c 	b.w	b5480 <__register_exitproc>

000b53e8 <memcpy>:
   b53e8:	440a      	add	r2, r1
   b53ea:	4291      	cmp	r1, r2
   b53ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b53f0:	d100      	bne.n	b53f4 <memcpy+0xc>
   b53f2:	4770      	bx	lr
   b53f4:	b510      	push	{r4, lr}
   b53f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b53fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b53fe:	4291      	cmp	r1, r2
   b5400:	d1f9      	bne.n	b53f6 <memcpy+0xe>
   b5402:	bd10      	pop	{r4, pc}

000b5404 <memset>:
   b5404:	4402      	add	r2, r0
   b5406:	4603      	mov	r3, r0
   b5408:	4293      	cmp	r3, r2
   b540a:	d100      	bne.n	b540e <memset+0xa>
   b540c:	4770      	bx	lr
   b540e:	f803 1b01 	strb.w	r1, [r3], #1
   b5412:	e7f9      	b.n	b5408 <memset+0x4>

000b5414 <srand>:
   b5414:	b538      	push	{r3, r4, r5, lr}
   b5416:	4b10      	ldr	r3, [pc, #64]	; (b5458 <srand+0x44>)
   b5418:	681d      	ldr	r5, [r3, #0]
   b541a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b541c:	4604      	mov	r4, r0
   b541e:	b9b3      	cbnz	r3, b544e <srand+0x3a>
   b5420:	2018      	movs	r0, #24
   b5422:	f7ff f99b 	bl	b475c <malloc>
   b5426:	4602      	mov	r2, r0
   b5428:	63a8      	str	r0, [r5, #56]	; 0x38
   b542a:	b920      	cbnz	r0, b5436 <srand+0x22>
   b542c:	4b0b      	ldr	r3, [pc, #44]	; (b545c <srand+0x48>)
   b542e:	480c      	ldr	r0, [pc, #48]	; (b5460 <srand+0x4c>)
   b5430:	2142      	movs	r1, #66	; 0x42
   b5432:	f7ff f9a3 	bl	b477c <__assert_func>
   b5436:	490b      	ldr	r1, [pc, #44]	; (b5464 <srand+0x50>)
   b5438:	4b0b      	ldr	r3, [pc, #44]	; (b5468 <srand+0x54>)
   b543a:	e9c0 1300 	strd	r1, r3, [r0]
   b543e:	4b0b      	ldr	r3, [pc, #44]	; (b546c <srand+0x58>)
   b5440:	6083      	str	r3, [r0, #8]
   b5442:	230b      	movs	r3, #11
   b5444:	8183      	strh	r3, [r0, #12]
   b5446:	2100      	movs	r1, #0
   b5448:	2001      	movs	r0, #1
   b544a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b544e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5450:	2200      	movs	r2, #0
   b5452:	611c      	str	r4, [r3, #16]
   b5454:	615a      	str	r2, [r3, #20]
   b5456:	bd38      	pop	{r3, r4, r5, pc}
   b5458:	2003e5fc 	.word	0x2003e5fc
   b545c:	000b57d1 	.word	0x000b57d1
   b5460:	000b57e8 	.word	0x000b57e8
   b5464:	abcd330e 	.word	0xabcd330e
   b5468:	e66d1234 	.word	0xe66d1234
   b546c:	0005deec 	.word	0x0005deec

000b5470 <strlen>:
   b5470:	4603      	mov	r3, r0
   b5472:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5476:	2a00      	cmp	r2, #0
   b5478:	d1fb      	bne.n	b5472 <strlen+0x2>
   b547a:	1a18      	subs	r0, r3, r0
   b547c:	3801      	subs	r0, #1
   b547e:	4770      	bx	lr

000b5480 <__register_exitproc>:
   b5480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5484:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5540 <__register_exitproc+0xc0>
   b5488:	4606      	mov	r6, r0
   b548a:	f8d8 0000 	ldr.w	r0, [r8]
   b548e:	461f      	mov	r7, r3
   b5490:	460d      	mov	r5, r1
   b5492:	4691      	mov	r9, r2
   b5494:	f000 f856 	bl	b5544 <__retarget_lock_acquire_recursive>
   b5498:	4b25      	ldr	r3, [pc, #148]	; (b5530 <__register_exitproc+0xb0>)
   b549a:	681c      	ldr	r4, [r3, #0]
   b549c:	b934      	cbnz	r4, b54ac <__register_exitproc+0x2c>
   b549e:	4c25      	ldr	r4, [pc, #148]	; (b5534 <__register_exitproc+0xb4>)
   b54a0:	601c      	str	r4, [r3, #0]
   b54a2:	4b25      	ldr	r3, [pc, #148]	; (b5538 <__register_exitproc+0xb8>)
   b54a4:	b113      	cbz	r3, b54ac <__register_exitproc+0x2c>
   b54a6:	681b      	ldr	r3, [r3, #0]
   b54a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b54ac:	6863      	ldr	r3, [r4, #4]
   b54ae:	2b1f      	cmp	r3, #31
   b54b0:	dd07      	ble.n	b54c2 <__register_exitproc+0x42>
   b54b2:	f8d8 0000 	ldr.w	r0, [r8]
   b54b6:	f000 f847 	bl	b5548 <__retarget_lock_release_recursive>
   b54ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b54be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b54c2:	b34e      	cbz	r6, b5518 <__register_exitproc+0x98>
   b54c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b54c8:	b988      	cbnz	r0, b54ee <__register_exitproc+0x6e>
   b54ca:	4b1c      	ldr	r3, [pc, #112]	; (b553c <__register_exitproc+0xbc>)
   b54cc:	b923      	cbnz	r3, b54d8 <__register_exitproc+0x58>
   b54ce:	f8d8 0000 	ldr.w	r0, [r8]
   b54d2:	f000 f838 	bl	b5546 <__retarget_lock_release>
   b54d6:	e7f0      	b.n	b54ba <__register_exitproc+0x3a>
   b54d8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b54dc:	f7ff f93e 	bl	b475c <malloc>
   b54e0:	2800      	cmp	r0, #0
   b54e2:	d0f4      	beq.n	b54ce <__register_exitproc+0x4e>
   b54e4:	2300      	movs	r3, #0
   b54e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b54ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b54ee:	6863      	ldr	r3, [r4, #4]
   b54f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b54f4:	2201      	movs	r2, #1
   b54f6:	409a      	lsls	r2, r3
   b54f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b54fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5500:	4313      	orrs	r3, r2
   b5502:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5506:	2e02      	cmp	r6, #2
   b5508:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b550c:	bf02      	ittt	eq
   b550e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5512:	4313      	orreq	r3, r2
   b5514:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5518:	6863      	ldr	r3, [r4, #4]
   b551a:	f8d8 0000 	ldr.w	r0, [r8]
   b551e:	1c5a      	adds	r2, r3, #1
   b5520:	3302      	adds	r3, #2
   b5522:	6062      	str	r2, [r4, #4]
   b5524:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5528:	f000 f80e 	bl	b5548 <__retarget_lock_release_recursive>
   b552c:	2000      	movs	r0, #0
   b552e:	e7c6      	b.n	b54be <__register_exitproc+0x3e>
   b5530:	2003e7ec 	.word	0x2003e7ec
   b5534:	2003e760 	.word	0x2003e760
   b5538:	00000000 	.word	0x00000000
   b553c:	000b475d 	.word	0x000b475d
   b5540:	2003e660 	.word	0x2003e660

000b5544 <__retarget_lock_acquire_recursive>:
   b5544:	4770      	bx	lr

000b5546 <__retarget_lock_release>:
   b5546:	4770      	bx	lr

000b5548 <__retarget_lock_release_recursive>:
   b5548:	4770      	bx	lr

000b554a <link_code_end>:
	...

000b554c <dynalib_user>:
   b554c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b555c:	0000 0000                                   ....

000b5560 <_ZL14alphafonttable>:
   b5560:	0001 0002 0004 0008 0010 0020 0040 0080     .......... .@...
   b5570:	0100 0200 0400 0800 1000 2000 4000 8000     ........... .@..
	...
   b5590:	12c9 15c0 12f9 00e3 0530 12c8 3a00 1700     ........0....:..
   b55a0:	0000 0006 0220 12ce 12ed 0c24 235d 0400     .... .....$.]#..
   b55b0:	2400 0900 3fc0 12c0 0800 00c0 0000 0c00     .$...?..........
   b55c0:	0c3f 0006 00db 008f 00e6 2069 00fd 0007     ?.........i ....
   b55d0:	00ff 00ef 1200 0a00 2400 00c8 0900 1083     .........$......
   b55e0:	02bb 00f7 128f 0039 120f 00f9 0071 00bd     ......9.....q...
   b55f0:	00f6 1200 001e 2470 0038 0536 2136 003f     ......p$8.6.6!?.
   b5600:	00f3 203f 20f3 00ed 1201 003e 0c30 2836     ..? . ....>.0.6(
   b5610:	2d00 1500 0c09 0039 2100 000f 0c03 0008     .-....9..!......
   b5620:	0100 1058 2078 00d8 088e 0858 0071 048e     ..X.x ....X.q...
   b5630:	1070 1000 000e 3600 0030 10d4 1050 00dc     p......60...P...
   b5640:	0170 0486 0050 2088 0078 001c 2004 2814     p...P.. x.... .(
   b5650:	28c0 200c 0848 0949 1200 2489 0520 3fff     .(. H.I....$ ..?

000b5660 <_ZTVN5spark12NetworkClassE>:
	...
   b5668:	479d 000b 47a7 000b 47b1 000b 47bb 000b     .G...G...G...G..
   b5678:	47c5 000b 47d1 000b 47dd 000b 47e5 000b     .G...G...G...G..
   b5688:	47ed 000b 47f9 000b 4801 000b 480b 000b     .G...G...H...H..
   b5698:	4815 000b                                   .H..

000b569c <_ZTVN5spark9WiFiClassE>:
	...
   b56a4:	495f 000b 4955 000b 494b 000b 4901 000b     _I..UI..KI...I..
   b56b4:	493f 000b 4933 000b 47dd 000b 47e5 000b     ?I..3I...G...G..
   b56c4:	4927 000b 491f 000b 4915 000b 490b 000b     'I...I...I...I..
   b56d4:	4815 000b                                   .H..

000b56d8 <_ZTV11USARTSerial>:
	...
   b56e0:	497d 000b 49e9 000b 49c1 000b 4e29 000b     }I...I...I..)N..
   b56f0:	4991 000b 49ad 000b 499f 000b 49bb 000b     .I...I...I...I..
   b5700:	497f 000b 4983 000b                         .I...I..

000b5708 <_ZTV7TwoWire>:
	...
   b5710:	4a21 000b 4a6b 000b 4a43 000b 4a23 000b     !J..kJ..CJ..#J..
   b5720:	4a4b 000b 4a53 000b 4a5b 000b 4a63 000b     KJ..SJ..[J..cJ..

000b5730 <_ZTV9USBSerial>:
	...
   b5738:	4acd 000b 4b35 000b 4b0b 000b 4e29 000b     .J..5K...K..)N..
   b5748:	4afd 000b 4acf 000b 4adf 000b 4b2f 000b     .J...J...J../K..
   b5758:	4aef 000b 4ac7 000b                         .J...J..

000b5760 <_ZTV9IPAddress>:
	...
   b5768:	4be1 000b 4bd1 000b 4bd3 000b 5925 252d     .K...K...K..%Y-%
   b5778:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b5788:	7361 7463 6d69 0065 7061 0070               asctime.app.

000b5794 <_ZTVN5spark13EthernetClassE>:
	...
   b579c:	4f4f 000b 4f45 000b 4f3b 000b 4f31 000b     OO..EO..;O..1O..
   b57ac:	4f25 000b 4f19 000b 47dd 000b 47e5 000b     %O...O...G...G..
   b57bc:	4f0d 000b 4f05 000b 4efb 000b 4ef1 000b     .O...O...N...N..
   b57cc:	4815 000b                                   .H..

000b57d0 <_ZSt7nothrow>:
   b57d0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b57e0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b57f0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5800:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5810:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5820:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5830:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5840:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5850:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5860:	646e 632e                                    nd.c.

000b5865 <link_const_variable_data_end>:
   b5865:	00          	.byte	0x00
	...

000b5868 <link_constructors_location>:
   b5868:	000b4309 	.word	0x000b4309
   b586c:	000b48ed 	.word	0x000b48ed
   b5870:	000b4969 	.word	0x000b4969
   b5874:	000b4df9 	.word	0x000b4df9
   b5878:	000b4e05 	.word	0x000b4e05
   b587c:	000b4e19 	.word	0x000b4e19
   b5880:	000b4ebd 	.word	0x000b4ebd
   b5884:	000b4ecd 	.word	0x000b4ecd
   b5888:	000b4f59 	.word	0x000b4f59

000b588c <link_constructors_end>:
   b588c:	00000000 	.word	0x00000000
